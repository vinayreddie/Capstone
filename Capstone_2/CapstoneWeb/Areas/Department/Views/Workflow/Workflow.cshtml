@using Capstone.Models;
@model Capstone.Models.ComplexWorkflowViewModel
@{
    ViewBag.Title = "Workflow";
    Layout = "~/Views/Shared/_AdminLTELayout.cshtml";
}

  <!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Workflow
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="#">Forms</a></li>
        @*<li class="active">General Elements</li>*@
    </ol>
</section>
<!-- Main content -->
<section class="content">
    <form id="frmMainContent">
        <div class="row">
            <div class="col-sm-12 col-xs-12 col-md-12 col-xl-12" style="padding-left:3%">
                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Add Service</h3>

                    </div>
                    <div class="box-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                    <div class="form-group">
                                        <label class="control-label">Service Name</label>
                                        @Html.DropDownListFor(model => model.ServiceModel.ServiceId,
                                     new SelectList(ViewData["MasterServices"] as List<MasterServiceModel>, "Id", "Name"), "Select Service",
                                     new { id = "ddlServiceName", @Class = "form-control select2", @data_placeholder = "Select Service" })
                                        @Html.ValidationMessageFor(model => model.ServiceModel.ServiceId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                    <div class="form-group">
                                        <label>Required Documents</label>
                                        @Html.DropDownListFor(model => model.ServiceModel.RequiredDocId,
                                     new SelectList(ViewData["RequiredDocs"] as List<DocumentModel>, "Id", "Name"), "Select Required Documents",
                                     new { id = "ddlReqDoc", @Class = "form-control select2", @multiple = "multiple", @data_placeholder = "Select Required Documents" })
                                        <input type="hidden" id="hfDddlReqDoc" />
                                        @Html.ValidationMessageFor(model => model.ServiceModel.RequiredDocId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                    <div class="form-group">
                                        <label>Approval Documents</label>
                                        @Html.DropDownListFor(model => model.ServiceModel.ApprovalDocId,
                                     new SelectList(ViewData["ApprovalDocs"] as List<DocumentModel>, "Id", "Name"),
                                     new { id = "ddlAppDoc", @class = "form-control select2", @multiple = "multiple", @data_placeholder = "Select Approval Documents" })
                                        <input type="hidden" id="hfDdlAppDoc" />
                                        @Html.ValidationMessageFor(model => model.ServiceModel.ApprovalDocId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                    <div class="form-group">
                                        <label>Fees</label> <br />
                                        @Html.CheckBoxFor(model => model.ServiceModel.HasFixedFee, new { @Class = "icheckbox_minimal-blue", @id = "chkFixed" })Fixed
                                        @Html.CheckBoxFor(model => model.ServiceModel.HasDepartmentRaisedFee, new { @Class = "icheckbox_minimal-blue", @id = "chkDeptRaised" })Department Raised
                                        @Html.CheckBoxFor(model => model.ServiceModel.HasAutogenerated, new { @Class = "icheckbox_minimal-blue", @id = "chkAutogenerated" })Autogenerated
                                    </div>
                                </div>
                                <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4" id="divFees" hidden>
                                    <div class="form-group">
                                        <label>Fees</label>

                                        @Html.EditorFor(model => model.ServiceModel.Fee, new { htmlattributes = new { @Class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ServiceModel.Fee, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4" id="divFormula" hidden>
                                    <div class="form-group">
                                        <label>Formula</label>
                                        @Html.EditorFor(model => model.ServiceModel.Formula, new { htmlattributes = new { @Class = "form-control" } })

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding-left:1%;padding-right:1%">
                            <div class="box">
                                <div class="box-header with-border">
                                    <h3 class="box-title">Add Forward WorkFlow</h3>
                                </div>
                                <div class="box-tools pull-right">
                                    <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                                </div> <br />
                                <div class="box-body">
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label>From Authority</label>
                                                    @*@Html.DropDownList("ddlMandatoryDocs", new SelectList("123", "role1"), new { @class = "form-control" })*@
                                                    @Html.DropDownListFor(model => model.WorkflowModel.FromRoleId, new SelectList(ViewData["FromDesignation"] as List<DesignationModel>, "Id", "Name"), "Select from officer",
                                            new { id = "ddlFromofficer", @Class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.WorkflowModel.FromRoleId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label>To Authority</label>
                                                    @*@Html.DropDownList("ddlMandatoryDocs", new SelectList("123", "role1"), new { @class = "form-control" })*@
                                                    @Html.DropDownListFor(model => model.WorkflowModel.ToRoleId, new SelectList(string.Empty), "Select To officer",
                                            new { id = "ddlToofficer", @Class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.WorkflowModel.ToRoleId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label>SLA</label>
                                                    @*@Html.Editor("txtSLA", new { htmlattributes = new { @Class = "form-control" } })*@
                                                    @Html.EditorFor(model => model.WorkflowModel.SLA, new { htmlattributes = new { id = "txtSLA", @Class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.WorkflowModel.SLA, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">

                                            <div class="col-sm-6 col-xs-6 col-md-6 col-xl-6">
                                                <div class="form-group">
                                                    <br />
                                                    @*@Html.CheckBox("chkAutoslide", new { @Class = "icheckbox_minimal-blue" })AutoSlide
                                                        @Html.CheckBox("chkInspectionreport", new { @Class = "icheckbox_minimal-blue" })Inspection Report*@
                                                    @Html.CheckBoxFor(model => model.WorkflowModel.HasAutoSlidePrevilege, new { @Class = "icheckbox_minimal-blue" }) AutoSlide
                                                    @Html.CheckBoxFor(model => model.WorkflowModel.HasInspectionPrevilege, new { @Class = "icheckbox_minimal-blue" }) Inspection Report
                                                    @Html.CheckBoxFor(model => model.WorkflowModel.HasApprovalPrevilege, new { @Class = "icheckbox_minimal-blue" }) Approval Authority
                                                    @Html.CheckBoxFor(model => model.WorkflowModel.HasRaisedQueryPrevilege, new { @Class = "icheckbox_minimal-blue" }) Raise Query
                                                    @Html.CheckBoxFor(model => model.WorkflowModel.HasReturnPrevilege, new { @Class = "icheckbox_minimal-blue" }) Return

                                                </div>
                                            </div>
                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label></label> <br />
                                                    <input type="button" value="Add" id="btnAdd" class="btn btn-info btn-md" style="width:20%" />
                                                    @*<input type="button" value="Cancel" id="btnCancel" class="btn btn-info btn-md" style="width:20%"  />*@
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row" id="divList" style="padding-left:3%;padding-right:3%">
                                        <div class="box box-warning">
                                            <div class="box-header with-border">
                                                <h3 class="box-title">Workflow</h3>
                                            </div>

                                            <div class="box-body table-responsive no-padding">
                                                <table class="table table-hover" id="tblWorkflow">
                                                    <tr>
                                                        <th>S.NO.</th>
                                                        <th>User 1</th>
                                                        <th>User 2</th>
                                                        <th>SLA</th>
                                                        <th>Autoslide</th>
                                                        <th>Inspection Report</th>
                                                        <th>Approval Authority</th>
                                                        <th>RaiseQuery</th>
                                                        <th>Return</th>
                                                        <th><input type="button" value="Delete" id="btnForwardDeldte" /></th>
                                                    </tr>

                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding-left:1%;padding-right:1%">
                            <div class="box">
                                <div class="box-header with-border">
                                    <h3 class="box-title">Add Reverse WorkFlow</h3>
                                </div>
                                <div class="box-tools pull-right">
                                    <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
                                </div> <br />
                                <div class="box-body">
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label>User 1</label>
                                                    @*@Html.DropDownList("ddlMandatoryDocs", new SelectList("123", "role1"), new { @class = "form-control" })*@
                                                    @Html.DropDownListFor(model => model.WorkflowModel.FromRoleId, new SelectList(ViewData["FromDesignation"] as List<DesignationModel>, "Id", "Name"), "Select from officer",
                                            new { id = "ddlRevFromofficer", @Class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.WorkflowModel.FromRoleId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label>User 2</label>
                                                    @*@Html.DropDownList("ddlMandatoryDocs", new SelectList("123", "role1"), new { @class = "form-control" })*@
                                                    @Html.DropDownListFor(model => model.WorkflowModel.ToRoleId, new SelectList(string.Empty), "Select To officer",
                                            new { id = "ddlRevToofficer", @Class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.WorkflowModel.ToRoleId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-sm-4 col-xs-4 col-md-4 col-xl-4">
                                                <div class="form-group">
                                                    <label></label> <br />
                                                    <input type="button" value="Add" id="btnAddReverseWF" class="btn btn-info btn-md" style="width:20%" />
                                                    @*<input type="button" value="Cancel" id="btnCancel" class="btn btn-info btn-md" style="width:20%"  />*@
                                                </div>
                                            </div>


                                        </div>
                                    </div>
                                    <div class="row" id="divList" style="padding-left:3%;padding-right:3%">
                                        <div class="box box-warning">
                                            <div class="box-header with-border">
                                                <h3 class="box-title">Reverse Workflow</h3>
                                            </div>
                                            <div class="box-body table-responsive no-padding">
                                                <table class="table table-hover" id="tblRevWorkflow">
                                                    <tr>
                                                        <th>S.NO.</th>
                                                        <th>User 1</th>
                                                        <th>User 2</th>
                                                    </tr>

                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12 col-xs-12 col-md-12 col-xl-12">

                                            <input type="button" id="btnSubmit" value="Submit" class="btn btn-info btn-md center-block" style="width:15%" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </div>
        </form>
</section>
<script>

    $(function () {
        $('#divWorkflowList').hide();       
        ApplyifToggled();

    })
    function GetServiceDetails() {

    }
    //Ddl RequirmentDocs on change
    $('#ddlReqDoc').change(function () {

        $('#hfDddlReqDoc').val($(this).val());
    });
    //Ddl ApprovalDocs on change
    $('#ddlAppDoc').change(function () {
        $('#hfDdlAppDoc').val($(this).val());
    });
    //Forward Workflow Add button click
    $('#btnAdd').click(function (e) {
        e.preventDefault();
        var WorkflowValidator = $('#frmMainContent').validate();
        console.log(WorkflowValidator);
        //Validate
        var isFromOfficerValid = WorkflowValidator.element('#ddlFromofficer');
        var isToOfficerValid = WorkflowValidator.element('#ddlToofficer');
        var isSLAValid = WorkflowValidator.element('#txtSLA');
        if (isFromOfficerValid && isToOfficerValid && isSLAValid) {
            var url = 'AddWorkflowList';
            var data = {
                workflow: {
                    WorkflowType:1,
                    FromRoleId: $('#ddlFromofficer').val(),
                    FromOfficerName: $('#ddlFromofficer option:selected').text(),
                    ToRoleId: $('#ddlToofficer').val(),
                    ToOfficerName: $('#ddlToofficer option:selected').text(),
                    SLA: $('#txtSLA').val(),
                    HasAutoSlidePrevilege: $('#WorkflowModel_HasAutoSlidePrevilege').prop('checked'),
                    HasInspectionPrevilege: $('#WorkflowModel_HasInspectionPrevilege').prop('checked'),
                    HasApprovalPrevilege: $('#WorkflowModel_HasApprovalPrevilege').prop('checked'),
                    HasRaisedQueryPrevilege: $('#WorkflowModel_HasRaisedQueryPrevilege').prop('checked'),
                    HasReturnPrevilege: $('#WorkflowModel_HasReturnPrevilege').prop('checked')
                }
            }
            var jqxhr = $.post(url, data, function () { }, 'json')
            .done(function (response) {
                if (response instanceof Object)
                    var json = response;
                else
                    var json = $.parseJSON(response);
                console.log(json);

                GetFromRoleList();
                BindWorkflowList(json)
                ClearWorkflowControls();
                $("#ddlFromofficer").val(json[json.length - 1].ToRoleId);
                FromOfficeronChange();
                $('#ddlFromofficer').prop('disabled', true);

            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("AddWorkflow Request Failed: " + err);
            });
        }
    });

    //Forword work flow table bind
    function BindWorkflowList(json) {
        //Remove all table except headers
        console.log('Method 3');
        $('#tblWorkflow').find("tr:gt(0)").remove();
        $('#divWorkflowList').show();
        for (var i = 0; i < json.length; i++) {
            var tr;
            tr = $('<tr/>');
            tr.append("<td>" + (i + 1) + "</td>")
            tr.append("<td>" + json[i].FromOfficerName + "</td>")
            tr.append("<td>" + json[i].ToOfficerName + "</td>")
            tr.append("<td>" + json[i].SLA + "</td>")
            tr.append("<td>" + json[i].HasAutoSlidePrevilege + "</td>")
            tr.append("<td>" + json[i].HasInspectionPrevilege + "</td>")
            tr.append("<td>" + json[i].HasApprovalPrevilege + "</td>")
            tr.append("<td>" + json[i].HasRaisedQueryPrevilege + "</td>")
            tr.append("<td>" + json[i].HasReturnPrevilege + "</td>")
            tr.append("<td></td>")
            //tr.append("<td> <button type='button' id='btnDelete' class='btn btn-default btn-sm'><i class='glyphicon glyphicon-remove'></i></button></td>")
            $("[id$=tblWorkflow]").append(tr)
            if (json[i].HasApprovalPrevilege == true) {
                $("#ddlFromofficer").prop("disabled", true);
                $("#ddlToofficer").prop("disabled", true);
            }
        }

    }
    function GetFromRoleList() {
        $.ajax({
            type: "POST",
            url: "FillFromRoleList",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                FillfromRoleList(response)
            },
            async:false,
            failure: function (response) {
                alert('Failure: ' + response.d);
            },
            error: function (response) {
                alert('Error: ' + response.d);
            }
        });
    }
    function FillfromRoleList(json) {
        $('#ddlFromofficer').html('');
        $('#ddlFromofficer').append($('<option></option>').val('').html('Select To officer'));
        $.each(json, function () {
            $('#ddlFromofficer').append($('<option></option>').val(this.Id).html(this.Name));
        });

    }
    function ClearWorkflowControls() {
       // $('#ddlFromofficer').val('');
        $('#ddlToofficer').val('');
        $('#txtSLA').val('');
        $('input[name="WorkflowModel.HasAutoSlidePrevilege"]').iCheck('uncheck');
        $('input[name="WorkflowModel.HasInspectionPrevilege"]').iCheck('uncheck');
        $('input[name="WorkflowModel.HasApprovalPrevilege"]').iCheck('uncheck');
        $('input[name="WorkflowModel.HasRaisedQueryPrevilege"]').iCheck('uncheck');
        $('input[name="WorkflowModel.HasReturnPrevilege"]').iCheck('uncheck');

    }

    function ClearControlsAfterSave() {

        $('#ddlReqDoc').val('');
        $('#ddlAppDoc').val('');
        $('#ddlFromofficer').val('');
        $('#ddlToofficer').val('');
        $('#txtSLA').val('');
        $('input[name="WorkFlowModel.AutoSlide"]').iCheck('uncheck');
        $('input[name="WorkFlowModel.InspectionRequirment"]').iCheck('uncheck');
        $('#tblWorkflow').find("tr:gt(0)").remove();
        $('#divWorkflowList').hide();
    }
    //Forward Fromofficer dropdown onchange
    $('#ddlFromofficer').change(function () {
        FromOfficeronChange();
    });

    function FromOfficeronChange() {
        // Clear existing items in the dropdown
        $('#ddlToofficer').html('');
        $('#ddlToofficer').append($('<option></option>').val('').html('Select To officer'));
        var data = { RoleId: parseInt($('#ddlFromofficer').val()) };
        $.ajax({
            type: "POST",
            url: "FillToDesignation",
            data:'{RoleId:'+ parseInt($('#ddlFromofficer').val())+' }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                console.log('method onchange');
                $.each(response, function () {
                    $('#ddlToofficer').append($('<option></option>').val(this.Id).html(this.Name));
                });
            },
            async: false,
            failure: function (response) {
                alert('Failure: ' + response.d);
            },
            error: function (response) {
                alert('Error: ' + response.d);
            }
        });




        //var jqxhr = $.post('FillToRoleList', data, function () { }, 'json')
        //.done(function (response) {
        //    if (response instanceof Object)
        //        var json = response;
        //    else
        //        var json = $.parseJSON(response);
        //    $.each(response, function () {
        //        $('#ddlToofficer').append($('<option></option>').val(this.Id).html(this.Name));
        //    });
        //})
        //.fail(function (jqxhr, textStatus, error) {
        //    var err = textStatus + ", " + error;
        //    console.log("Getting ToRolelist Request Failed: " + err);
        //});
    }

    $('#btnSubmit').click(function (e) {
       
        e.preventDefault();
        debugger;
        var isServiceNameValid = true;
        var isFormulaValid = true;
        var Validateform = $('#frmMainContent').validate()
        var isReqDocValid = Validateform.element('#ddlReqDoc');
        var isAppDocValid = Validateform.element('#ddlAppDoc');
        isServiceNameValid = Validateform.element('#ddlServiceName')
        isFormulaValid = Validateform.element('#ServiceModel_Formula');
       
        var isFeesValid = Validateform.element('#ServiceModel_Fee');
        var rowCount = $('#tblWorkflow tr').length;
        if (rowCount == 1) {
            var isFromOfficerValid = Validateform.element('#ddlFromofficer');
            var isToOfficerValid = Validateform.element('#ddlToofficer');
            var isSLAValid = Validateform.element('#txtSLA');
        }
        var ServiceName = $('#ServiceId').val();
        var RequiredDocId = $('#hfDddlReqDoc').val();
        var ApprovalDocId = $('#hfDdlAppDoc').val();
        if (isReqDocValid && isAppDocValid && isServiceNameValid && isFormulaValid && rowCount > 1) {
            var Data ={
                service:
                      {
                          ServiceId: $('#ddlServiceName').val(),
                          RequiredDocId: $('#hfDddlReqDoc').val() ,
                          ApprovalDocId: $('#hfDdlAppDoc').val(),
                          HasFixedFee: $('#chkFixed').val(),
                          HasDepartmentRaisedFee: $('#chkDeptRaised').val(),
                          HasAutogenerated: $('#chkAutogenerated').val(),
                          Fee: $('#ServiceModel_Fee').val(),
                          Formula: $('#ServiceModel_Formula').val(),
                      }
            }

            var jqxhr = $.post('SaveWorkFlow', Data, function () { }, 'json')
             .done(function (response) {
                 if (response instanceof Object)
                     json = response;
                 else
                     json = $.parseJSON(response);
                 ShowModal(json);
                 //window.location.href = '@Url.Action("Workflow")';
             })
             .fail(function (jqxhr, textStatus, error) {
                 var err = textStatus + ", " + error;
                 console.log("Saving Request Failed: " + err);
             });
        }
    });
    //Forward Toofficer dropdown onchange

    $('#ddlRevFromofficer').change(function () {

        $('#ddlRevToofficer').html('');
        $('#ddlRevToofficer').append($('<option></option>').val('').html('Select To officer'));
        var data = { RoleId: parseInt($('#ddlRevFromofficer').val()) };
        var jqxhr = $.post('FillRevToDesignationList', data, function () { }, 'json')
        .done(function (response) {
            if (response instanceof Object)
                var json = response;
            else
                var json = $.parseJSON(response);
            $.each(json, function () {
                $('#ddlRevToofficer').append($('<option></option>').val(this.Id).html(this.Name));
            });
        })
        .fail(function (jqxhr, textStatus, error) {
            var err = textStatus + ", " + error;
            console.log("Getting ToRolelist Request Failed: " + err);
        });
    });
    //Reverse Workflow  Add button click
    $('#btnAddReverseWF').click(function (e) {
        e.preventDefault();
        var WorkflowValidator = $('#frmMainContent').validate();
        console.log(WorkflowValidator);
        //Validate
        var isFromOfficerValid = WorkflowValidator.element('#ddlRevFromofficer');
        var isToOfficerValid = WorkflowValidator.element('#ddlRevToofficer');
        if (isFromOfficerValid && isToOfficerValid) {
            var url = 'AddRevWorkflowList';
            var data = {
                workflow: {
                    FromRoleId: $('#ddlRevFromofficer').val(),
                    FromOfficerName: $('#ddlRevFromofficer option:selected').text(),
                    ToRoleId: $('#ddlRevToofficer').val(),
                    ToOfficerName: $('#ddlRevToofficer option:selected').text(),

                }
            }
            var jqxhr = $.post(url, data, function () { }, 'json')
            .done(function (response) {
                if (response instanceof Object)
                    var json = response;
                else
                    var json = $.parseJSON(response);
                console.log(json);
                BindRevWorkflowList(json)
                GetRevFromRoleList();
                $('#ddlRevToofficer').val('');
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("AddWorkflow Request Failed: " + err);
            });
        }
    });

    //Reverse Workflow bind table
    function BindRevWorkflowList(json) {
        //Remove all table except headers
        $('#tblRevWorkflow').find("tr:gt(0)").remove();
        for (var i = 0; i < json.length; i++) {
            var tr;
            tr = $('<tr/>');
            tr.append("<td>" + (i + 1) + "</td>")
            tr.append("<td>" + json[i].FromOfficerName + "</td>")
            tr.append("<td>" + json[i].ToOfficerName + "</td>")
            tr.append("<td> <button type='button' id='btnDelete' class='btn btn-default btn-sm'><i class='glyphicon glyphicon-remove'></i></button></td>")
            $("[id$=tblRevWorkflow]").append(tr)

        }
    }
    function GetRevFromRoleList() {
        // Clear existing items in the dropdown

        var jqxhr = $.post('FillRevFromRoleList', '', function () { }, 'json')
       .done(function (response) {
           if (response instanceof Object)
               var json = response;
           else
               var json = $.parseJSON(response);
           FillRevfromDesignationList(json);

       })
       .fail(function (jqxhr, textStatus, error) {
           var err = textStatus + ", " + error;
           console.log("Getting ToRolelist Request Failed: " + err);
       });

    }
    function FillRevfromDesignationList(json) {
        debugger;
        $('#ddlRevFromofficer').html('');
        $('#ddlRevFromofficer').append($('<option></option>').val('').html('Select To officer'));
        $.each(json, function () {
            $('#ddlRevFromofficer').append($('<option></option>').val(this.Id).html(this.Name));
        });
    }
    function ApplyifToggled() {
        $("[id$='chkFixed']").on('ifToggled', function (event) {
            if (this.checked)
                $("#divFees").show();
            else
                $("#divFees").hide();
        });
        $("[id$='chkAutogenerated']").on('ifToggled', function (event) {
            if (this.checked)
                $("#divFormula").show();
            else
                $("#divFormula").hide();
        });
    }


</script>


