@model Capstone.Models.PCPNDTViewModel
<style>
    #divspinner {
        background: #ffffff;
        color: #666666;
        position: fixed;
        height: 100%;
        width: 100%;
        z-index: 5000;
        top: 0;
        left: 0;
        float: left;
        text-align: center;
        padding-top: 13%;
        opacity: 0.6;
    }
</style>
<div id="divspinner" hidden>
    <img src="~/Content/images/spinner.gif" alt="Loading" />
</div>
    <div class="row">
        <div class="col-md-12" style="text-align:center;">
            <span style="font-size:larger;align-self:center; ">Diagnostic Centre (PCPNDT ACT,1994)</span><br />
            <span style="font-size:large;align-self:center; ">FORM-A </span><br />
            <span style="font-size:small;align-content:center; "> [Refer rules 4(1) and 8(1)]</span>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <!-- Custom Tabs -->
            <div class="nav-tabs-custom">
                <ul class="nav nav-tabs">
                    <li class="active" id="liPCPNDTApplicantTab"><a href="#tabApplicant" data-toggle="tab">Applicant</a></li>
                    @*<li><a href="#tabEstablishment" data-toggle="tab">Establishment</a></li>*@
                    <li id="liPCPNDTFacilityTab"><a href="#tabFacility" data-toggle="tab">Facility for Registration</a></li>
                    <li id="liPCPNDTTestsTab"><a href="#tabTests" data-toggle="tab">Tests</a></li>
                    <li id="liPCPNDTEquipmentTab"><a href="#tabEquipment" data-toggle="tab">Equipment</a></li>
                    <li id="liPCPNDTFacilitiesTab"><a href="#tabFacilities" data-toggle="tab">Facilities for Test</a></li>
                    <li id="liPCPNDTEmployeeTab"><a href="#tabEmployee" data-toggle="tab">Employees</a></li>
                    <li id="liPCPNDTInstitutionTab"><a href="#tabOwnership" data-toggle="tab">Ownership & Institution</a></li>
                    <li id="liPCPNDTDeclarationTab"><a href="#tabDeclaration" data-toggle="tab">Declaration</a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="tabApplicant">
                        <form id="formApplicant">
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Applicant Details</legend>
                                <div class="row">
                                    <div class="col-md-2">
                                        @*@Html.LabelFor(model => model.ApplicantModel.Name, new { @class = "control-label" })*@
                                        @Html.Label("Applicant Name")<span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.HiddenFor(model => model.ApplicantModel.Id)
                                        @Html.EditorFor(model => model.ApplicantModel.Name, new { htmlAttributes = new { @class = "form-control ", @Style = "text-transform: uppercase;", @maxlength = "50" } })

                                        @Html.ValidationMessageFor(model => model.ApplicantModel.Name, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.ApplicantModel.ApplicantRole, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.ApplicantModel.ApplicantRole,
                                new List<SelectListItem> {
                                    new SelectListItem {Text = "Select Role", Value = "", Selected = true },
                                    new SelectListItem {Text = "Partner", Value = "Partner" },
                                    new SelectListItem {Text = "MD", Value = "MD" },
                                    new SelectListItem {Text = "Others", Value = "Others" }
                                },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.ApplicantRole, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2 applicantroleother" hidden>
                                        @Html.LabelFor(model => model.ApplicantModel.ApplicantRoleOther, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-2 applicantroleother" hidden>
                                        @Html.EditorFor(model => model.ApplicantModel.ApplicantRoleOther, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.ApplicantRoleOther, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.ApplicantModel.DistrictId, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.ApplicantModel.DistrictId,
                                new SelectList(ViewBag.DistrictList, "Id", "Name"), "Select District",
                                new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.DistrictId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.ApplicantModel.MandalId, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.ApplicantModel.MandalId,
                                new List<SelectListItem>() { new SelectListItem() { Text = "Select Mandal", Value = "", Selected = true } },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.MandalId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.ApplicantModel.VillageId, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.ApplicantModel.VillageId,
                                new List<SelectListItem>() { new SelectListItem() { Text = "Select Village", Value = "", Selected = true } },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.VillageId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.ApplicantModel.Aadhar, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplicantModel.Aadhar, new { htmlAttributes = new { @class = "form-control numeric", @maxlength = "12" } })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.Aadhar, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.ApplicantModel.PAN, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplicantModel.PAN, new { htmlAttributes = new { @class = "form-control", @Style = "text-transform: uppercase;", @maxlength = "10" } })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.PAN, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.LabelFor(model => model.ApplicantModel.HouseNumber, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplicantModel.HouseNumber, new { htmlAttributes = new { @class = "form-control", @maxlength = "20" } })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.HouseNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.ApplicantModel.StreetName, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplicantModel.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.StreetName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1" style="padding-right: 0px;padding-left: 0px;">
                                        @Html.LabelFor(model => model.ApplicantModel.PINCode, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.ApplicantModel.PINCode, new { htmlAttributes = new { @class = "form-control numeric", @maxlength = "6" } })
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.PINCode, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="row"></div>

                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.LabelFor(model => model.ApplicantModel.AadharCardPath, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                        <div>(PDF Format Only)</div>
                                    </div>
                                    <div class="col-md-2">

                                        @Html.TextBoxFor(model => model.ApplicantModel.AadharCardPath, new { @class = "", type = "file", @style = "margin-left:-58%;" })
                                        <span id="errMsgAadharCard" style="color:red;"></span>
                                        @if (!string.IsNullOrEmpty(Model.ApplicantModel.AadharCardPath))
                                        {
                                            var addressindex = Model.ApplicantModel.AadharCardPath.LastIndexOf("/");
                                            var addressfileName = Model.ApplicantModel.AadharCardPath.Substring(addressindex + 1);
                                            @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.ApplicantModel.AadharCardPath, downloadName = addressfileName },
                            null
                            );
                                        }
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.AadharCardPath, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.LabelFor(model => model.ApplicantModel.PANCardPath, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                        <div>(PDF Format Only)</div>
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.ApplicantModel.PANCardPath, new { @class = "", type = "file", @style = "margin-left:-56%;" })
                                        <span id="errMsgPANCard" style="color:red;"></span>
                                        @if (!string.IsNullOrEmpty(Model.ApplicantModel.PANCardPath))
                                        {
                                            var layoutindex = Model.ApplicantModel.PANCardPath.LastIndexOf("/");
                                            var layoutfileName = Model.ApplicantModel.PANCardPath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                        new { Area = "", path = Model.ApplicantModel.PANCardPath, downloadName = layoutfileName }, null);
                                        }
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.PANCardPath, "", new { @class = "text-danger" })
                                    </div>

                                </div>

                                <div class="row"></div>

                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.ApplicantModel.ApplicantPhoto, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                        <div>(JPEG/JPG Format Only,</div>
                                        <div>Size: 10kb - 20kb)</div>
                                    </div>
                                    <div class="col-md-2">
                                        @if (string.IsNullOrEmpty(Model.ApplicantModel.ApplicantPhoto))
                                        {
                                            <div>
                                                <img id="targetImg" src="@Url.Content("~/Content/images/uploadpic.png")" style="height:100px;width:100px;margin-left:12px" />
                                            </div>
                                        }
                                        else
                                        {
                                            <div>
                                                <img id="targetImg" src="@Url.Content("~/Uploads/"+Model.ApplicantModel.ApplicantPhoto)" style="height:100px;width:100px;margin-left:12px" />
                                            </div>
                                        }


                                        <div class="caption">
                                            @*<a href="#" onclick="ClearPreview()"><i class="glyphicon glyphicon-trash"></i></a>*@
                                            <span id="description"></span>
                                            <span style="color:red" id="spanUploadValidation"></span>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ApplicantModel.ApplicantPhoto, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.ApplicantModel.ApplicantPhoto, new { @class = "", type = "file" })


                                    </div>

                                </div>
                                <div class="row">




                                </div>
                                <br />
                                <div class="row">


                                    <div class="col-md-12 text-right">
                                        @*<input type="button" value="Clear" id="btnApplicantClear" class="btn btn-default" />*@
                                        <input type="button" value="Save" id="btnApplicantSave" class="btn btn-primary save" />
                                    </div>
                                </div>

                            </fieldset>
                        </form>
                    </div>

                    <div class="tab-pane" id="tabFacility">
                        <form id="formFacility">
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Facilities</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[0].Id }) <label id="lblFacility1">@ViewBag.FacilityMaster[0].Name</label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[1].Id }) <label id="lblFacility2">@ViewBag.FacilityMaster[1].Name</label>
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[2].Id }) <label id="lblFacility3">@ViewBag.FacilityMaster[2].Name</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[3].Id }) <label id="lblFacility4">@ViewBag.FacilityMaster[3].Name</label>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[4].Id }) <label id="lblFacility5">@ViewBag.FacilityMaster[4].Name</label>
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[5].Id }) <label id="lblFacility6">@ViewBag.FacilityMaster[5].Name</label>
                                    </div>
                                </div>
                            </fieldset>
                            <div class="row">
                                <div class="col-md-1">
                                    @*@Html.LabelFor(model => model.FacilityModel.Name, new { @class = "control-label" })*@
                                    @Html.Label("Facility Name", new { @class = "control-label", @style = "padding-right: 0px;padding-left: 0px; margin-right: -27px;" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.FacilityModel.Id)
                                    @Html.TextBoxFor(model => model.FacilityModel.Name, new { @class = "form-control ", @maxlength = "50", @Style = "text-transform: uppercase;" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.DistrictId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.FacilityModel.DistrictId,
    new SelectList(ViewBag.DistrictList, "Id", "Name"), "Select District",
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.DistrictId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.MandalId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.FacilityModel.MandalId,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Mandal", Value = "", Selected = true } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.MandalId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.VillageId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.FacilityModel.VillageId,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Village", Value = "", Selected = true } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.VillageId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.HouseNumber, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.HouseNumber, new { @class = "form-control", @maxlength = "20" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.HouseNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.StreetName, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.StreetName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.StreetName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.Phone, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.Phone, new { @class = "form-control numeric", @maxlength = "10" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.Phone, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.Email, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.Email, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.Email, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.Fax, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.Fax, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.Fax, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.Telegraph, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.Telegraph, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.Telegraph, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.Telex, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.Telex, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.Telex, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.FacilityModel.PINCode, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.PINCode, new { @class = "form-control numeric", @maxlength = "6" })
                                    @Html.ValidationMessageFor(model => model.FacilityModel.PINCode, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.FacilityModel.AddressProofPath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                    <div>(PDF/JPEG format only)</div>
                                </div>
                                <div class="col-md-2">

                                    @Html.DropDownListFor(model => model.FacilityModel.AddressProofType,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Type", Value = "", Selected = true },
                                    new SelectListItem() { Text = "Property Tax", Value = "PropertyTax" },
                                         new SelectListItem() { Text = "Electricity Bill", Value = "ElectricityBill" },
                                     new SelectListItem() { Text = "Municipal Bill", Value = "MunicipalBill" },
                                           new SelectListItem() { Text = "Telephone Bill", Value = "TelephoneBill" } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    <span id="spanAddressProofType" style="color:red;"></span>

                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.AddressProofPath, new { @class = "", type = "file" })
                                    <span id="errMsgAddressProof" style="color:red;"></span>
                                    @if (!string.IsNullOrEmpty(Model.FacilityModel.AddressProofPath))
                                    {
                                        var addressindex = Model.FacilityModel.AddressProofPath.LastIndexOf("/");
                                        var addressfileName = Model.FacilityModel.AddressProofPath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.FacilityModel.AddressProofPath, downloadName = addressfileName },
                            null
                            );
                                    }
                                    @Html.ValidationMessageFor(model => model.FacilityModel.AddressProofPath, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.FacilityModel.BuildingLayoutPath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                    <div>(PDF/JPEG format only)</div>
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.FacilityModel.BuildingLayoutPath, new { @class = "", type = "file" })
                                    <span id="errMsgBuildingLayout" style="color:red;"></span>
                                    @if (!string.IsNullOrEmpty(Model.FacilityModel.BuildingLayoutPath))
                                    {
                                        var layoutindex = Model.FacilityModel.BuildingLayoutPath.LastIndexOf("/");
                                        var layoutfileName = Model.FacilityModel.BuildingLayoutPath.Substring(layoutindex + 1);
                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
 new { Area = "", path = Model.FacilityModel.BuildingLayoutPath, downloadName = layoutfileName }, null);
                                    }
                                    @Html.ValidationMessageFor(model => model.FacilityModel.BuildingLayoutPath, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.FacilityModel.OwnerShipPath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                    <div>(PDF/JPEG format only)</div>
                                </div>
                                <div class="col-md-2">

                                    @Html.DropDownListFor(model => model.FacilityModel.OwnershipType,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Type", Value = "", Selected = true },
                                    new SelectListItem() { Text = "Own", Value = "Own" },
                                         new SelectListItem() { Text = "Rent", Value = "Rent" },
                                     new SelectListItem() { Text = "Lease", Value = "Lease" }
                                           },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    <span id="spanOwnershipType" style="color:red;"></span>

                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.FacilityModel.OwnerShipPath, new { @class = "", type = "file" })
                                    <span id="errMsgOwnerShip" style="color:red;"></span>
                                    @if (!string.IsNullOrEmpty(Model.FacilityModel.OwnerShipPath))
                                    {
                                        var addressindex = Model.FacilityModel.OwnerShipPath.LastIndexOf("/");
                                        var addressfileName = Model.FacilityModel.OwnerShipPath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.FacilityModel.OwnerShipPath, downloadName = addressfileName },
                            null
                            );
                                    }
                                    @Html.ValidationMessageFor(model => model.FacilityModel.OwnerShipPath, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" value="Clear" id="btnFacilityClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnFacilitySave" class="btn btn-primary save" />
                                </div>
                            </div>
                        </form>
                    </div>

                    <div id="tabTests" class="tab-pane">
                        <form id="formTests">
                            <div class="row">
                                <div class="col-md-offset-1 col-md-10">
                                    Specific pre-natal diagnostic procedures/tests for which approval is sought
                                </div>
                            </div>
                            <fieldset class="scheduler-border" id="fsInvasive" hidden>
                                <legend class="scheduler-border">Invasive</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.HiddenFor(model => model.TestsModel.Id)
                                        @Html.CheckBox("testinvasive", new { @value = "1" }) Amniocentesis
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("testinvasive", new { @value = "2" }) Biochemical
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("testinvasive", new { @value = "3" }) Chorionic Villi Aspiration
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("testinvasive", new { @value = "4" }) Molecular Studies
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("testinvasive", new { @value = "5" }) Chromosomal
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset class="scheduler-border" id="fsNonInvasive" hidden>
                                <legend class="scheduler-border">Non-Invasive</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("testnoninvasive", new { @value = "6" }) Ultra Sonography
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset class="scheduler-border" id="fsTestsRemarks" hidden>
                                <legend class="scheduler-border">Remarks for Genetic Counselling Center / Assisted Reproductive Technology (ART)</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-2">
                                        @Html.LabelFor(model => model.TestsModel.Remarks, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(model => model.TestsModel.Remarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </fieldset>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" value="Clear" id="btnTestClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnTestSave" class="btn btn-primary save" />
                                </div>
                            </div>
                        </form>
                    </div>
                    <!-- /.tab-pane -->
                    <div class="tab-pane" id="tabEquipment">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.CheckBox("EquipmentType") <label>Do you want Equipment Details?</label>
                            </div>
                        </div>
                        <form id="formEquipment" hidden>
                            @Html.HiddenFor(model => model.EquipmentModel.Id)
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Equipment Details</legend>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EquipmentModel.Name, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-2">
                                        @Html.HiddenFor(model => model.EquipmentModel.Id)
                                        @Html.TextBoxFor(model => model.EquipmentModel.Name, new { @class = "form-control ", @maxlength = "50", @Style = "text-transform: uppercase;" })
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.Name, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1 text-right">
                                        @Html.LabelFor(model => model.EquipmentModel.MachineModel, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.EquipmentModel.MachineModel, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.MachineModel, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2 text-right">
                                        @Html.LabelFor(model => model.EquipmentModel.SerialNumber, new { @class = "control-label ignore" })
                                        @*<span style="color:red">*</span>*@
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.EquipmentModel.SerialNumber, new { @class = "form-control", @maxlength = "50" })
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.SerialNumber, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EquipmentModel.Make, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.EquipmentModel.Make, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.Make, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-1 text-right">
                                        @Html.LabelFor(model => model.EquipmentModel.Type, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-2">
                                        @*@Html.TextBoxFor(model => model.EquipmentModel.Type, new { @class = "form-control" })*@
                                        @Html.RadioButtonFor(model => model.EquipmentModel.Type, "New") New
                                        @Html.RadioButtonFor(model => model.EquipmentModel.Type, "Old") Old
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.Type, "", new { @class = "text-danger" })
                                    </div>
                                    @*<div class="col-md-2 text-right">
                                            @Html.LabelFor(model => model.EquipmentModel.UploadedFilePath, new { @class = "control-label" })
                                            <span style="color:red">*</span>
                                        </div>
                                        <div class="col-md-2">
                                            @Html.TextBoxFor(model => model.EquipmentModel.UploadedFilePath, new { @type = "file" })
                                            <span id="errMsgPCPNDTEqipmentUpload" style="color:red;"></span>
                                            @Html.ValidationMessageFor(model => model.EquipmentModel.UploadedFilePath, "", new { @class = "text-danger" })
                                        </div>*@
                                    <div class="col-md-2 text-right  OldType" hidden>
                                        @Html.LabelFor(model => model.EquipmentModel.TransferCertificatePath, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                        <div>(PDF Format only)</div>
                                    </div>
                                    <div class="col-md-2 OldType" hidden>
                                        @Html.TextBoxFor(model => model.EquipmentModel.TransferCertificatePath, new { @type = "file" })
                                        <span id="errMsgPCPNDTTCUpload" style="color:red;"></span>
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.TransferCertificatePath, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2 text-right  NewType" hidden>
                                        @Html.LabelFor(model => model.EquipmentModel.InvoicePath, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                        <div>(PDF Format only)</div>
                                    </div>
                                    <div class="col-md-2 NewType" hidden>
                                        @Html.TextBoxFor(model => model.EquipmentModel.InvoicePath, new { @type = "file" })
                                        <span id="errMsgPCPNDTInvoiceUpload" style="color:red;"></span>
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.InvoicePath, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row">


                                    <div class="col-md-2  OldType" hidden>
                                        @Html.LabelFor(model => model.EquipmentModel.NocFilePath, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                        <div>(PDF Format only)</div>
                                    </div>
                                    <div class="col-md-2 OldType" hidden>
                                        @Html.TextBoxFor(model => model.EquipmentModel.NocFilePath, new { @type = "file" })
                                        <span id="errMsgPCPNDTNOCUpload" style="color:red;"></span>
                                        @Html.ValidationMessageFor(model => model.EquipmentModel.NocFilePath, "", new { @class = "text-danger" })
                                    </div>


                                    <div class="col-md-3 pull-right text-right">
                                        <input type="button" value="Add" id="btnAddEquipment" class="btn btn-default" />
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Equipment List</legend>
                                <div class="row">
                                    <div class="col-xs-12">
                                        <div class="box">
                                            <div class="box-body table-responsive no-padding">
                                                <table id="tblEquiments" class="table table-hover">
                                                    <tr>
                                                        <th>S.No.</th>
                                                        <th>Name</th>
                                                        <th>Serial No.</th>
                                                        <th>Model</th>
                                                        <th>Make</th>
                                                        <th>Type</th>
                                                        <th>Invoice</th>
                                                        <th>NOC</th>
                                                        <th>Transfer Certificate</th>
                                                        <th></th>
                                                    </tr>
                                                    @if (Model.EquipmentList != null)
                                                    {
                                                        for (int i = 0; i < Model.EquipmentList.Count; i++)
                                                        {
                                                            <tr>
                                                                <td>@Convert.ToInt32(i + 1)</td>
                                                                <td>@Model.EquipmentList[i].Name.ToUpper()</td>
                                                                <td>@Model.EquipmentList[i].SerialNumber</td>
                                                                <td>@Model.EquipmentList[i].MachineModel</td>
                                                                <td>@Model.EquipmentList[i].Make</td>
                                                                <td>@Model.EquipmentList[i].Type</td>
                                                                @*<td>
                                                                                                                                   @if (!string.IsNullOrEmpty(Model.EquipmentList[i].UploadedFilePath))
                                                                                                                                   {
                                                                                                                                       var layoutindex = Model.EquipmentList[i].UploadedFilePath.LastIndexOf("/");
                                                                                                                                       var layoutfileName = Model.EquipmentList[i].UploadedFilePath.Substring(layoutindex + 1);
                                                                                                                                       @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                    new { Area = "", path = Model.EquipmentList[i].UploadedFilePath, downloadName = layoutfileName }, null);
                                                                                                                                   }
                                                                                                                               </td>*@
                                                                <td>
                                                                    @if (Model.EquipmentList[i].InvoicePath != null && Model.EquipmentList[i].InvoicePath != "")
                                                                    {
                                                                        var layoutindex = Model.EquipmentList[i].InvoicePath.LastIndexOf("/");
                                                                        var layoutfileName = Model.EquipmentList[i].InvoicePath.Substring(layoutindex + 1);
                                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
new { Area = "", path = Model.EquipmentList[i].InvoicePath, downloadName = layoutfileName }, null);
                                                                    }
                                                                    else
                                                                    {
                                                                        <div>NA</div>
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (Model.EquipmentList[i].NocFilePath != null && Model.EquipmentList[i].NocFilePath != "")
                                                                    {
                                                                        var layoutindex = Model.EquipmentList[i].NocFilePath.LastIndexOf("/");
                                                                        var layoutfileName = Model.EquipmentList[i].NocFilePath.Substring(layoutindex + 1);
                                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
new { Area = "", path = Model.EquipmentList[i].NocFilePath, downloadName = layoutfileName }, null);
                                                                    }
                                                                    else
                                                                    {
                                                                        <div>NA</div>
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (Model.EquipmentList[i].TransferCertificatePath != null && Model.EquipmentList[i].TransferCertificatePath != "")
                                                                    {
                                                                        var layoutindex = Model.EquipmentList[i].TransferCertificatePath.LastIndexOf("/");
                                                                        var layoutfileName = Model.EquipmentList[i].TransferCertificatePath.Substring(layoutindex + 1);
                                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
new { Area = "", path = Model.EquipmentList[i].TransferCertificatePath, downloadName = layoutfileName }, null);
                                                                    }
                                                                    else
                                                                    {
                                                                        <div>NA</div>
                                                                    }
                                                                </td>

                                                                <td><input type='button' value='Delete' onclick='DeleteEquipment(@i);' /></td>
                                                            </tr>
                                                        }
                                                    }

                                                </table>
                                            </div>
                                            <!-- /.box-body -->
                                        </div>
                                        <!-- /.box -->
                                    </div>
                                </div>
                            </fieldset>

                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" value="Clear" id="btnEquipmentClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnEquipmentSave" class="btn btn-primary save" />
                                </div>
                            </div>
                        </form>
                    </div>
                    <!-- /.tab-pane -->
                    <div id="tabFacilities" class="tab-pane">
                        <form id="formFacilities">
                            @Html.HiddenFor(model => model.FacilitiesModel.Id)
                            <div class="row">
                                <div class="col-md-offset-1 col-md-10">
                                    Facilities that are or would be available in the Laboratory/Clinic for the following tests:
                                </div>
                            </div>
                            <fieldset class="scheduler-border" id="fsTests" hidden>
                                <legend class="scheduler-border">Tests</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "1" }) Amniocentesis
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "2" }) Ultra Sound
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytest", new { @value = "3" }) Chorionic Villi Aspiration
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "4" }) Foetal Biopsy
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitytest", new { @value = "5" }) Foetoscopy
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitytest", new { @value = "6" }) Cordocentesis
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset class="scheduler-border" id="fsStudies" hidden>
                                <legend class="scheduler-border">Studies</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitystudies", new { @value = "7" }) Chromosomal Studies
                                    </div>
                                    <div class="col-md-3">
                                        @Html.CheckBox("facilitystudies", new { @value = "8" }) Biochemical Studies
                                    </div>
                                    <div class="col-md-4">
                                        @Html.CheckBox("facilitystudies", new { @value = "9" }) Molecular Studies
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-3">
                                        @Html.CheckBox("facilitystudies", new { @value = "10" }) Preimplantatioin Genetic Diagnosis
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset class="scheduler-border" id="fsFacilityRemarks" hidden>
                                <legend class="scheduler-border">Remarks</legend>
                                <div class="row">
                                    <div class="col-md-offset-1 col-md-2">
                                        @Html.LabelFor(model => model.FacilitiesModel.Remarks, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextAreaFor(model => model.FacilitiesModel.Remarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </fieldset>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" value="Clear" id="btnFacilitiesClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnFacilicitesSave" class="btn btn-primary save" />
                                </div>
                            </div>
                        </form>
                    </div>

                    <div id="tabEmployee" class="tab-pane">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.CheckBox("EmployeeType") <label>Do you want Employee Details?</label>
                            </div>
                        </div>
                        <form id="formEmployee" hidden>
                            @Html.HiddenFor(model => model.EmployeeModel.Id)
                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Employee Details</legend>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EmployeeModel.DesignationId, "Designation", new { @class = "control-label" })
                                        @Html.HiddenFor(model => model.EmployeeModel.Id)
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.EmployeeModel.DesignationId,
                                new SelectList(TempData.Peek("DoctorSpecialityList") as List<Capstone.Models.DoctorSpecialityModel>, "Id", "Name"), "Select Designation",
                                new { @class = "form-control select2", @style = "width:100%;" })
                                        @*@Html.TextBoxFor(model => model.EmployeeModel.Designation, new { @class = "form-control" })*@
                                        @Html.ValidationMessageFor(model => model.EmployeeModel.DesignationId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2 subdesignation" hidden>
                                        @Html.LabelFor(model => model.EmployeeModel.SubDesignation, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3 subdesignation" hidden>
                                        @Html.DropDownList("ddlSubDesignation", new List<SelectListItem>(), new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-7 subdesignation-sonologist" hidden>
                                        <b style="color:red">Note:</b>
                                        Those are under trained by 6 months Sonology training by government teaching hospitals or equivalent. Under supervision of Qualified Radiologist( Professor in Radiology)
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EmployeeModel.Name, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.EmployeeModel.Name, new { @class = "form-control", @Style = "text-transform: uppercase;" })
                                        @Html.ValidationMessageFor(model => model.EmployeeModel.Name, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EmployeeModel.Experience, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-5">
                                        <div class="row">
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.EmployeeModel.ExpYears, new { @class = "form-control numeric", @Value = "", @placeholder = "Years" })
                                                @Html.ValidationMessageFor(model => model.EmployeeModel.ExpYears, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.EmployeeModel.ExpMonths, new { @class = "form-control numeric", @Value = "", @placeholder = "Months" })
                                                @Html.ValidationMessageFor(model => model.EmployeeModel.ExpMonths, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBoxFor(model => model.EmployeeModel.ExpDays, new { @class = "form-control numeric", @Value = "", @placeholder = "Days" })
                                                @Html.ValidationMessageFor(model => model.EmployeeModel.ExpDays, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EmployeeModel.RegistrationNumber, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.EmployeeModel.RegistrationNumber, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.EmployeeModel.RegistrationNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2">
                                        <label>Education Certificates</label><span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-5">
                                        @Html.TextBox("txtEmployeeEducationCertificates", null, new { @type = "file", @multiple = "true" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        @Html.LabelFor(model => model.EmployeeModel.Type, "File Type", new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownList("ddlUploadFileType",
                                new List<SelectListItem> {
                                    new SelectListItem { Text = "Select File Type", Value = "", Selected = true },
                                    new SelectListItem { Text = "Aadhar", Value = "Aadhar" },
                                    new SelectListItem { Text = "PAN", Value = "PAN" },
                                    new SelectListItem { Text = "Photo", Value = "Photo" },
                                    new SelectListItem { Text = "Sign", Value = "Sign" }
                                },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.EmployeeModel.Type, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBox("txtEmployeeUpload", null, new { @type = "file" })
                                    </div>
                                    <div class="col-md-2">
                                        <input type="button" id="btnEmployeeUpload" value="Upload" class="btn btn-default" />
                                    </div>
                                </div>
                                <div class="row" id="divEmployeeUploads" hidden>
                                    <div class="col-md-offset-2 col-md-8">
                                        <table id="tblEmployeeUploads" class="table table-striped">
                                            <tr>
                                                <th>#</th>
                                                <th>File Type</th>
                                                <th>File</th>
                                                <th></th>
                                            </tr>
                                        </table>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12 text-right">
                                        <input type="button" value="Add Employee" id="btnAddEmployee" class="btn btn-default" />
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border">Employee List</legend>
                                <div class="row">
                                    <div class="col-xs-12">
                                        <div class="box">
                                            <div class="box-body table-responsive no-padding">
                                                <table id="tblEmployees" class="table table-hover">
                                                    <tr>
                                                        <th>S.No.</th>
                                                        <th>Name</th>
                                                        <th>Designation</th>
                                                        <th>Experience</th>
                                                        <th>Registration Number</th>
                                                        <th></th>
                                                        <th></th>
                                                    </tr>
                                                    @if (Model.EmployeeList != null)
                                                    {
                                                        for (int i = 0; i < Model.EmployeeList.Count; i++)
                                                        {
                                                            <tr>
                                                                <td> @Convert.ToInt32(@i + 1)</td>
                                                                <td>
                                                                    @{
                                                                        var name = Model.EmployeeList[i].Name;
                                                                        if (Model.EmployeeList[i].SubDesignation != "None")
                                                                        {
                                                                            name = Model.EmployeeList[i].Name + ". " + Model.EmployeeList[i].SubDesignation;
                                                                        }
                                                                    }
                                                                    @name
                                                                </td>
                                                                <td>@Model.EmployeeList[i].DesignationName</td>
                                                                @*<td>@Model.EmployeeList[i].Experience</td>*@
                                                                <td>@Model.EmployeeList[i].ExpYears Years, @Model.EmployeeList[i].ExpMonths Months, @Model.EmployeeList[i].ExpDays Days</td>
                                                                <td>@Model.EmployeeList[i].RegistrationNumber</td>
                                                                <td>
                                                                    <input type='button' value='View Uploads' onclick='ViewEmployeeUploads(@i);' />
                                                                    @*@if (Model.EmployeeList[i].UploadedFilePath != null)
                                                                                                            {
                                                                                                                var addressindex = Model.EmployeeList[i].UploadedFilePath.LastIndexOf("/");
                                                                                                                var addressfileName = Model.EmployeeList[i].UploadedFilePath.Substring(addressindex + 1);
                                                                                                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                                                        new { Area = "", path = Model.EmployeeList[i].UploadedFilePath, downloadName = addressfileName }, null);
                                                                                                            }*@
                                                                </td>
                                                                <td><input type='button' value='Delete' onclick='DeleteEmployee(@i);' /></td>
                                                            </tr>
                                                                            }
                                                                        }
                                                </table>
                                            </div>
                                            <!-- /.box-body -->
                                        </div>
                                        <!-- /.box -->
                                    </div>
                                </div>
                            </fieldset>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" value="Clear" id="btnEmployeeClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnEmployeeSave" class="btn btn-primary save" />
                                </div>
                            </div>
                        </form>
                    </div>

                    <div id="tabOwnership" class="tab-pane">
                        <form id="formOwnership">
                            <div class="row">
                                <div class="col-md-1" style="margin-left: 10px;">
                                    @Html.HiddenFor(model => model.InstitutionModel.Id)
                                    @Html.LabelFor(model => model.InstitutionModel.OwnershipTypeId, new { @class = "control-label", @style = "margin-left: -9px;" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.DropDownListFor(model => model.InstitutionModel.OwnershipTypeId,
    new SelectList(ViewBag.OwnershipTypeList, "Id", "Name"), "Select Ownership",
     new { @class = "form-control select2", @style = "Width:100%;" })
                                    <div id="ownershipotherfeild" hidden>
                                        @Html.TextBoxFor(model => model.InstitutionModel.OwnershipOthers, new { @class = "form-control", @style = "margin-top:10px;" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.InstitutionModel.OwnershipTypeId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="margin-left:10px;width: 10%; ">
                                    @Html.LabelFor(model => model.InstitutionModel.InstitutionTypeId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.DropDownListFor(model => model.InstitutionModel.InstitutionTypeId,
    new SelectList(ViewBag.InstitutionTypeList, "Id", "Name"), "Select Institution Type",
     new { @class = "form-control select2", @style = "Width:100%;" })
                                    <div id="institutionotherfeild" hidden>
                                        @Html.TextBoxFor(model => model.InstitutionModel.InstitutionOthers, new { @class = "form-control", @style = "margin-top:10px;" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.InstitutionModel.InstitutionTypeId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3 text-right">
                                    @Html.LabelFor(model => model.InstitutionModel.TotalWorkArea, "Total Work Area(in sq.ft.)", new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.InstitutionModel.TotalWorkArea, new { @class = "form-control numeric" })
                                    @Html.ValidationMessageFor(model => model.InstitutionModel.TotalWorkArea, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row" id="divOwnershipUploads" hidden>
                                <div class="col-md-12">
                                    <fieldset class="scheduler-border">
                                        <legend class="scheduler-border">File Uploads</legend>
                                        <div class="row" id="divAffidavitFile">
                                            <div class="col-md-offset-1 col-md-3">
                                                Affidavit <span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBox("affidavitFile", null, new { @type = "file" })
                                                <span id="errMsgaffidavitFile" style="color:red;"></span>
                                                @if (!string.IsNullOrEmpty(Model.InstitutionModel.AffidavitDocPath))
                                                {
                                                    var index = Model.InstitutionModel.AffidavitDocPath.LastIndexOf("/");
                                                    var fileName = Model.InstitutionModel.AffidavitDocPath.Substring(index + 1);
                                                    @Html.ActionLink(fileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.InstitutionModel.AffidavitDocPath, downloadName = fileName },
                            null
                            );
                                                }
                                            </div>
                                        </div>
                                        <div class="row" id="divAssociationFile">
                                            <div class="col-md-offset-1 col-md-3">
                                                <span id="spanArticlesofAssociation">Articles of Association</span><span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBox("articlesofAssociationFile", null, new { @type = "file" })
                                                <span id="errMsgarticleFile" style="color:red;"></span>
                                                @if (!string.IsNullOrEmpty(Model.InstitutionModel.ArticleDocPath))
                                                {
                                                    var index = Model.InstitutionModel.ArticleDocPath.LastIndexOf("/");
                                                    var fileName = Model.InstitutionModel.ArticleDocPath.Substring(index + 1);
                                                    @Html.ActionLink(fileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.InstitutionModel.ArticleDocPath, downloadName = fileName },
                            null
                            );
                                                }
                                            </div>
                                        </div>
                                        <div class="row" id="divStudyCertificateFiles">
                                            <div class="col-md-offset-1 col-md-3">
                                                Study Certificate<span style="color:red">*</span>
                                            </div>
                                            <div class="col-md-4">
                                                @Html.TextBox("StudyCertificateFile", null, new { @type = "file", @multiple = "multiple" })
                                                <span id="errMsgStudyCertificateFile" style="color:red;"></span>

                                            </div>
                                        </div>
                                        <div class="row" id="divStudyCertificatesList">
                                            <div class="col-md-offset-1 col-md-10">
                                                <table id="tblStudyCertificates" hidden>
                                                    <tr>
                                                        <th>S.No.</th>
                                                        <th>Document</th>
                                                        <th></th>
                                                    </tr>
                                                    <tbody></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" value="Clear" id="btnInstitutionClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnInstitutionSave" class="btn btn-primary save" />
                                </div>
                            </div>
                        </form>
                    </div>

                    <div id="tabDeclaration" class="tab-pane">
                        <form id="formDeclaration">
                            <div class="row">
                                <div class="col-md-2 text-right">
                                    I, Sh./Smt./Kum./Dr.
                                </div>
                                <div class="col-md-2">
                                    @Html.HiddenFor(model => model.DeclarationModel.Id)
                                    @Html.TextBoxFor(model => model.DeclarationModel.Name, new { @class = "form-control ", @maxlength = "50" })
                                </div>
                                <div class="col-md-2 text-right">
                                    Son/Daughter/Wife of<span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.DeclarationModel.SonOf, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DeclarationModel.SonOf, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 text-right">
                                    aged<span style="color:red">*</span>
                                </div>
                                <div class="col-md-1">
                                    @Html.TextBoxFor(model => model.DeclarationModel.Age, new { @class = "form-control numeric" })
                                    @Html.ValidationMessageFor(model => model.DeclarationModel.Age, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    years
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2 text-right">
                                    resident of <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.DeclarationModel.ResidentOf, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DeclarationModel.ResidentOf, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3 text-right">
                                    working as (indicate designation)<span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.DeclarationModel.Designation, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DeclarationModel.Designation, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3 text-right">
                                    in (indicate name of the organization<span style="color:red">*</span>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-2 text-right">
                                    to be registered)
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.DeclarationModel.Organization, new { @class = "form-control" })
                                </div>
                                <div class="col-md-7">
                                    hereby declare that I have read and understood the prenatal Diagnostic techniques (Regulation
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    and Prevention of Miuse) Act, 1994 (57 of 1994) and Pre Natal Diagnostic Techniques (Regulation
                                    and Prevention of Miuse) Rules, 1996, I also undertake to explain the said Act and Rules to all
                                    employees of the <label id="lblSelectedFacilities"></label> in respect of which registration is sought and to ensure that act and
                                    Rules are fully compiled with.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    Date
                                </div>
                                @if (Model.DeclarationModel.Id == 0)
                                {
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.DeclarationModel.Date, new { @class = "form-control datepicker", @Value = @System.DateTime.Today.ToString("dd-MM-yyyy") })
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(model => model.DeclarationModel.Date, new { @class = "form-control datepicker", @Value = Model.DeclarationModel.Date.ToString("dd-MM-yyyy") })
                                    </div>
                                }
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.DeclarationModel.SignatureDocPath)
                                    <span style="color:red">*</span>
                                    <div>(JPEG/JPG Format Only,</div>
                                    <div>Size: 10kb - 20kb)</div>
                                </div>

                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.DeclarationModel.SignatureDocPath, new { @type = "file" })
                                    <span id="spanSignaturePath">
                                        @if (!string.IsNullOrEmpty(Model.DeclarationModel.SignatureDocPath))
                                        {
                                            var SignaturePathIndex = Model.DeclarationModel.SignatureDocPath.LastIndexOf("/");
                                            var SignaturefileName = Model.DeclarationModel.SignatureDocPath.Substring(SignaturePathIndex + 1);
                                            @Html.ActionLink(SignaturefileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.DeclarationModel.SignatureDocPath, downloadName = SignaturefileName },
                            null
                            );
                                        }

                                    </span>
                                    @Html.HiddenFor(model => Model.DeclarationModel.SignatureDocPath, new { @Id = "hfSignaturePath" })
                                    <span id="spanSignature" style="color:red"> </span>
                                </div>
                                <div class="col-md-2">
                                    <img id="imgSignature" src="@Url.Content("~/Uploads/"+ Model.DeclarationModel.SignatureDocPath)" style="height:100px;width:100px;margin-left:12px" />
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    Place<span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.DeclarationModel.Place, new { @class = "form-control" })
                                </div>
                                <div class="col-md-offset-5 col-md-4" style="text-align:center">
                                    @Html.TextBoxFor(model => model.DeclarationModel.Signature, new { @class = "form-control" })
                                    Name, Designation and Signature of the<br />
                                    person who conduct the scanning<span style="color:red">*</span>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <fieldset class="scheduler-border">
                                        <legend class="scheduler-border">Other Uploads</legend>
                                        <div class="row">
                                            <div class="col-md-1">
                                                @Html.Label("File Type", new { @class = "control-label" })
                                            </div>
                                            <div class="col-md-3">
                                                @Html.DropDownListFor(model => model.DeclarationModel.DocumentUploadModel.UploadType,
                                new List<SelectListItem> {
                                    new SelectListItem {Text = "Select Type", Value = "", Selected = true },
                                    new SelectListItem {Text = "Notary", Value = "1" },
                                    new SelectListItem {Text = "Others", Value = "2" }
                                },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                                <div id="declarationotherupload" hidden>
                                                    @Html.TextBoxFor(model => model.DeclarationModel.OtherUploadText, new { @class = "form-control", @style = "margin-top:10px;" })
                                                </div>
                                            </div>

                                            <div class="col-md-2 text-right">
                                                @Html.Label("Document", new { @class = "control-label" })
                                            </div>
                                            <div class="col-md-3">
                                                @Html.TextBoxFor(model => model.DeclarationModel.DocumentUploadModel.DocumentPath, new { @type = "file" })
                                                <span id="errMsgOtherFile" style="color:red;"></span>
                                            </div>
                                            <div class="col-md-2 text-right">
                                                <input type="button" value="Add" id="btnAddOtherUpload" class="btn btn-default" />
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-xs-12">
                                                <div class="box">
                                                    <div class="box-body table-responsive no-padding">
                                                        <table id="tblOtherUploadsPCPNDT" class="table table-hover">
                                                            <tr>
                                                                <th>S.No.</th>
                                                                <th>Type</th>
                                                                <th>Uploaded File</th>
                                                                <th></th>
                                                            </tr>
                                                            @if (Model.DeclarationModel.OtherUploadsList != null)
                                                            {
                                                                for (int i = 0; i < Model.DeclarationModel.OtherUploadsList.Count; i++)
                                                                {
                                                                    <tr>
                                                                        <td> @Convert.ToInt32(@i + 1)</td>
                                                                        <td>@Model.DeclarationModel.OtherUploadsList[i].UploadType</td>
                                                                        <td>
                                                                            @if (Model.DeclarationModel.OtherUploadsList[i].DocumentPath != null)
                                                                            {
                                                                                var addressindex = Model.DeclarationModel.OtherUploadsList[i].DocumentPath.LastIndexOf("/");
                                                                                var addressfileName = Model.DeclarationModel.OtherUploadsList[i].DocumentPath.Substring(addressindex + 1);
                                                                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.DeclarationModel.OtherUploadsList[i].DocumentPath, downloadName = addressfileName }, null);
                                                                            }
                                                                        </td>
                                                                        <td><input type='button' value='Delete' onclick='DeleteDeclarationOtherUploads(@i);' /></td>
                                                                    </tr>
                                                                }
                                                            }
                                                        </table>
                                                    </div>
                                                    <!-- /.box-body -->
                                                </div>
                                                <!-- /.box -->
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-1">
                                    Enclosures Count
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.DeclarationModel.EnclosureCnt, new { disabled = "true" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12  text-right">
                                    @*<input type="button" value="Clear" id="btnDeclarationClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnDeclarationSave" class="btn btn-primary save" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">

                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <!-- /.tab-content -->
            </div>
            <!-- nav-tabs-custom -->
        </div>
        <!-- /.col -->

    </div>
    <script>
    //$('#btnFacilitySave').on('click', function (e) {
    //    var type = [];
    //    $.each($("input.facilitytype:checkbox"), function () {
    //
    //        if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
    //            console.log("something");
    //        type.push(this.value);
    //    });
    //    console.log(type);

    //    if (type.length == 0) {
    //        alert('Please select at least one Facility');
    //        return false;
    //    }
    //});

    $('input[name="EquipmentModel.Type"]').on('ifChecked', function(event){

        if(this.value=='Old')
        {
            $('.OldType').show();
            $('.NewType').hide();
            $('.common').show();
        }

        else{
            $('.OldType').hide();
            $('.NewType').show();
            $('.common').show();
        }

    });

    $('#EstablishmentModel_DistrictId').on('change', function () {
        BindMandals('EstablishmentModel_', this.value);
    });

    $('#EstablishmentModel_MandalId').on('change', function () {
        BindVillages('EstablishmentModel_', this.value);
    });

    $('#FacilityModel_DistrictId').on('change', function () {
        BindMandals('FacilityModel_', this.value);
    });

    $('#FacilityModel_MandalId').on('change', function () {
        BindVillages('FacilityModel_', this.value);
    });

    $('#ApplicantModel_DistrictId').on('change', function () {

        BindMandals('ApplicantModel_', this.value);
    });

    $('#ApplicantModel_MandalId').on('change', function () {
        BindVillages('ApplicantModel_', this.value);
    });

    $('#ApplicantModel_ApplicantRole').on('change', function () {
        if (this.value == 'Others')
            $('.applicantroleother').show();
        else {
            $('.applicantroleother').hide();
            $('#ApplicantModel_ApplicantRoleOther').val(null);
        }

    });

    var ddlInstitutionTypeId= $('#InstitutionModel_InstitutionTypeId').val();
    console.log(ddlInstitutionTypeId);
    if(ddlInstitutionTypeId==5)
    {
        $('#institutionotherfeild').show();
    }
    var ddlOwnershipTypeId= $('#InstitutionModel_OwnershipTypeId').val();
    console.log(ddlOwnershipTypeId);
    if(ddlOwnershipTypeId==5)
    {
        $('#ownershipotherfeild').show();
    }

    $('#InstitutionModel_InstitutionTypeId').on('change', function () {

        if (this.value == 5) {
            $('#institutionotherfeild').show();
        }
        else
        {
            $('#institutionotherfeild').hide();
        }
    });

    $('#InstitutionModel_OwnershipTypeId').on('change', function () {

        if (this.value == 5) {
            $('#ownershipotherfeild').show();
        }
        else
        {
            $('#ownershipotherfeild').hide();
        }
    });
    //Declaration tab  other uploads FileType other textbox

    //$('#DeclarationModel_DocumentUploadModel_UploadType').on('change', function () {
    //
    //    if (this.value == 2) {
    //        $('#declarationotherupload').show();
    //    }
    //    else
    //    {
    //        $('#declarationotherupload').hide();
    //    }
    //});


    $('#btnApplicantSave').on('click', function (e) {
        ShowSpinner();

        e.preventDefault();

        if ($('#formApplicant').valid()) {
            //if ($('#ApplicantModel_ApplicantRole').val() == 'Others' &&
            //    ($('#ApplicantModel_ApplicantRoleOther').val() == null || $('#ApplicantModel_ApplicantRoleOther').val() == '')) {
            //    alert('Please enter Role (Other)');
            //    return false;
            //}
            if (window.FormData !== undefined) {
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var uri = '@Url.Action("SaveApplicantDetails","License", new { Area = "User" })';

                var ApplicantPhoto = $("#ApplicantModel_ApplicantPhoto").get(0).files[0];
                var PANCardPath=$("#ApplicantModel_PANCardPath").get(0).files[0];
                var AadharCardPath=$("#ApplicantModel_AadharCardPath").get(0).files[0];
                // Create FormData object
                var fileData = new FormData();

                fileData.append( 'Id', $('#ApplicantModel_Id').val() == '' ? 0 : $('#ApplicantModel_Id').val());
                fileData.append('Name',$('#ApplicantModel_Name').val());
                fileData.append('ApplicantRole', $('#ApplicantModel_ApplicantRole').val());
                fileData.append('ApplicantRoleOther', $('#ApplicantModel_ApplicantRoleOther').val());
                fileData.append('DistrictId', $('#ApplicantModel_DistrictId').val());
                fileData.append('MandalId',  $('#ApplicantModel_MandalId').val());
                fileData.append('VillageId', $('#ApplicantModel_VillageId').val());
                fileData.append('Aadhar',  $('#ApplicantModel_Aadhar').val());
                fileData.append('PAN', $('#ApplicantModel_PAN').val());
                fileData.append('HouseNumber', $('#ApplicantModel_HouseNumber').val());
                fileData.append('StreetName', $('#ApplicantModel_StreetName').val());
                fileData.append('PINCode', $('#ApplicantModel_PINCode').val());
                fileData.append('ApplicantPhoto', ApplicantPhoto);
                fileData.append('ApplicationType', applicationtype);
                fileData.append('ExistingApplicationId', existingApplicationId);

                if(PANCardPath != undefined)
                    fileData.append('PANCardPath', PANCardPath);
                if(AadharCardPath != undefined)
                    fileData.append('AadharCardPath', AadharCardPath);

                //var data = {
                //    model: {
                //        Id: $('#ApplicantModel_Id').val() == '' ? 0 : $('#ApplicantModel_Id').val(),
                //        Name: $('#ApplicantModel_Name').val(),
                //        ApplicantRole: $('#ApplicantModel_ApplicantRole').val(),
                //        ApplicantRoleOther: $('#ApplicantModel_ApplicantRoleOther').val(),
                //        DistrictId: $('#ApplicantModel_DistrictId').val(),
                //        MandalId: $('#ApplicantModel_MandalId').val(),
                //        VillageId: $('#ApplicantModel_VillageId').val(),
                //        Aadhar: $('#ApplicantModel_Aadhar').val(),
                //        PAN: $('#ApplicantModel_PAN').val(),
                //        HouseNumber: $('#ApplicantModel_HouseNumber').val(),
                //        StreetName: $('#ApplicantModel_StreetName').val(),
                //        PINCode: $('#ApplicantModel_PINCode').val(),
                //        ApplicationType: applicationtype,
                //        ExistingApplicationId: existingApplicationId

                //    }
                //};
                //    var jqxhr = $.post(url, fileData, function () { })
                //.done(function (response) {
                //    var json;
                //    if (response instanceof Object)
                //        json = response;
                //    else
                //        json = $.parseJSON(response);

                $.ajax({
                    type: "POST",
                    url: uri,
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {

                        $('#ApplicantModel_Id').val(response.ReturnData.split(',')[0]);
                        ShowModal(response);

                        if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                            $('#btnApplicantSave').val('Update');
                            $('#btnApplicantSave').removeClass('btn-success');
                            $('#btnApplicantSave').addClass('btn-primary');
                        }
                        else if(response.ReturnData.split(',')[1] == 'Completed'){
                            $('#btnApplicantSave').val('Update');
                            $('#btnApplicantSave').removeClass('btn-primary');
                            $('#btnApplicantSave').addClass('btn-success');
                        }
                        else if(response.ReturnData.split(',')[1] == 'Empty'){
                            $('#btnApplicantSave').val('Save');
                            $('#btnApplicantSave').removeClass('btn-success');
                            $('#btnApplicantSave').addClass('btn-primary');
                        }


                        // Populate Applicant details in Declaration Tab
                        $('#DeclarationModel_Name').val($('#ApplicantModel_Name').val());
                        //$('#DeclarationModel_Signature').val(response.model.Name);
                        $('#DeclarationModel_Signature').val($('#ApplicantModel_Name').val());
                        var applicantAddress = $('#ApplicantModel_HouseNumber').val() + ', ' + $('#ApplicantModel_StreetName').val() + ', ' + $("#ApplicantModel_VillageId option:selected").text()
                            + ', ' + $("#ApplicantModel_MandalId option:selected").text() + ', ' + $("#ApplicantModel_DistrictId option:selected").text() + ', ' + $('#ApplicantModel_PINCode').val();
                        $('#DeclarationModel_ResidentOf').val(applicantAddress);
                        StopSpinner();
                        // CheckforEnableSubmit();
                        BindEnclosuresCnt();
                    },
                    failure: function (response) {

                        alert('failure: ' + response.d);
                    },
                    error: function (response) {

                        alert('error: ' + response.d);
                    }

                });
            }
            else{
                alert("FormData is not supported.");

            }
        }
    });

    $('#btnEstablishmentSave').on('click', function (e) {

        e.preventDefault();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        var isFormValid = $('#formEstablishment').valid();
        if (isFormValid) {
            var uri = '@Url.Action("SaveEstablishmentDetails", "License", new { Area = "User" })';

            // Checking whether FormData is available in browser
            if (window.FormData !== undefined) {
                var addressProof = $("#EstablishmentModel_AddressProofPath").get(0).files[0];
                var buildingLayout = $("#EstablishmentModel_BuildingLayoutPath").get(0).files[0];

                // Create FormData object
                var fileData = new FormData();

                fileData.append('AddressProof', addressProof);
                fileData.append('BuildingLayout', buildingLayout);
                fileData.append('Id', $('#EstablishmentModel_Id').val() == '' ? 0 : $('#EstablishmentModel_Id').val());
                fileData.append('Name', $('#EstablishmentModel_Name').val());
                fileData.append('DistrictId', $('#EstablishmentModel_DistrictId').val());
                fileData.append('MandalId', $('#EstablishmentModel_MandalId').val());
                fileData.append('VillageId', $('#EstablishmentModel_VillageId').val());
                fileData.append('HouseNumber', $('#EstablishmentModel_HouseNumber').val());
                fileData.append('StreetName', $('#EstablishmentModel_StreetName').val());
                fileData.append('PINCode', $('#EstablishmentModel_PINCode').val());
                if(addressProof != undefined)
                    fileData.append('AddressProofPath', addressProof.name);
                if(buildingLayout != undefined)
                    fileData.append('BuildingLayoutPath', buildingLayout.name);
                fileData.append('ApplicationType',  applicationtype);

                $.ajax({
                    type: "POST",
                    url: uri,
                    cache: false,
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {
                        $('#EstablishmentModel_Id').val(response.ReturnData.split(',')[0]);
                        ShowModal(response);

                        if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                            $('#btnEstablishmentSave').val('Update');
                            $('#btnEstablishmentSave').removeClass('btn-success');
                            $('#btnEstablishmentSave').addClass('btn-primary');
                        }
                        else if(response.ReturnData.split(',')[1] == 'Completed'){
                            $('#btnEstablishmentSave').val('Update');
                            $('#btnEstablishmentSave').removeClass('btn-primary');
                            $('#btnEstablishmentSave').addClass('btn-success');
                        }
                        else if(response.ReturnData.split(',')[1] == 'Empty'){
                            $('#btnEstablishmentSave').val('Save');
                            $('#btnEstablishmentSave').removeClass('btn-success');
                            $('#btnEstablishmentSave').addClass('btn-primary');
                        }

                        //CheckforEnableSubmit();
                    },
                    failure: function (response) {
                        alert('failure: ' + response.d);
                    },
                    error: function (response) {
                        alert('error: ' + response.d);
                    }
                });

            } else {
                alert("FormData is not supported.");
            }
        }
    });

    $('#btnFacilitySave').on('click', function (e) {
       
        e.preventDefault();
        var facilities = [];
        var flag=true;
        $('#DeclarationModel_Organization').val($('#FacilityModel_Name').val());
        $.each($("input[name='facilitytype']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                facilities.push(this.value);
        });

        //if (facilities.length == 0) {
        //    alert('Please select at least one Facility');
        //    return false;
        //}
        var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        var validate=$('#formFacility').validate();
        if ($('#formFacility').valid()) {
            ShowSpinner();
            // Create FormData object
            var fileData = new FormData();
            // New Code
            // Checking whether FormData is available in browser
            if (window.FormData !== undefined) {
                var addressProof = $("#FacilityModel_AddressProofPath").get(0).files[0];
                var buildingLayout = $("#FacilityModel_BuildingLayoutPath").get(0).files[0];
                var facilityOwnership=$("#FacilityModel_OwnerShipPath").get(0).files[0];
                if(addressProof != undefined)
                {
                    if($('#FacilityModel_AddressProofType').val()==''){
                        $('#spanAddressProofType').text('Please select Address Proof Type');
                        return false;
                    }
                    else{

                    }
                    if((addressProof.size/1000) > 4096)
                    {
                        $('#errMsgAddressProof').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        fileData.append('AddressProof', addressProof);
                        fileData.append('AddressProofPath', addressProof.name);
                        $('#errMsgAddressProof').text('');
                        $('#spanAddressProofType').text('');
                    }
                }
                if(buildingLayout != undefined)
                {
                    if((buildingLayout.size/1000) > 4096)
                    {
                        $('#errMsgBuildingLayout').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        fileData.append('BuildingLayout', buildingLayout);
                        fileData.append('BuildingLayoutPath', buildingLayout.name);
                        $('#errMsgBuildingLayout').text('');
                    }

                }

                if(facilityOwnership != undefined)
                {
                    if($('#FacilityModel_OwnershipType').val()==''){
                        $('#spanOwnershipType').text('Please select Facility Ownership');
                        return false;
                    }
                    else{

                    }
                    if((facilityOwnership.size/1000) > 4096)
                    {
                        $('#errMsgOwnerShip').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        fileData.append('OwnerShip', facilityOwnership);
                        fileData.append('OwnerShipPath', facilityOwnership.name);
                        $('#errMsgOwnerShip').text('');
                        $('#spanOwnershipType').text('');
                    }
                }
                //if(buildingLayout != undefined)
                //{
                //    if((buildingLayout.size/1000) > 4096)
                //    {
                //        $('#errMsgBuildingLayout').text('Please check File size, limit to below 3.8 MB');
                //        flag=false;
                //    }
                //    else
                //    {
                //        $('#errMsgBuildingLayout').text('');
                //    }
                //}
                if(flag==false)
                {
                    return;
                }
                else
                {
                    var url = '@Url.Action("SaveFacilityDetails","License", new { Area = "User" })';

                    fileData.append('Id', $('#FacilityModel_Id').val() == '' ? 0 : $('#FacilityModel_Id').val());
                    fileData.append('Faclities', facilities.join());
                    fileData.append('Name', $('#FacilityModel_Name').val());
                    fileData.append('DistrictId', $('#FacilityModel_DistrictId').val());
                    fileData.append('MandalId', $('#FacilityModel_MandalId').val());
                    fileData.append('VillageId', $('#FacilityModel_VillageId').val());
                    fileData.append('HouseNumber', $('#FacilityModel_HouseNumber').val());
                    fileData.append('StreetName', $('#FacilityModel_StreetName').val());
                    fileData.append('PINCode', $('#FacilityModel_PINCode').val());
                    fileData.append('Phone', $('#FacilityModel_Phone').val());
                    fileData.append('Email', $('#FacilityModel_Email').val());
                    fileData.append('Fax', $('#FacilityModel_Fax').val());
                    fileData.append('Telegraph', $('#FacilityModel_Telegraph').val());
                    fileData.append('Telex', $('#FacilityModel_Telex').val());
                    fileData.append('PINCode', $('#FacilityModel_PINCode').val());
                    fileData.append('ApplicationType',  applicationtype);
                    fileData.append('ExistingApplicationId',  existingApplicationId);
                    fileData.append('AddressProofType',$('#FacilityModel_AddressProofType').val());
                    fileData.append('OwnershipType',$('#FacilityModel_OwnershipType').val());

                    $.ajax({
                        type: "POST",
                        url: url,
                        cache: false,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {
                            $('#FacilityModel_Id').val(response.ReturnData.split(',')[0]);
                            ShowModal(response);

                            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                                $('#btnFacilitySave').val('Update');
                                $('#btnFacilitySave').removeClass('btn-success');
                                $('#btnFacilitySave').addClass('btn-primary');
                            }
                            else if(response.ReturnData.split(',')[1] == 'Completed'){
                                $('#btnFacilitySave').val('Update');
                                $('#btnFacilitySave').removeClass('btn-primary');
                                $('#btnFacilitySave').addClass('btn-success');
                            }
                            else if(response.ReturnData.split(',')[1] == 'Empty'){
                                $('#btnFacilitySave').val('Save');
                                $('#btnFacilitySave').removeClass('btn-success');
                                $('#btnFacilitySave').addClass('btn-primary');
                            }

                            // Hide all the divisions
                            $('#fsInvasive').hide();
                            $('#fsNonInvasive').hide();
                            $('#fsTestsRemarks').hide();
                            $('#fsTests').hide();
                            $('#fsStudies').hide();
                            $('#fsFacilityRemarks').hide();

                            for (var i = 0; i < facilities.length; i++) {

                                ShowTestsFacilities(facilities[i]);
                            }

                            RemoveValuesfromHiddenControls();
                            // Remove Form Completed class from Tests & Facilites forms
                            $('#btnTestSave').removeClass('btn-success');
                            $('#btnTestSave').addClass('btn-primary');
                            $('#btnFacilicitesSave').removeClass('btn-success');
                            $('#btnFacilicitesSave').addClass('btn-primary');

                            //Populate details in Declaration Tab
                            $('#DeclarationModel_Organization').val($('#FacilityModel_Name').val());
                            var facilitynames = '';
                            $.each(facilities, function( index, value ) {
                                var labelControl = 'lblFacility' + value;
                                facilitynames += $('#' + labelControl).text() + ', ';
                            });
                            facilitynames = facilitynames.slice(0, -2);
                            $('#lblSelectedFacilities').text(facilitynames);

                            StopSpinner();
                            //CheckforEnableSubmit();
                            BindEnclosuresCnt();
                        },
                        failure: function (response) {
                            alert('failure: ' + response.d);
                        },
                        error: function (response) {
                            alert('error: ' + response.d);
                        }
                    });
                }
            }

            else{
                alert("FormData is not supported.");
            }

        }
    });

    function ShowTestsFacilities(facilityId){

        switch (facilityId) {
            case '1':   //Generic Counselling Center
            case '6':   //Assisted Reproductive Technology (ART)
                {
                    if(facilityId){
                        $('#fsTestsRemarks').show();
                        $('#fsFacilityRemarks').show();
                    }
                    else{
                        $('#fsTestsRemarks').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '2':   //Ultra Sound Clinic
            case '3':   //Imaging Center
                {
                    if(facilityId){
                        $('#fsNonInvasive').show();
                        $('#fsFacilityRemarks').show();
                    }
                    else{
                        $('#fsNonInvasive').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '4':   //Genetic Clinic
            case '5':   //Generic Laboratory
                {
                    if(facilityId){
                        $('#fsInvasive').show();
                        $('#fsNonInvasive').show();
                        $('#fsTests').show();
                        $('#fsStudies').show();
                    }
                    else{
                        $('#fsInvasive').hide();
                        $('#fsNonInvasive').hide();
                        $('#fsTests').hide();
                        $('#fsStudies').hide();
                    }
                }
                break;
            default:

        }
    }
    function RemoveValuesfromHiddenControls(){
        if ($('#fsInvasive').css('display') == 'none') {
            $.each($("input[name='testinvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsNonInvasive').css('display') == 'none') {
            $.each($("input[name='testnoninvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsTestsRemarks').css('display') == 'none') {
            $('#TestsModel_Remarks').val('');
        }

        if ($('#fsTests').css('display') == 'none') {
            $.each($("input[name='facilitytest']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsStudies').css('display') == 'none') {
            $.each($("input[name='facilitystudies']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsFacilityRemarks').css('display') == 'none') {
            $('#FacilitiesModel_Remarks').val('');
        }
    }

    $('#btnTestSave').on('click', function (e) {
        ShowSpinner();
        e.preventDefault();
        var invaive = [];
        $.each($("input[name='testinvasive']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                invaive.push(this.value);
        });

        //if (invaive.length == 0) {
        //    alert('Please select at least one Invasive Test');
        //    return false;
        //}

        var noninvaive = [];
        $.each($("input[name='testnoninvasive']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                noninvaive.push(this.value);
        });

        //if (noninvaive.length == 0) {
        //    alert('Please select at least one Non-Invasive Test');
        //    return false;
        //}
        var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        if ($('#formTests').valid()) {

            var url = '@Url.Action("SaveTests","License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#TestsModel_Id').val() == '' ? 0 : $('#TestsModel_Id').val(),
                    InvasiveTests: invaive.join(),
                    NonInvasiveTests: noninvaive.join(),
                    Remarks: $('#TestsModel_Remarks').val(),
                    ApplicationType: applicationtype,
                    ExistingApplicationId: existingApplicationId
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#TestsModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnTestSave').val('Update');
                $('#btnTestSave').removeClass('btn-success');
                $('#btnTestSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnTestSave').val('Update');
                $('#btnTestSave').removeClass('btn-primary');
                $('#btnTestSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnTestSave').val('Save');
                $('#btnTestSave').removeClass('btn-success');
                $('#btnTestSave').addClass('btn-primary');
            }
            StopSpinner();
            //CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Facility Request Failed: " + err);
    });
        }
    });

    $("[id$='EquipmentType']").on('ifToggled', function (event) {

        if (this.checked)
        {
            $('#formEquipment').show();
        }
        else{
            $('#formEquipment').hide();
        }

    });
    $('#btnAddEquipment').on('click', function (e) {
        e.preventDefault();
        var flag=true;
        var InvoiceFile=$('#EquipmentModel_InvoicePath').get(0).files[0];
        var NOCFile=$('#EquipmentModel_NocFilePath').get(0).files[0];
        var TransferCerticate=$('#EquipmentModel_TransferCertificatePath').get(0).files[0];
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        if ($('#formEquipment').valid()) {
            var type=$("input:radio[name='EquipmentModel.Type']:checked").val()
            if(type=="Old")
            {
                if($('#EquipmentModel_SerialNumber').val()=='')
                {
                    alert("Please Enter Serial Number");
                    return;
                }
                if(TransferCerticate==undefined){
                    $('#errMsgPCPNDTTCUpload').text('Please Select Transfer Certificate');
                    return;
                }
                if(NOCFile==undefined){
                    $('#errMsgPCPNDTNOCUpload').text('Please Select NOC File');
                    return;
                }

            }
            else{
                if(InvoiceFile==undefined){
                    $('#errMsgPCPNDTInvoiceUpload').text('Please Select Invoice File');
                    return;
                }
            }
            var uri = '@Url.Action("AddEquipment","License", new { Area = "User" })';

            if (window.FormData !== undefined) {
                //var uploadedFile = $("#EquipmentModel_UploadedFilePath").get(0).files[0];

                // File Upload size Upto 4 MB
                if(NOCFile !=undefined)
                {
                    if((NOCFile.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTNOCUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTNOCUpload').text('');
                    }

                }
                if(TransferCerticate !=undefined)
                {
                    if((TransferCerticate.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTTCUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTTCUpload').text('');
                    }

                }

                if(InvoiceFile !=undefined)
                {
                    if((InvoiceFile.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTInvoiceUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTInvoiceUpload').text('');
                    }

                }

                if(flag==false){
                    return;
                }
                else{
                    // Create FormData object
                    var fileData = new FormData();
                    fileData.append('Index','-1');
                    fileData.append('Id', $('#EquipmentModel_Id').val() == '' ? 0 : $('#EquipmentModel_Id').val());
                    fileData.append('Name', $('#EquipmentModel_Name').val().toUpperCase());
                    fileData.append('SerialNumber', $('#EquipmentModel_SerialNumber').val());
                    fileData.append('MachineModel', $('#EquipmentModel_MachineModel').val());
                    fileData.append('Make', $('#EquipmentModel_Make').val());
                    fileData.append('Type', $("input:radio[name='EquipmentModel.Type']:checked").val());
                    //fileData.append('UploadedFilePath', uploadedFile.name);
                    //fileData.append('UploadedFile', uploadedFile);
                    fileData.append('NocFile',NOCFile);
                    fileData.append('TransferCertificate',TransferCerticate);
                    fileData.append('ApplicationType',  applicationtype);
                    //fileData.append('InstallationFile',InstallationFile);
                    //fileData.append('Image',Image);
                    fileData.append('InvoiceFile',InvoiceFile);
                    $.ajax({
                        type: "POST",
                        url: uri,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {
                            // Clear controls
                            $('#EquipmentModel_Name').val('');
                            $('#EquipmentModel_SerialNumber').val('');
                            $('#EquipmentModel_MachineModel').val('');
                            $('#EquipmentModel_Make').val('');
                            //$('#EquipmentModel_Type').val('');
                            $('input:radio[name="EquipmentModel.Type"]:checked').iCheck('uncheck');
                            //$('#EquipmentModel_UploadedFilePath').val('');
                            $('#EquipmentModel_NocFilePath').val('');
                            $('#EquipmentModel_TransferCertificatePath').val('');
                            $('#EquipmentModel_InvoicePath').val('');
                            $('.OldType').hide();
                            $('.NewType').hide();
                            $('.common').hide();
                            $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();

                            var json = response;

                            var tr;
                            //Append each row to html table
                            for (var i = 0; i < json.length; i++) {
                                tr = $('<tr/>');
                                tr.append("<td>" + (i + 1) + "</td>");
                                tr.append("<td>" + json[i].Name.toUpperCase() + "</td>");
                                tr.append("<td>" + json[i].SerialNumber + "</td>");
                                tr.append("<td>" + json[i].MachineModel + "</td>");
                                tr.append("<td>" + json[i].Make + "</td>");
                                tr.append("<td>" + json[i].Type + "</td>");
                                 
                                var Invoice = json[i].InvoicePath;
                                if(Invoice!=null && Invoice!=''){
                                    var index = Invoice.indexOf("/");
                                    console.log("Invoice :"+ Invoice + " index " + index);
                                    var displayFileName = Invoice.substring(index + 1, Invoice.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", Invoice);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }
                                var path = json[i].NocFilePath;
                                if(path!=null && path!=''){
                                    var index = path.indexOf("/");
                                    var displayFileName = path.substring(index + 1, path.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].NocFilePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }

                                //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                                var TransferCertificate = json[i].TransferCertificatePath;
                                console.log("TC :"+TransferCerticate);
                                if(TransferCertificate!=null && TransferCertificate!=''){
                                    var index = TransferCertificate.indexOf("/");
                                    var displayFileName = TransferCertificate.substring(index + 1, TransferCertificate.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].TransferCertificatePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");

                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }



                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");

                                $('#tblEquiments').append(tr);
                            }
                        },
                        failure: function (response) {
                            // alert('failure: ' + response.d);
                        },
                        error: function (response) {
                            ///  alert('error: ' + response.d);
                        }
                    });
                }
            }
        } else {
            // alert("FormData is not supported.");
        }

    });

    function DeleteEquipment(index) {

        if (confirm('Do you really want to delete this equipment?')) {
            var url = '@Url.Action("DeleteEquipment","License", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name.toUpperCase() + "</td>");
                tr.append("<td>" + json[i].SerialNumber + "</td>");
                tr.append("<td>" + json[i].MachineModel + "</td>");
                tr.append("<td>" + json[i].Make + "</td>");
                tr.append("<td>" + json[i].Type + "</td>");

                 var Invoice = json[i].InvoicePath;
                 if(Invoice!=null && Invoice!=''){
                                    var index = Invoice.indexOf("/");
                                    console.log("Invoice :"+ Invoice + " index " + index);
                                    var displayFileName = Invoice.substring(index + 1, Invoice.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].Invoice);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }
                                var path = json[i].NocFilePath;
                                if(path!=null && path != ''){
                                    var index = path.indexOf("/");
                                    var displayFileName = path.substring(index + 1, path.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].NocFilePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }

                                //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                                var TransferCertificate = json[i].TransferCertificatePath;
                                if(TransferCertificate!=null && TransferCertificate!=''){
                                    var index = TransferCertificate.indexOf("/");
                                    var displayFileName = TransferCertificate.substring(index + 1, TransferCertificate.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].TransferCertificatePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");

                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }


                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");


                $('#tblEquiments').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnTestSave').val('Save');
            $('#btnTestSave').removeClass('btn-success');
            $('#btnTestSave').addClass('btn-primary');
        }
        // CheckforEnableSubmit();
    }
    )
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Equipment Request Failed: " + err);
});
        }
    }

    $('#btnEquipmentSave').on('click', function (e) {
        e.preventDefault();
        var rowCount = $('#tblEquiments tr').length;
        if(rowCount==1)
            alert('Please add atleasat 1 Equipment to the list');
        else
        {
            var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
            var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
            var data = {
                ApplicationType : applicationtype,
                ExistingApplicationId: existingApplicationId
            };
            var url = '@Url.Action("SaveEquipments", "License", new { Area = "User" })';
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            ShowModal(response);
            var transactionId = response.ReturnData.split(',')[0];
            BindEquipmentsOnSave(transactionId);

            //if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
            //    $('#btnEquipmentSave').val('Update');
            //    $('#btnEquipmentSave').removeClass('btn-success');
            //    $('#btnEquipmentSave').addClass('btn-primary');
            //}
            //else if(response.ReturnData.split(',')[1] == 'Completed'){
            //    $('#btnEquipmentSave').val('Update');
            //    $('#btnEquipmentSave').removeClass('btn-primary');
            //    $('#btnEquipmentSave').addClass('btn-success');
            //}


            // CheckforEnableSubmit();
            BindEnclosuresCnt();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("SaveEquipments Request Failed: " + err);
    });
        }
    });

    function BindEquipmentsOnSave(transactionId){
        var url = '@Url.Action("GetEquipments", "License", new { Area = "User" })';
        var data = {transactionId : transactionId};
        var jqxhr = $.post(url, data, function () { }, "json")
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();

        if (json != undefined && json.length != 0) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name.toUpperCase() + "</td>");
                tr.append("<td>" + json[i].SerialNumber + "</td>");
                tr.append("<td>" + json[i].MachineModel + "</td>");
                tr.append("<td>" + json[i].Make + "</td>");
                tr.append("<td>" + json[i].Type + "</td>");

                var Invoice = json[i].InvoicePath;
                if(Invoice!=null && Invoice!=''){
                                    var index = Invoice.indexOf("/");
                                    console.log("Invoice :"+ Invoice + " index " + index);
                                    var displayFileName = Invoice.substring(index + 1, Invoice.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].Invoice);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }
                                var path = json[i].NocFilePath;
                                if(path!=null && path!=''){
                                    var index = path.indexOf("/");
                                    var displayFileName = path.substring(index + 1, path.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].NocFilePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }

                                //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                                var TransferCertificate = json[i].TransferCertificatePath;
                                if(TransferCertificate!=null && TransferCertificate!=''){
                                    var index = TransferCertificate.indexOf("/");
                                    var displayFileName = TransferCertificate.substring(index + 1, TransferCertificate.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].TransferCertificatePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");

                                }
                                else{
                                    tr.append("<td>NA</td>");
                                }




                $('#tblEquiments').append(tr);
            }

            $('#btnEquipmentSave').val('Update');
            $('#btnEquipmentSave').removeClass('btn-primary');
            $('#btnEquipmentSave').addClass('btn-success');
        }
        else if(json == undefined || json.length == 0){
            $('#btnEquipmentSave').val('Save');
            $('#btnEquipmentSave').removeClass('btn-success');
            $('#btnEquipmentSave').addClass('btn-primary');
        }
    })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("GetEquipments Request Failed: " + err);
        });

    }

    $('#btnFacilicitesSave').on('click', function (e) {
        ShowSpinner();
        e.preventDefault();
        var tests = []; var studies = [];
        $.each($("input[name='facilitytest']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                tests.push(this.value);
        });
        var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        //if (tests.length == 0) {
        //    alert('Please select at least one Test');
        //    return false;
        //}

        $.each($("input[name='facilitystudies']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                studies.push(this.value);
        });

        //if (studies.length == 0) {
        //    alert('Please select at least one Study');
        //    return false;
        //}

        if ($('#formFacilities').valid()) {

            var url = '@Url.Action("SaveFacilities", "License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#FacilitiesModel_Id').val() == '' ? 0 : $('#FacilitiesModel_Id').val(),
                    Tests: tests.join(),
                    Studies: studies.join(),
                    Remarks: $('#FacilitiesModel_Remarks').val(),
                    ApplicationType : applicationtype,
                    ExistingApplicationId: existingApplicationId
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#FacilitiesModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnFacilicitesSave').val('Update');
                $('#btnFacilicitesSave').removeClass('btn-success');
                $('#btnFacilicitesSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnFacilicitesSave').val('Update');
                $('#btnFacilicitesSave').removeClass('btn-primary');
                $('#btnFacilicitesSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnFacilicitesSave').val('Save');
                $('#btnFacilicitesSave').removeClass('btn-success');
                $('#btnFacilicitesSave').addClass('btn-primary');
            }
            StopSpinner();
            //CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Facilities Request Failed: " + err);
    });
        }
    });

    $("[id$='EmployeeType']").on('ifToggled', function (event) {

        if (this.checked)
        {
            $('#formEmployee').show();
        }
        else{
            $('#formEmployee').hide();
        }

    });

    $('#EmployeeModel_DesignationId').on('change', function(){
        $('.subdesignation').hide();
        $('.subdesignation-sonologist').hide();

        if(this.value != ''){
            var employeeDesignationId = this.value;
            $('#ddlUploadFileType').empty();
            $('#ddlUploadFileType').append($("<option></option>").val('').html('Select File Type'));

            // Bind default values      - Aadhar, PAN, Photo, Sign
            $('#ddlUploadFileType').append($("<option></option>").val('Aadhar').html('Aadhar'));
            $('#ddlUploadFileType').append($("<option></option>").val('PAN').html('PAN'));
            $('#ddlUploadFileType').append($("<option></option>").val('Photo').html('Photo'));
            $('#ddlUploadFileType').append($("<option></option>").val('Sign').html('Sign'));

            var designationId = this.value;
            if(designationId == 1 || designationId == 4){
                // Gynecologist/Radiologist
                $('#ddlUploadFileType').append($("<option></option>").val('APMCR / TSMCR').html('APMCR / TSMCR'));
                $('#ddlUploadFileType').append($("<option></option>").val('Test Certificate').html('Test Certificate'));
            }
            else if(designationId == 11){
                // Supporting Staff
                $('#ddlUploadFileType').append($("<option></option>").val('TS ParaCapstone Board Certificate').html('TS ParaCapstone Board Certificate'));
            }
            else{
                // Others
                $('#ddlUploadFileType').append($("<option></option>").val('Registration Certificate').html('Registration Certificate'));
            }

            // Show/Hide Sub Designations
            if(designationId == 1 || designationId == 4){
                // Gynaecologist or Radiologist
                $('#ddlSubDesignation').val('Select');
                $('.subdesignation').show();
            }
            else if(designationId == 6){
                // Sonologist
                $('.subdesignation-sonologist').show();
            }

            $('#ddlSubDesignation').empty();
            $('#ddlSubDesignation').append($("<option></option>").val('Select').html('Select'));

            // Bind Sub Designations
            if(designationId == 1){
                // Gynaecologist
                $('#ddlSubDesignation').append($("<option></option>").val('MBBS, DGO.').html('MBBS, DGO.'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD, DGO.').html('MD, DGO.'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD (OBG).').html('MD (OBG).'));
                $('#ddlSubDesignation').append($("<option></option>").val('MS (OBG).').html('MS (OBG).'));
                $('#ddlSubDesignation').append($("<option></option>").val('DNB (OBG).').html('DNB (OBG).'));
            }
            else if(designationId == 4){
                // Radiologist
                $('#ddlSubDesignation').append($("<option></option>").val('MBBS, DMRD.').html('MBBS, DMRD.'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD (Radio diagnosis).').html('MD (Radio diagnosis).'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD, DMRD.').html('MD, DMRD.'));
                $('#ddlSubDesignation').append($("<option></option>").val('DNB (Radio diagnosis).').html('DNB (Radio diagnosis).'));
            }

        }
        else{
            // Bind Defaults    - Aadhar, PAN, Photo, Sign
            $('#ddlUploadFileType').append($("<option></option>").val('Aadhar').html('Aadhar'));
            $('#ddlUploadFileType').append($("<option></option>").val('PAN').html('PAN'));
            $('#ddlUploadFileType').append($("<option></option>").val('Photo').html('Photo'));
            $('#ddlUploadFileType').append($("<option></option>").val('Sign').html('Sign'));
        }

        // Clear existing Employee uploads
        var url = '@Url.Action("ClearEmployeeUploads", "License", new { Area = "User" })';
        var jqxhr = $.post(url, function () { })
        .done(function (response) {
            $('#divEmployeeUploads').hide();

            var arrFileTypes = ['Aadhar', 'PAN', 'Photo', 'Sign'];
            if(employeeDesignationId == 1 || employeeDesignationId == 4){
                // Gynecologist/Radiologist
                arrFileTypes.push('APMCR / TSMCR');
                arrFileTypes.push('Test Certificate');
            }
            else if(employeeDesignationId == 11){
                // Supporting Staff
                arrFileTypes.push('TS ParaCapstone Board Certificate');
            }
            else if(employeeDesignationId != '') {
                // Others
                arrFileTypes.push('Registration Certificate');
            }

            // Bind File Type dropdown
            $('#ddlUploadFileType').empty();
            $('#ddlUploadFileType').append($("<option/>").val('').text('Select File Type'));
            $.each(arrFileTypes, function (key, value) {
                $('#ddlUploadFileType').append($("<option/>").val(value).text(value));
            });
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("ClearEmployeeUploads Request Failed: " + err);
    });
    });

    $('#ddlUploadFileType').on('change', function(e){
        $('#txtEmployeeUpload').val('');
    });

    $('#btnEmployeeUpload').on('click', function(e){
        e.preventDefault();
        var uploadedFile = $("#txtEmployeeUpload").get(0).files[0];
        var employeeDesignationId = $('#EmployeeModel_DesignationId').val();
        var fileType = $('#ddlUploadFileType').val();

        if(employeeDesignationId == ''){
            alert('Please select Employee designation');
            return;
        }
        if(fileType == ''){
            alert('Please select File Type');
            return;
        }
        if(uploadedFile == undefined){
            alert('Please upload a file');
            return;
        }

        var fileExtension = uploadedFile.name.split('.').pop();
        if(fileType == 'Photo' || fileType == 'Sign'){
            if(fileExtension.toLowerCase() != "jpeg" && fileExtension.toLowerCase() != "jpg"){
                alert('Please upload only JPEG or JPG files');
                return;
            }
            else{
                var fileSize = uploadedFile.size;
                if(fileSize/1024 > 20 || fileSize/1024 < 10){
                    alert('Size of image should be 10 KB - 20 KB');
                    return;
                }
            }
        }
        else{
            if(fileExtension.toLowerCase() != "pdf"){
                alert('Please upload only PDF files');
                return;
            }
        }

        var url = '@Url.Action("UploadEmployeeDocument", "License", new { Area = "User" })';
        var fileData = new FormData();
        fileData.append('Id', $('#EmployeeModel_Id').val() == '' ? 0 : $('#EmployeeModel_Id').val());
        fileData.append('uploadedFile', uploadedFile);
        fileData.append('fileType', fileType);

        $.ajax({
            type: "POST",
            url: url,
            data: fileData,
            contentType: false,
            processData: false,
            async: true,
            success: function (response) {
                // Bind doc uploads
                BindEmployeeUploads(response.DocumentsList);
                BindEmployeeUploadDocFileTypes(employeeDesignationId, response.DocumentsList);

                // Clear Controls
                $('#ddlUploadFileType').val('');
                $("#txtEmployeeUpload").val('');

            },
            failure: function (response) {
                console.log('failure: ' + response.d);
            },
            error: function (response) {
                console.log('error: ' + response.d);
            }
        });
    });

    function DeleteEmployeeUpload(index){
        var confirmation = confirm('Are you sure to delete?');
        if(confirmation){
            var url = '@Url.Action("DeleteEmployeeUpload", "License", new { Area = "User" })';
            var data = { index : index };
            var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var employeeDesignationId = $('#EmployeeModel_DesignationId').val();
                BindEmployeeUploadDocFileTypes(employeeDesignationId, response);
                BindEmployeeUploads(response);
            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("DeleteEmployeeUpload Request Failed: " + err);
        });
        }
    }

    function BindEmployeeUploads(json){
        $('#tblEmployeeUploads tr').not(function () { return !!$(this).has('th').length; }).remove();

        if(json.length > 0){
            $('#divEmployeeUploads').show();
            for (var i = 0; i < json.length; i++) {
                var arrFileName = json[i].DocumentPath.split('/');
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append('<td>' + json[i].UploadType);
                tr.append('<td>' + arrFileName[1]);
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployeeUpload(" + i + ");'/></td>");
                $('#tblEmployeeUploads').append(tr);
            }
        }
        else{
            $('#divEmployeeUploads').hide();
        }
    }

    function BindEmployeeUploadDocFileTypes(employeeDesignationId, uploadedFilesJson){
        var arrFileTypes = ['Aadhar', 'PAN', 'Photo', 'Sign'];
        if(employeeDesignationId == 1 || employeeDesignationId == 4){
            // Gynecologist/Radiologist
            arrFileTypes.push('APMCR / TSMCR');
            arrFileTypes.push('Test Certificate');
        }
        else if(employeeDesignationId == 11){
            // Supporting Staff
            arrFileTypes.push('TS ParaCapstone Board Certificate');
        }
        else if(employeeDesignationId != '') {
            // Others
            arrFileTypes.push('Registration Certificate');
        }

        // Removing uploaded File Types
        for (var i = 0; i < uploadedFilesJson.length; i++) {
            arrFileTypes = jQuery.grep(arrFileTypes, function (value) {
                return value != uploadedFilesJson[i].UploadType;
            });
        }

        // Bind File Type dropdown
        $('#ddlUploadFileType').empty();
        $('#ddlUploadFileType').append($("<option/>").val('').text('Select File Type'));
        $.each(arrFileTypes, function (key, value) {
            $('#ddlUploadFileType').append($("<option/>").val(value).text(value));
        });
    }

    $('#btnAddEmployee').on('click', function (e) {
        e.preventDefault();
        var flag=true;
        var validate=$('#formEmployee').validate();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        if ($('#formEmployee').valid()) {
            var SubDesignation = $('#ddlSubDesignation').val();
            var DesignationId = $('#EmployeeModel_DesignationId').val();
            if((DesignationId == 1 || DesignationId == 4) && SubDesignation == 'Select'){
                alert('Please Select Sub Designation');
                return;
            }

            var employeeDocFileTypesCount = $('#ddlUploadFileType option').length;
            if(employeeDocFileTypesCount > 1)
            {
                alert('Please upload all type of documents');
                return;
            }

            var uri = '@Url.Action("AddEmployee","License", new { Area = "User" })';

            if (window.FormData !== undefined) {
                //// File upload size upto 4 MB
                //if(educationCertificates !=undefined)
                //{
                //    if((uploadedFile.size/1000) > 4096)
                //    {
                //        $('#errMsgPCPNDTEmployeeUpload').text('Please check File size, limit to below 3.8 MB');
                //        flag=false;
                //    }
                //    else
                //    {
                //        $('#errMsgPCPNDTEmployeeUpload').text('');
                //    }
                //}



                var educationCertificates = $("#txtEmployeeEducationCertificates").get(0).files;
                if(educationCertificates == undefined)
                {
                    alert('Please upload Education Certificates');
                    return;
                }
                else
                {
                    // Check for Uploads Format
                    for (var i = 0; i < educationCertificates.length; i++) {
                        var extension =  educationCertificates[i].name.split('.').pop();
                        if(extension != "pdf"){
                            alert('Please upload only PDF documents (Education Certificates)');
                            return;
                        }
                    }


                    // Create FormData object
                    var fileData = new FormData();
                    fileData.append('Id', $('#EmployeeModel_Id').val() == '' ? 0 : $('#EmployeeModel_Id').val());
                    fileData.append('Name', $('#EmployeeModel_Name').val());
                    fileData.append('DesignationId', DesignationId);
                    fileData.append('SubDesignation', SubDesignation=='Select'?'None':SubDesignation);
                    fileData.append('DesignationName', $("#EmployeeModel_DesignationId option:selected").text());
                    fileData.append('RegistrationNumber', $('#EmployeeModel_RegistrationNumber').val());
                    fileData.append('ExpYears', $('#EmployeeModel_ExpYears').val());
                    fileData.append('ExpMonths', $('#EmployeeModel_ExpMonths').val());
                    fileData.append('ExpDays', $('#EmployeeModel_ExpDays').val());
                    fileData.append('Type', $('#EmployeeModel_Type').val());
                    fileData.append('ApplicationType',  applicationtype);

                    for (var i = 0; i < educationCertificates.length; i++) {
                        fileData.append('educationCertificates', educationCertificates[i]);
                    }

                    $.ajax({
                        type: "POST",
                        url: uri,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {

                            // Clear controls
                            $('#EmployeeModel_Name').val('');
                            $('#EmployeeModel_DesignationId').val('').trigger('change');
                            $('#EmployeeModel_Experience').val('');
                            $('#EmployeeModel_RegistrationNumber').val('');
                            $('#EmployeeModel_UploadedFilePath').val('');
                            $('#EmployeeModel_ExpYears').val('');
                            $('#EmployeeModel_ExpMonths').val('');
                            $('#EmployeeModel_ExpDays').val('');
                            $('#EmployeeModel_Type').val('').trigger('change');
                            $('#ddlSubDesignation').val('Select');
                            $('#txtEmployeeEducationCertificates').val('');
                            $('.subdesignation').hide();

                            $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();

                            var json = response;

                            var tr;
                            //Append each row to html table
                            for (var i = 0; i < json.length; i++) {
                                tr = $('<tr/>');
                                var name = json[i].Name.toUpperCase();
                                if(json[i].SubDesignation != 'None' && json[i].SubDesignation != null)
                                    name = json[i].Name.toUpperCase() + ', ' + json[i].SubDesignation;

                                tr.append("<td>" + (i + 1) + "</td>");
                                tr.append("<td>" + name + "</td>");
                                tr.append("<td>" + json[i].DesignationName + "</td>");
                                tr.append("<td>" + json[i].ExpYears + " Years, " + json[i].ExpMonths + " Months, " + json[i].ExpDays + " Days</td>");
                                tr.append("<td>" + json[i].RegistrationNumber + "</td>");
                                tr.append("<td><input type='button' value='View Uploads' onclick='ViewEmployeeUploads(" + i + ");'/></td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");

                                $('#tblEmployees').append(tr);
                            }

                            // CheckforEnableSubmit();
                        },
                        failure: function (response) {
                            //alert('failure: ' + response.d);
                        },
                        error: function (response) {
                            ///  alert('error: ' + response.d);
                        }
                    });
                }
            }
        }else {
            // alert("FormData is not supported.");
        }

    });

    $('#EmployeeModel_RegistrationNumber').on('blur', function(e){
        CheckforEmployeeRegistration(this.value);
    });

    function CheckforEmployeeRegistration(registrationNumber){
        var url = '@Url.Action("CheckforEmployeeRegistration", "License", new { Area = "User" })';
        var data = { registrationNumber: registrationNumber };
        var jqxhr = $.post(url, data, function () { })
.done(function (response) {
    var json;
    if (response instanceof Object)
        json = response;
    else
        json = $.parseJSON(response);
    if(json.EmployeeRegistrations >= 2){
        $('#btnAddEmployee').attr("disabled", "disabled");
        alert('An employee with same Registration Number already registered twice. \nYou can not register more than twice.');
    }
    else{
        $('#btnAddEmployee').removeAttr("disabled");
    }
})
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("CheckforEmployeeRegistration Request Failed: " + err);
});
    }

    function ViewEmployeeUploads(index){
        var url = '@Url.Action("GetEmployeeUploads", "License", new { Area = "User" })';
        var data = { index: index };
        var jqxhr = $.post(url, data, function () { })
.done(function (response) {
    var json;
    if (response instanceof Object)
        json = response;
    else
        json = $.parseJSON(response);

    ShowEmployeeUploads(json);
})
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("GetEmployeeUploads Request Failed: " + err);
});
    }

    function DeleteEmployee(index) {
        if (confirm('Do you really want to delete this Employee?')) {
            var url = '@Url.Action("DeleteEmployee","License", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                var name = json[i].Name.toUpperCase();
                if(json[i].SubDesignation != 'Select' && json[i].SubDesignation != null)
                    name = json[i].Name.toUpperCase() + ', ' + json[i].SubDesignation;

                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + name + "</td>");
                tr.append("<td>" + json[i].DesignationName + "</td>");
                tr.append("<td>" + json[i].ExpYears + " Years, " + json[i].ExpMonths + " Months, " + json[i].ExpDays + " Days</td>");

                tr.append("<td>" + json[i].RegistrationNumber + "</td>");

                tr.append("<td><input type='button' value='View Uploads' onclick='ViewEmployeeUploads(" + i + ");'/></td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");

                $('#tblEmployees').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }

        // CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Employee Request Failed: " + err);
});
        }
    }


        $('#btnEmployeeSave').on('click', function (e) {
            ShowSpinner();
        e.preventDefault();
        var rowCount = $('#tblEmployees tr').length;
        if(rowCount==1)
            alert('Please add atleasat 1 Employee to the list');
        else
        {
            var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
            var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
            var data = {
                ApplicationType : applicationtype,
                ExistingApplicationId: existingApplicationId
            };
            var url = '@Url.Action("SaveEmployees", "License", new { Area = "User" })';
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            ShowModal(response);
            var transactionId = response.ReturnData.split(',')[0];
            BindEmployeesOnSave(transactionId);
            StopSpinner();
            // CheckforEnableSubmit();
            BindEnclosuresCnt();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("SaveEmployees Request Failed: " + err);
    });
        }
    });

    function BindEmployeesOnSave(transactionId){
        var url = '@Url.Action("GetEmployees", "License", new { Area = "User" })';
        var data = {transactionId : transactionId};
        var jqxhr = $.post(url, data, function () { }, "json")
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined && json.length != 0) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                var name = json[i].Name.toUpperCase();
                if(json[i].SubDesignation != 'Select' && json[i].SubDesignation != null)
                    name = json[i].Name.toUpperCase() + ', ' + json[i].SubDesignation;

                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + name + "</td>");
                tr.append("<td>" + json[i].DesignationName + "</td>");
                tr.append("<td>" + json[i].ExpYears + " Years, " + json[i].ExpMonths + " Months, " + json[i].ExpDays + " Days</td>");
                tr.append("<td>" + json[i].RegistrationNumber + "</td>");

                @*var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");*@

                tr.append("<td><input type='button' value='View Uploads' onclick='ViewEmployeeUploads(" + i + ");'/></td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");

                $('#tblEmployees').append(tr);
            }

            $('#btnEmployeeSave').val('Update');
            $('#btnEmployeeSave').removeClass('btn-primary');
            $('#btnEmployeeSave').addClass('btn-success');
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }
    })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("GetEquipments Request Failed: " + err);
        });

    }

    $('#InstitutionModel_OwnershipTypeId').on('change', function(){

        ShowHideOwnershipUploads(this.value);
    });

    function ShowHideOwnershipUploads(value){
        if(value != ''){
             
            $('#divOwnershipUploads').show();
            switch (value) {
                case '1':
                case 1:
                    {
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').hide();
                    }
                    break;
                case '2':
                case '3':
                case '5':
                case 2:
                case 3:
                case 5:{
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').show();
                    $('#spanArticlesofAssociation').text('Articles of Association');
                }
                    break;
                case '4':{
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').show();
                    $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
                }
                default:

            }
        }
        else{
            $('#divOwnershipUploads').hide();
        }
    }

    $('#btnInstitutionSave').on('click', function(e){

        ShowSpinner();
        e.preventDefault();


        var ownership = $('#InstitutionModel_OwnershipTypeId').val();
        var institution = $('#InstitutionModel_InstitutionTypeId').val();
        var totalworkarea = $('#InstitutionModel_TotalWorkArea').val();

        if(ownership == '' && institution == '' && totalworkarea == '')
        {
            alert("Please fill the form at least partially");
            StopSpinner();
            return false;
           
        }
        var url = '@Url.Action("SaveInstitution", "License", new { Area = "User" })';
        var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        if (window.FormData !== undefined) {
          
            // Create FormData object
            var fileData = new FormData();
            var ownershipId = $('#InstitutionModel_OwnershipTypeId').val();
            fileData.append('Id', $('#InstitutionModel_Id').val() == '' ? 0 : $('#InstitutionModel_Id').val());
            fileData.append('OwnershipTypeId', ownershipId);
            fileData.append('InstitutionTypeId', $('#InstitutionModel_InstitutionTypeId').val());
            fileData.append('TotalWorkArea', $('#InstitutionModel_TotalWorkArea').val());
            fileData.append('OwnershipOthers', $('#InstitutionModel_OwnershipOthers').val());
            fileData.append('InstitutionOthers', $('#InstitutionModel_InstitutionOthers').val());
            fileData.append('ApplicationType',  applicationtype);
            fileData.append('ExistingApplicationId',  existingApplicationId);

            if(ownershipId != ''){

                var InstitutionModel = @Html.Raw(Json.Encode(Model.InstitutionModel));
                var ModelStudyCertificates = @Html.Raw(Json.Encode(Model.InstitutionModel.StudyCertificateDocPaths));
                switch (ownershipId) {
                    case '1':
                        {
                            var affidavitFile = $('#affidavitFile').get(0).files[0];
                            var StudyCertificateFiles = $("#StudyCertificateFile").get(0).files;

                            fileData.append("affidavitFile", affidavitFile);
                            for (var i = 0; i < StudyCertificateFiles.length; i++) {
                                fileData.append("studyCertificateFiles", StudyCertificateFiles[i]);
                            }




                            if((affidavitFile == undefined && InstitutionModel.AffidavitDocPath == undefined)
                                || (StudyCertificateFiles.length == 0 && (ModelStudyCertificates == null || ModelStudyCertificates.length == 0))){
                                alert('Please upload required files');
                                StopSpinner();
                                return false;
                               

                            }
                        }

                        break;
                    case '2':
                    case '3':
                    case '4':
                    case '5':{
                        var affidavitFile = $('#affidavitFile').get(0).files[0];
                        var articleFile = $('#articlesofAssociationFile').get(0).files[0];
                        var StudyCertificateFiles = $("#StudyCertificateFile").get(0).files;

                        if((affidavitFile == undefined && InstitutionModel.AffidavitDocPath == '') ||
                            (articleFile == undefined && InstitutionModel.ArticleDocPath == '') ||
                            (StudyCertificateFiles.length == 0 && (ModelStudyCertificates == null || ModelStudyCertificates.length == 0))){
                            alert('Please upload required files');
                            StopSpinner();
                            return false;
                           
                        }


                        fileData.append("affidavitFile", affidavitFile);
                        fileData.append("articleFile", articleFile);
                        for (var i = 0; i < StudyCertificateFiles.length; i++) {
                            fileData.append("studyCertificateFiles", StudyCertificateFiles[i]);
                        }

                    }

                        break;
                }

            }

            $.ajax({
                type: "POST",
                url: url,
                data: fileData,
                contentType: false,
                processData: false,
                async: true,
                success: function (response) {
                    var json;
                    if (response instanceof Object)
                        json = response;
                    else
                        json = $.parseJSON(response);

                    $('#InstitutionModel_Id').val(response.ReturnData.split(',')[0]);
                    ShowModal(response);

                    if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                        $('#btnInstitutionSave').val('Update');
                        $('#btnInstitutionSave').removeClass('btn-success');
                        $('#btnInstitutionSave').addClass('btn-primary');
                    }
                    else if(response.ReturnData.split(',')[1] == 'Completed'){
                        $('#btnInstitutionSave').val('Update');
                        $('#btnInstitutionSave').removeClass('btn-primary');
                        $('#btnInstitutionSave').addClass('btn-success');
                    }
                    else if(response.ReturnData.split(',')[1] == 'Empty'){
                        $('#btnInstitutionSave').val('Save');
                        $('#btnInstitutionSave').removeClass('btn-success');
                        $('#btnInstitutionSave').addClass('btn-primary');
                    }
                    StopSpinner();
                    //CheckforEnableSubmit();
                    BindEnclosuresCnt();
                },
                failure: function (response) {
                     alert('failure: ' + response.d);
                },
                error: function (response) {
                     alert('error: ' + response.d);
                }
            });

        }
        else{
            //  alert("FormData is not supported.");
        }

    });

    $('#btnInstitutionSaveOld').on('click', function (e) {
        e.preventDefault();
        if (true) {  // ($('#formOwnership').valid()) {
            var url = '@Url.Action("SaveInstitution", "License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#InstitutionModel_Id').val() == '' ? 0 : $('#InstitutionModel_Id').val(),
                    OwnershipTypeId: $('#InstitutionModel_OwnershipTypeId').val(),
                    InstitutionTypeId: $('#InstitutionModel_InstitutionTypeId').val(),
                    TotalWorkArea: $('#InstitutionModel_TotalWorkArea').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#InstitutionModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-success');
                $('#btnInstitutionSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-primary');
                $('#btnInstitutionSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnInstitutionSave').val('Save');
                $('#btnInstitutionSave').removeClass('btn-success');
                $('#btnInstitutionSave').addClass('btn-primary');
            }

            // CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("SaveInstitution Request Failed: " + err);
    });
        }
    });

        $('#btnDeclarationSave').on('click', function (e) {
            ShowSpinner();
        console.log($('#spanSignaturePath').text());
        e.preventDefault();

        var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined? 0 : $('#ApplicationModel_ExistingApplicationId').val();
        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        if(true) {
            var SignatureDocPath= $('#DeclarationModel_SignatureDocPath').get(0).files[0]
            if(SignatureDocPath==undefined && hfSignaturePath!="")
                SignatureDocPath=$('#hfSignaturePath').val();
            console.log('SignatureDocPath :'  + SignatureDocPath)
            var url = '@Url.Action("SaveDeclarationDetails", "License", new { Area = "User" })';
            var fileData=new FormData();
            fileData.append('Id',$('#DeclarationModel_Id').val() == '' ? 0 : $('#DeclarationModel_Id').val());
            fileData.append('Name',$('#DeclarationModel_Name').val());
            fileData.append('SonOf',$('#DeclarationModel_SonOf').val());
            fileData.append('Age',$('#DeclarationModel_Age').val());
            fileData.append('ResidentOf', $('#DeclarationModel_ResidentOf').val());
            fileData.append('Designation',$('#DeclarationModel_Designation').val());
            fileData.append('Organization',$('#DeclarationModel_Organization').val());
            fileData.append('Date',$('#DeclarationModel_Date').val());
            fileData.append('Place', $('#DeclarationModel_Place').val());
            fileData.append('Signature', $('#DeclarationModel_Signature').val());
            fileData.append('ApplicationType',applicationtype);
            fileData.append('ExistingApplicationId',existingApplicationId);
            fileData.append('SignatureDocPath',SignatureDocPath);
            fileData.append('SignatureUpload',$('#DeclarationModel_SignatureDocPath').get(0).files[0])
            $.ajax({
                type:"POST" ,
                url: url,
                data: fileData,
                contentType: false,
                processData: false,
                async: true,
                success:function(response){
                    $('#DeclarationModel_Id').val(response.ReturnData.split(',')[0]);
                    ShowModal(response);

                    if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                        $('#btnDeclarationSave').val('Update');
                        $('#btnDeclarationSave').removeClass('btn-success');
                        $('#btnDeclarationSave').addClass('btn-primary');
                    }
                    else if(response.ReturnData.split(',')[1] == 'Completed'){
                        $('#btnDeclarationSave').val('Update');
                        $('#btnDeclarationSave').removeClass('btn-primary');
                        $('#btnDeclarationSave').addClass('btn-success');
                    }
                    else if(response.ReturnData.split(',')[1] == 'Empty'){
                        $('#btnDeclarationSave').val('Save');
                        $('#btnDeclarationSave').removeClass('btn-success');
                        $('#btnDeclarationSave').addClass('btn-primary');
                    }
                    StopSpinner();
                    // CheckforEnableSubmit();
                    BindOtherUploads();
                    BindEnclosuresCnt();
                },
                failure: function (response) {
                    console.log("Save Declaration Request Failed: " + err);
                },
                error: function (response) {
                    //alert('error: ' + response.d);
                }
            });
        }
    });

    function BindOtherUploads(){

        var url = '@Url.Action("GetOtherUploads", "License", new { Area = "User" })';

        var jqxhr = $.post(url,function () { })
            .done(function(response){
                 
                $('#tblOtherUploadsPCPNDT tr').not(function () { return !!$(this).has('th').length; }).remove();

                var json;
                if (response instanceof Object)
                    json = response;
                else
                    json = $.parseJSON(response);


                var tr;
                //Append each row to html table
                for (var i = 0; i < json.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + (i + 1) + "</td>");
                    if(json[i].UploadType ==1)
                    {
                        tr.append("<td>" + json[i].UploadType + "</td>");
                    }
                    else
                    {
                        tr.append("<td>" + json[i].UploadType + "</td>");
                    }

                    var path = json[i].DocumentPath;
                    var index = path.indexOf("/");
                    var displayFileName = path.substring(index + 1, path.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].DocumentPath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteDeclarationOtherUploads(" + i + ");'/></td>");

                    $('#tblOtherUploadsPCPNDT').append(tr);
                }


            }).fail(function (jqxhr, status, error) {
                var err = status + ", " + error;
                console.log("get other uploads Request Failed: " + err);
            });


        }


    $('#btnAddOtherUpload').on('click', function (e) {
         
        e.preventDefault();
        var flag=true;
        if($("#DeclarationModel_DocumentUploadModel_UploadType option:selected").text()=="Select Type"){
            flag=false;
            alert("Please Select UploadType");
            return false;
        }

        var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
        if (true) {
            var uri = '@Url.Action("AddOtherUploads", "License", new { Area = "User" })';
            if (window.FormData !== undefined) {
                var uploadedOtherFile = $("#DeclarationModel_DocumentUploadModel_DocumentPath").get(0).files[0];

                if(uploadedOtherFile != undefined)
                {
                    if((uploadedOtherFile.size/1000) > 4096)
                    {
                        $('#errMsgOtherFile').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgOtherFile').text('');
                    }
                }
                if(flag==false)
                {
                    return;
                }
                else
                {
                    // Create FormData object
                    var fileData = new FormData();

                    fileData.append('ReferenceId', $('#DeclarationModel_Id').val() == '' ? 0 : $('#DeclarationModel_Id').val());
                    fileData.append('UploadType', $("#DeclarationModel_DocumentUploadModel_UploadType option:selected").text());
                    fileData.append('OtherUploadText', $('#DeclarationModel_OtherUploadText').val());
                    fileData.append('OtherUploadName', $("#DeclarationModel_DocumentUploadModel_UploadType option:selected").text());
                    fileData.append('DocumentPath', uploadedOtherFile.name);
                    fileData.append('Document', uploadedOtherFile);
                    fileData.append('ApplicationType',  applicationtype);
                    $.ajax({
                        type: "POST",
                        url: uri,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {
                            // Clear controls
                            $('#DeclarationModel_DocumentUploadModel_DocumentPath').val('');
                            $('#DeclarationModel_DocumentUploadModel_UploadType').val('').trigger('change');
                            $('#DeclarationModel_OtherUploadText').val('');

                            $('#tblOtherUploadsPCPNDT tr').not(function () { return !!$(this).has('th').length; }).remove();

                            var json = response;

                            var tr;
                            //Append each row to html table
                            for (var i = 0; i < json.length; i++) {
                                tr = $('<tr/>');
                                tr.append("<td>" + (i + 1) + "</td>");
                                if(json[i].UploadType ==1)
                                {
                                    tr.append("<td>" + json[i].UploadType + "</td>");
                                }
                                else
                                {
                                    tr.append("<td>" + json[i].UploadType + "</td>");
                                }

                                var path = json[i].DocumentPath;
                                var index = path.indexOf("/");
                                var displayFileName = path.substring(index + 1, path.length);
                                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                fileLink = fileLink.replace("displaytext", displayFileName);
                                fileLink = fileLink.replace("filepath", json[i].DocumentPath);
                                fileLink = fileLink.replace("downloadfilename", displayFileName);
                                tr.append("<td>" + fileLink + "</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteDeclarationOtherUploads(" + i + ");'/></td>");

                                $('#tblOtherUploadsPCPNDT').append(tr);
                            }


                        },
                        failure: function (response) {
                            // alert('failure: ' + response.d);
                        },
                        error: function (response) {
                            //  alert('error: ' + response.d);
                        }
                    });
                }
            }
        }else {
            // alert("FormData is not supported.");
        }

    });

    function DeleteDeclarationOtherUploads(index) {
        if (confirm('Do you really want to delete this File?')) {
            var url = '@Url.Action("DeleteDeclarationOtherUploads", "License", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblOtherUploadsPCPNDT tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                if(json[i].UploadType ==1)
                {
                    tr.append("<td>" + json[i].UploadType + "</td>");
                }
                else
                {
                    tr.append("<td>" + json[i].UploadType + "</td>");
                }

                var path = json[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].DocumentPath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteDeclarationOtherUploads(" + i + ");'/></td>");

                $('#tblOtherUploadsPCPNDT').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }

        // CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Employee Request Failed: " + err);
});
        }
    }


    // Script for Edit form Begin
    $(function () {

        BindApplicantData();
        //BindEstablishmentData();
        BindFacilityData();
        BindTestsData();
        BindEquipmentData();
        BindFacilitiesData();
        BindEmployeeData();
        BindInstitutionData();
        BindDeclarationData();
        //CheckforEnableSubmit();
        BindEnclosuresCnt();
    });

    function BindApplicantData(){
        debugger;
        var applicantModel = @Html.Raw(Json.Encode(Model.ApplicantModel));
        console.log('applicantModel:'+applicantModel);
        if(applicantModel.FormStatus != 0){
            if(applicantModel.FormStatus ==2)
            {
                $('#btnApplicantSave').val('Update');
                $('#btnApplicantSave').removeClass('btn-primary');
                $('#btnApplicantSave').addClass('btn-success');
            }
            else if(applicantModel.FormStatus ==1)
            {
                $('#btnApplicantSave').val('Update');
                $('#btnApplicantSave').removeClass(' btn-success');
                $('#btnApplicantSave').addClass('btn-primary');
            }

            if(applicantModel.DistrictId > 0)
            { 
                BindMandals('ApplicantModel_', applicantModel.DistrictId);
                setTimeout(
                   function(){
                       if(applicantModel.MandalId > 0){
                           $('#ApplicantModel_MandalId').val(applicantModel.MandalId).trigger('change');
                           BindVillages('ApplicantModel_', applicantModel.MandalId);
                           setTimeout(function(){
                               if(applicantModel.VillageId > 0){
                                   $('#ApplicantModel_VillageId').val(applicantModel.VillageId).trigger('change');
                                   $('#DeclarationModel_Name').val(applicantModel.Name);
                                   $('#DeclarationModel_Signature').val(applicantModel.Name);
                                   var applicantAddress = applicantModel.HouseNumber + ', ' + applicantModel.StreetName + ', ' + $("#ApplicantModel_VillageId option:selected").text()
                                       + ', ' + $("#ApplicantModel_MandalId option:selected").text() + ', ' + $("#ApplicantModel_DistrictId option:selected").text() + ', ' + $('#ApplicantModel_PINCode').val();
                                   $('#DeclarationModel_ResidentOf').val(applicantAddress);
                               }
                           }, 1000);
                       }
                   }
                    , 1000);

            }

            if(applicantModel.ApplicantRole == "Others"){
                $('.applicantroleother').show();
            }
            else
            {
                $('.applicantroleother').hide();
            }
            // Populate Applicant details in Declaration Tab

        }


    }


    function BindFacilityData(){
        var FacilityModel = @Html.Raw(Json.Encode(Model.FacilityModel));
        if(FacilityModel.FormStatus != 0){
            if(FacilityModel.FormStatus==2)
            {
                $('#btnFacilitySave').val('Update');
                $('#btnFacilitySave').removeClass('btn-primary');
                $('#btnFacilitySave').addClass('btn-success');
            }
            else if(FacilityModel.FormStatus==1)
            {
                $('#btnFacilitySave').val('Update');
                $('#btnFacilitySave').removeClass('btn-success');
                $('#btnFacilitySave').addClass('btn-primary');
            }


            if(FacilityModel.DistrictId > 0)
            {
                BindMandals('FacilityModel_', FacilityModel.DistrictId);
                setTimeout(
                   function(){
                       if(FacilityModel.MandalId > 0){
                           $('#FacilityModel_MandalId').val(FacilityModel.MandalId).trigger('change');
                           BindVillages('FacilityModel_', FacilityModel.MandalId);
                           setTimeout(function(){
                               if(FacilityModel.VillageId > 0){
                                   $('#FacilityModel_VillageId').val(FacilityModel.VillageId).trigger('change');
                               }
                           }, 2000);
                       }
                   }
                    , 2000);
            }

            // Bind checkboxes
            var facilities = FacilityModel.Faclities;
            if (facilities != undefined && facilities.length > 0) {
                var arrFacilities = facilities.split(',');
                for (var i = 0; i < arrFacilities.length; i++) {
                    $('input:checkbox[name="facilitytype"][value="' + arrFacilities[i] + '"]').iCheck('check');
                    ShowTestsFacilities(arrFacilities[i]);
                }
            }
        }
    }

    function BindTestsData(){
        var TestsModel = @Html.Raw(Json.Encode(Model.TestsModel));
        if(TestsModel.FormStatus != 0){
            if(TestsModel.FormStatus ==2)
            {
                $('#btnTestSave').val('Update');
                $('#btnTestSave').removeClass('btn-primary');
                $('#btnTestSave').addClass('btn-success');
            }
            else if(TestsModel.FormStatus ==1)
            {
                $('#btnTestSave').val('Update');
                $('#btnTestSave').removeClass(' btn-success');
                $('#btnTestSave').addClass('btn-primary');
            }


            // Bind Invasive in Tests tab
            var invasives = TestsModel.InvasiveTests;
            if (invasives != undefined && invasives.length > 0) {
                var arrInvasives = invasives.split(',');
                for (var i = 0; i < arrInvasives.length; i++) {
                    $('input:checkbox[name="testinvasive"][value="' + arrInvasives[i] + '"]').iCheck('check');
                }
            }

            // Bind Non-Invasive in Tests tab
            var noninvasives = TestsModel.NonInvasiveTests;
            if (noninvasives != undefined && noninvasives.length > 0) {
                var arrNonInvasives = noninvasives.split(',');
                for (var i = 0; i < arrNonInvasives.length; i++) {
                    $('input:checkbox[name="testnoninvasive"][value="' + arrNonInvasives[i] + '"]').iCheck('check');
                }
            }
        }
    }

    function BindEquipmentData(){

        var rowCount = $('#tblEquiments tr').length;
        if(rowCount==1)           // rowcount  1 table data empty    --kishore 18-10-2017
        {
            $('input:checkbox[name="EquipmentType"]').iCheck('uncheck');
        }
        else
        {
            $('input:checkbox[name="EquipmentType"]').iCheck('check');

        }
        var EquipmentModel = @Html.Raw(Json.Encode(Model.EquipmentModel));
        if(EquipmentModel.FormStatus != 0){

            if(EquipmentModel.FormStatus ==2)
            {
                $('#btnEquipmentSave').val('Update');
                $('#btnEquipmentSave').removeClass('btn-primary');
                $('#btnEquipmentSave').addClass('btn-success');
            }
            else if(EquipmentModel.FormStatus ==1)
            {
                $('#btnEquipmentSave').val('Update');
                $('#btnEquipmentSave').removeClass(' btn-success');
                $('#btnEquipmentSave').addClass('btn-primary');
            }

        }
    }

    function BindFacilitiesData(){
        var FacilitiesModel = @Html.Raw(Json.Encode(Model.FacilitiesModel));
        if(FacilitiesModel.FormStatus != 0){
            if(FacilitiesModel.FormStatus ==2)
            {
                $('#btnFacilicitesSave').val('Update');
                $('#btnFacilicitesSave').removeClass('btn-primary');
                $('#btnFacilicitesSave').addClass('btn-success');
            }
            else if(FacilitiesModel.FormStatus ==1)
            {
                $('#btnFacilicitesSave').val('Update');
                $('#btnFacilicitesSave').removeClass(' btn-success');
                $('#btnFacilicitesSave').addClass('btn-primary');
            }


            // Bind Tests in Facilities tab
            var tests = FacilitiesModel.Tests;
            if (tests != undefined && tests.length > 0) {
                var arrTests = tests.split(',');
                for (var i = 0; i < arrTests.length; i++) {
                    $('input:checkbox[name="facilitytest"][value="' + arrTests[i] + '"]').iCheck('check');
                }
            }

            // Bind Studies in Facilities tab
            var studies = FacilitiesModel.Studies;
            if (studies != undefined && studies.length > 0) {
                var arrStudies = studies.split(',');
                for (var i = 0; i < arrStudies.length; i++) {
                    $('input:checkbox[name="facilitystudies"][value="' + arrStudies[i] + '"]').iCheck('check');
                }
            }
        }
    }

    function BindEmployeeData(){

        var rowCount = $('#tblEmployees tr').length;
        if(rowCount==1)           // rowcount  1 table data empty    --kishore 18-10-2017
        {
            $('input:checkbox[name="EmployeeType"]').iCheck('uncheck');
        }
        else
        {
            $('input:checkbox[name="EmployeeType"]').iCheck('check');

        }
        var EmployeeModel = @Html.Raw(Json.Encode(Model.EmployeeModel));
        if(EmployeeModel.FormStatus != 0){

            if(EmployeeModel.FormStatus ==2)
            {
                $('#btnEmployeeSave').val('Update');
                $('#btnEmployeeSave').removeClass('btn-primary');
                $('#btnEmployeeSave').addClass('btn-success');
            }
            else if(EmployeeModel.FormStatus ==1)
            {
                $('#btnEmployeeSave').val('Update');
                $('#btnEmployeeSave').removeClass(' btn-success');
                $('#btnEmployeeSave').addClass('btn-primary');
            }

        }
    }

    function BindInstitutionData(){
        var InstitutionModel = @Html.Raw(Json.Encode(Model.InstitutionModel));
        ShowHideOwnershipUploads(InstitutionModel.OwnershipTypeId);
        console.log(InstitutionModel);
        var documentJson = InstitutionModel.StudyCertificateDocPaths;


        if (documentJson != undefined) {
            $('#tblStudyCertificates').show();
            $('#tblStudyCertificates tr').not(function () { return !!$(this).has('th').length; }).remove();
            var tr;
            //Append each row to html table
            for (var i = 0; i < documentJson.length; i++) {
                 
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");

                var path = documentJson[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", path);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");

                $('#tblStudyCertificates').append(tr);
            }


            if(InstitutionModel.OwnershipTypeId > 0){
                $('#divOwnershipUploads').show();
                switch (InstitutionModel.OwnershipTypeId) {
                    case '1':
                    case 1:
                        {
                            $('#divAffidavitFile').show();
                            $('#divStudyCertificateFiles').show();
                            $('#divAssociationFile').hide();
                        }
                        break;
                    case '2':
                    case '3':
                    case '5':
                    case 2:
                    case 3:
                    case 5:
                        {

                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').show();
                        $('#spanArticlesofAssociation').text('Articles of Association');

                    }
                        break;
                    case '4':
                    case 4:{
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').show();
                        $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
                    }
                    default:

                }
            }
            else{
                $('#divOwnershipUploads').hide();
            }


            if(InstitutionModel.FormStatus != 0){
                if(InstitutionModel.FormStatus ==2)
                {
                    $('#btnInstitutionSave').val('Update');
                    $('#btnInstitutionSave').removeClass('btn-primary');
                    $('#btnInstitutionSave').addClass('btn-success');
                }
                else if(InstitutionModel.FormStatus ==1)
                {
                    $('#btnInstitutionSave').val('Update');
                    $('#btnInstitutionSave').removeClass('btn-success');
                    $('#btnInstitutionSave').addClass('btn-primary');
                }

            }
        }
        else{
            $('#tblStudyCertificates').hide();
        }
    }
    function DeleteStudyCertificate(documentId){

        if(confirm('Are you sure to delete this document?')){
            var url = '@Url.Action("DeleteStudyCertificate", "Application", new { Area = "User" })';
            var data = {
                id: documentId
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var documentJson;
            if (response instanceof Object)
                documentJson = response;
            else
                documentJson = $.parseJSON(response);

            console.log(documentJson);

            $('#tblStudyCertificates tr').not(function () { return !!$(this).has('th').length; }).remove();
            var tr;
            //Append each row to html table
            for (var i = 0; i < documentJson.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");

                var path = documentJson[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", documentJson[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");

                $('#tblStudyCertificates').append(tr);
            }

        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("DeleteStudyCertificate Request Failed: " + err);
    });
        }
    }

    function BindDeclarationData(){
         
        var DeclarationModel = @Html.Raw(Json.Encode(Model.DeclarationModel));
        if(DeclarationModel.FormStatus != 0 ){
            if(DeclarationModel.FormStatus==2)
            {
                $('#btnDeclarationSave').val('Update');
                $('#btnDeclarationSave').removeClass('btn-primary');
                $('#btnDeclarationSave').addClass('btn-success');
            }
            else if(DeclarationModel.FormStatus==1)
            {
                $('#btnDeclarationSave').val('Update');
                $('#btnDeclarationSave').removeClass('btn-success');
                $('#btnDeclarationSave').addClass('btn-primary');
            }

        }
    }
    // Script for Edit form End

    function CheckforPCPNDTComplete(){
        var result = false;
        if($('#btnApplicantSave').hasClass('btn-success') //&& $('#btnEstablishmentSave').hasClass('btn-success')
            && $('#btnFacilitySave').hasClass('btn-success') && $('#btnTestSave').hasClass('btn-success')
            && $('#btnEquipmentSave').hasClass('btn-success') && $('#btnFacilicitesSave').hasClass('btn-success')
        && $('#btnEmployeeSave').hasClass('btn-success') && $('#btnInstitutionSave').hasClass('btn-success')
        && $('#btnDeclarationSave').hasClass('btn-success')
            ){
            result = true;
            //$('#btnPreview').removeAttr("disabled");
        }
        else
        {
            result = false;
            //$('#btnPreview').attr('disabled', 'disabled');
        }

        return result;
    }



    function BindEnclosuresCnt(){
        var serviceName='PCPNDT';
        var url = '@Url.Action("EnclosureCount", "License", new { Area = "User" })';
        var data = {
            ServiceName:  serviceName
        };
        var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        $('#DeclarationModel_EnclosureCnt').val(response);

    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("enclosureJson Request Failed: " + err);
});

    }

    function ValidatePCPNDTCompleted(){
        var result = false;


        if($('#btnApplicantSave').hasClass('btn-success'))

        {
            result= true;
        }
        else
        {

            $('#liPCPNDTApplicantTab').removeClass('active');
            $('#liPCPNDTFacilityTab').removeClass('active');
            $('#liPCPNDTTestsTab').removeClass('active');
            $('#liPCPNDTEquipmentTab').removeClass('active');
            $('#liPCPNDTFacilitiesTab').removeClass('active');
            $('#liPCPNDTEmployeeTab').removeClass('active');
            $('#liPCPNDTInstitutionTab').removeClass('active');
            $('#liPCPNDTDeclarationTab').removeClass('active');

            $('#tabApplicant').removeClass('active ');
            $('#tabFacility').removeClass('active ');
            $('#tabTests').removeClass('active ');
            $('#tabEquipment').removeClass('active ');
            $('#tabFacilities').removeClass('active ');
            $('#tabEmployee').removeClass('active ');
            $('#tabOwnership').removeClass('active ');
            $('#tabDeclaration').removeClass('active ');

            $('#liPCPNDTApplicantTab').addClass('active');
            $('#tabApplicant').addClass('active');

            result= false;


        }
        if(result==true)
        {
            if($('#btnFacilitySave').hasClass('btn-success'))
            {
                result=true;
            }
            else
            {
                $('#liPCPNDTApplicantTab').removeClass('active');
                $('#liPCPNDTFacilityTab').removeClass('active');
                $('#liPCPNDTTestsTab').removeClass('active');
                $('#liPCPNDTEquipmentTab').removeClass('active');
                $('#liPCPNDTFacilitiesTab').removeClass('active');
                $('#liPCPNDTEmployeeTab').removeClass('active');
                $('#liPCPNDTInstitutionTab').removeClass('active');
                $('#liPCPNDTDeclarationTab').removeClass('active');

                $('#tabApplicant').removeClass('active ');
                $('#tabFacility').removeClass('active ');
                $('#tabTests').removeClass('active ');
                $('#tabEquipment').removeClass('active ');
                $('#tabFacilities').removeClass('active ');
                $('#tabEmployee').removeClass('active ');
                $('#tabOwnership').removeClass('active ');
                $('#tabDeclaration').removeClass('active ');

                $('#liPCPNDTFacilityTab').addClass('active');
                $('#tabFacility').addClass('active');
                result= false;
            }
        }
        if(result==true)
        {
            if($('#btnTestSave').hasClass('btn-success'))
            {
                result=true;
            }
            else
            {
                $('#liPCPNDTApplicantTab').removeClass('active');
                $('#liPCPNDTFacilityTab').removeClass('active');
                $('#liPCPNDTTestsTab').removeClass('active');
                $('#liPCPNDTEquipmentTab').removeClass('active');
                $('#liPCPNDTFacilitiesTab').removeClass('active');
                $('#liPCPNDTEmployeeTab').removeClass('active');
                $('#liPCPNDTInstitutionTab').removeClass('active');
                $('#liPCPNDTDeclarationTab').removeClass('active');

                $('#tabApplicant').removeClass('active ');
                $('#tabFacility').removeClass('active ');
                $('#tabTests').removeClass('active ');
                $('#tabEquipment').removeClass('active ');
                $('#tabFacilities').removeClass('active ');
                $('#tabEmployee').removeClass('active ');
                $('#tabOwnership').removeClass('active ');
                $('#tabDeclaration').removeClass('active ');

                $('#liPCPNDTTestsTab').addClass('active');
                $('#tabTests').addClass('active');
                result= false;
            }
        }
        if(result==true)
        {
            // Equipments are optional so we are not validated --kishore 18-10-2017
            $("[id$='EquipmentType']").on('ifToggled', function (event) {

                if (this.checked)
                {
                    if($('#btnEquipmentSave').hasClass('btn-success'))
                    {
                        result=true;
                    }
                    else
                    {
                        $('#liPCPNDTApplicantTab').removeClass('active');
                        $('#liPCPNDTFacilityTab').removeClass('active');
                        $('#liPCPNDTTestsTab').removeClass('active');
                        $('#liPCPNDTEquipmentTab').removeClass('active');
                        $('#liPCPNDTFacilitiesTab').removeClass('active');
                        $('#liPCPNDTEmployeeTab').removeClass('active');
                        $('#liPCPNDTInstitutionTab').removeClass('active');
                        $('#liPCPNDTDeclarationTab').removeClass('active');

                        $('#tabApplicant').removeClass('active ');
                        $('#tabFacility').removeClass('active ');
                        $('#tabTests').removeClass('active ');
                        $('#tabEquipment').removeClass('active ');
                        $('#tabFacilities').removeClass('active ');
                        $('#tabEmployee').removeClass('active ');
                        $('#tabOwnership').removeClass('active ');
                        $('#tabDeclaration').removeClass('active ');

                        $('#liPCPNDTEquipmentTab').addClass('active');
                        $('#tabEquipment').addClass('active');
                        result= false;
                    }
                }
                else{
                    result=true;
                }

            });

        }

        if(result==true)
        {
            if($('#btnFacilicitesSave').hasClass('btn-success'))
            {
                result=true;
            }
            else
            {
                $('#liPCPNDTApplicantTab').removeClass('active');
                $('#liPCPNDTFacilityTab').removeClass('active');
                $('#liPCPNDTTestsTab').removeClass('active');
                $('#liPCPNDTEquipmentTab').removeClass('active');
                $('#liPCPNDTFacilitiesTab').removeClass('active');
                $('#liPCPNDTEmployeeTab').removeClass('active');
                $('#liPCPNDTInstitutionTab').removeClass('active');
                $('#liPCPNDTDeclarationTab').removeClass('active');

                $('#tabApplicant').removeClass('active ');
                $('#tabFacility').removeClass('active ');
                $('#tabTests').removeClass('active ');
                $('#tabEquipment').removeClass('active ');
                $('#tabFacilities').removeClass('active ');
                $('#tabEmployee').removeClass('active ');
                $('#tabOwnership').removeClass('active ');
                $('#tabDeclaration').removeClass('active ');

                $('#liPCPNDTFacilitiesTab').addClass('active');
                $('#tabFacilities').addClass('active');
                result= false;
            }
        }
        if(result==true)
        {
            //Employee details are optional so we are not validated --kishore 18-10-2017
            $("[id$='EmployeeType']").on('ifToggled', function (event) {

                if (this.checked)
                {
                    if($('#btnEmployeeSave').hasClass('btn-success'))
                    {
                        result=true;
                    }
                    else
                    {
                        $('#liPCPNDTApplicantTab').removeClass('active');
                        $('#liPCPNDTFacilityTab').removeClass('active');
                        $('#liPCPNDTTestsTab').removeClass('active');
                        $('#liPCPNDTEquipmentTab').removeClass('active');
                        $('#liPCPNDTFacilitiesTab').removeClass('active');
                        $('#liPCPNDTEmployeeTab').removeClass('active');
                        $('#liPCPNDTInstitutionTab').removeClass('active');
                        $('#liPCPNDTDeclarationTab').removeClass('active');

                        $('#tabApplicant').removeClass('active ');
                        $('#tabFacility').removeClass('active ');
                        $('#tabTests').removeClass('active ');
                        $('#tabEquipment').removeClass('active ');
                        $('#tabFacilities').removeClass('active ');
                        $('#tabEmployee').removeClass('active ');
                        $('#tabOwnership').removeClass('active ');
                        $('#tabDeclaration').removeClass('active ');

                        $('#liPCPNDTEmployeeTab').addClass('active');
                        $('#tabEmployee').addClass('active');
                        result= false;
                    }
                }
                else{
                    result=true;
                }

            });

        }

        if(result==true)
        {
            if($('#btnInstitutionSave').hasClass('btn-success'))
            {
                result=true;
            }
            else
            {
                $('#liPCPNDTApplicantTab').removeClass('active');
                $('#liPCPNDTFacilityTab').removeClass('active');
                $('#liPCPNDTTestsTab').removeClass('active');
                $('#liPCPNDTEquipmentTab').removeClass('active');
                $('#liPCPNDTFacilitiesTab').removeClass('active');
                $('#liPCPNDTEmployeeTab').removeClass('active');
                $('#liPCPNDTInstitutionTab').removeClass('active');
                $('#liPCPNDTDeclarationTab').removeClass('active');

                $('#tabApplicant').removeClass('active ');
                $('#tabFacility').removeClass('active ');
                $('#tabTests').removeClass('active ');
                $('#tabEquipment').removeClass('active ');
                $('#tabFacilities').removeClass('active ');
                $('#tabEmployee').removeClass('active ');
                $('#tabOwnership').removeClass('active ');
                $('#tabDeclaration').removeClass('active ');

                $('#liPCPNDTInstitutionTab').addClass('active');
                $('#tabOwnership').addClass('active');
                result= false;
            }
        }
        if(result==true)
        {
            if($('#btnDeclarationSave').hasClass('btn-success'))
            {
                result=true;
            }
            else
            {
                $('#liPCPNDTApplicantTab').removeClass('active');
                $('#liPCPNDTFacilityTab').removeClass('active');
                $('#liPCPNDTTestsTab').removeClass('active');
                $('#liPCPNDTEquipmentTab').removeClass('active');
                $('#liPCPNDTFacilitiesTab').removeClass('active');
                $('#liPCPNDTEmployeeTab').removeClass('active');
                $('#liPCPNDTInstitutionTab').removeClass('active');
                $('#liPCPNDTDeclarationTab').removeClass('active');

                $('#tabApplicant').removeClass('active ');
                $('#tabFacility').removeClass('active ');
                $('#tabTests').removeClass('active ');
                $('#tabEquipment').removeClass('active ');
                $('#tabFacilities').removeClass('active ');
                $('#tabEmployee').removeClass('active ');
                $('#tabOwnership').removeClass('active ');
                $('#tabDeclaration').removeClass('active ');

                $('#liPCPNDTDeclarationTab').addClass('active');
                $('#tabDeclaration').addClass('active');
                result= false;
            }
        }
        return result;

    }

    //
    //    &&  &&
    //&&  && $('#btnInstitutionSave').hasClass('btn-success')
    //&&
    //            ){
    //            result = true;
    //    //$('#btnPreview').removeAttr("disabled");
    //    }
    //    else
    //    {
    //        result = false;
    //        //$('#btnPreview').attr('disabled', 'disabled');
    //    }

    //    return result;
    //    }

    </script>
    <script>
    $(document).ready(function () {

        $("#ApplicantModel_ApplicantPhoto").change(function () {


            var File = this.files;

            if(File[0].type=="image/jpeg"){

                if (File && File[0]) {
                    ReadImage(File[0]);
                }
            }
            else{

                $("#targetImg").attr('src', '@Url.Content("~/Content/images/uploadpic.png")');
                $("#description").text('');
                $("#spanUploadValidation").text("Please upload images of JPEG format only");
                $("#ApplicantModel_ApplicantPhoto").val('');
                return false;
            }


        });

        $("#ApplicantModel_AadharCardPath").change(function () {

            var aadharFile = this.files;
            if(aadharFile[0].type=="application/pdf"){
                if (aadharFile && aadharFile[0]) {
                    // ReadImage(File[0]);
                    $("#errMsgAadharCard").text('');
                }
            }
            else{
                $("#ApplicantModel_AadharCardPath").val('');
                $("#errMsgAadharCard").text("Please upload Aadhaar in PDF format only");
            }
        });

        $("#ApplicantModel_PANCardPath").change(function () {
            var PANFile = this.files;
            if(PANFile[0].type=="application/pdf"){
                if (PANFile && PANFile[0]) {
                    $("#errMsgPANCard").text('');
                }
            }
            else{
                $("#ApplicantModel_PANCardPath").val('');
                $("#errMsgPANCard").text("Please upload PAN Card in PDF format only");
            }
        });

        $("#FacilityModel_BuildingLayoutPath").change(function () {
            var BuildingLayout = this.files;
            var type = BuildingLayout[0].type;
            if(type=="application/pdf" || type=="image/jpeg" ){
                if (BuildingLayout && BuildingLayout[0]) {
                    $("#errMsgBuildingLayout").text('');
                }
            }
            else{
                $("#FacilityModel_BuildingLayoutPath").val('');
                $("#errMsgBuildingLayout").text("Please upload Building Layout in PDF/JPEG format only");
            }
        });

        $("#FacilityModel_AddressProofPath").change(function () {
            var AddressProof = this.files;
            var type = AddressProof[0].type;
            if(type=="application/pdf" || type=="image/jpeg" ){
                if (AddressProof && AddressProof[0]) {
                    $("#errMsgAddressProof").text('');
                }
            }
            else{
                $("#FacilityModel_AddressProofPath").val('');
                $("#errMsgAddressProof").text("Please upload Address Proof in PDF/JPEG format only");
            }
        });

        $("#FacilityModel_OwnerShipPath").change(function () {
            var Ownership = this.files;
            var type = Ownership[0].type;
            if(type=="application/pdf" || type=="image/jpeg" ){
                if (Ownership && Ownership[0]) {
                    $("#errMsgOwnerShip").text('');
                }
            }
            else{
                $("#FacilityModel_OwnerShipPath").val('');
                $("#errMsgOwnerShip").text("Please upload Ownership in PDF/JPEG format only");
            }
        });

    });

    var ReadImage = function (file) {

        var reader = new FileReader;
        var image = new Image;

        reader.readAsDataURL(file);
        reader.onload = function (_file) {

            image.src = _file.target.result;
            image.onload = function () {

                var height = this.height;
                var width = this.width;
                var type = file.type;

                console.log("height:"+height+", width:"+width+", type:"+type);
                var size = file.size / 1024;

                if(type=="image/jpeg"){
                    if(size>10 && size <20){
                        $("#spanUploadValidation").text('');
                        $("#targetImg").attr('src', _file.target.result);
                        $("#description").text("Size:" + size+" KB");
                        $("#imgPreview").show();
                    }
                    else{

                        $("#targetImg").attr('src', '@Url.Content("~/Content/images/uploadpic.png")');
                        $("#description").text("Size:" + size+" KB");
                        $("#spanUploadValidation").text("Size should be in between 10KB to 20KB");
                        $("#ApplicantModel_ApplicantPhoto").val('');
                        return false;
                    }
                }
                else{

                    $("#targetImg").attr('src', '@Url.Content("~/Content/images/uploadpic.png")');
                    $("#description").text('');
                    $("#spanUploadValidation").text("Please upload image JPEG format only");
                    $("#ApplicantModel_ApplicantPhoto").val('');
                    return false;
                }

            }

        }

    }
    $("#DeclarationModel_SignatureDocPath").change(function () {
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()=="jpeg" || File[0].name.split('.').pop().toLowerCase()=="jpg")
        {
            $('#spanSignaturePath').text('');$("#spanSignature").text('');

            if (File && File[0]) {
                ReadSignature(File[0]);
            }
        }
        else{

            $("#imgSignature").attr('src', '');
            //$("#spanSignature").text('');
            $("#spanSignature").text("Please Upload Signature of jpg/jpeg Format Only");
            $("#DeclarationModel_SignatureDocPath").val('');
            return false;
        }


    });
    var ReadSignature= function (file) {

        var reader = new FileReader;
        var image = new Image;

        reader.readAsDataURL(file);
        reader.onload = function (_file) {

            image.src = _file.target.result;
            image.onload = function () {
                 
                var height = this.height;
                var width = this.width;
                var type = file.type;

                console.log("height:"+height+", width:"+width+", type:"+type);
                var size = file.size / 1024 ;

                if(type=="image/jpeg"){
                    if(size>10 && size< 20){
                        $("#imgSignature").attr('src', _file.target.result);
                    }
                    else{

                        $("#imgSignature").attr('src', '');
                        $("#spanSignature").text("Image size must be in between 10KB to 20KB");
                        $("#DeclarationModel_SignatureDocPath").val('');
                        return false;
                    }
                }
                else{

                    $("#imgSignature").attr('src', '');
                    $("#spanSignature").text("Please pload Signature of JPEG Format Only");
                    $("#DeclarationModel_SignatureDocPath").val('');
                    return false;
                }

            }

        }

    }
    </script>

    @*Equipment Uploads onchange events*@
    <script>
    $('#EquipmentModel_InvoicePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTInvoiceUpload').text('Please upload only PDF document');
            $('#EquipmentModel_InvoicePath').val('');
        }
        else
            $('#errMsgPCPNDTInvoiceUpload').text('');
    });
    $('#EquipmentModel_TransferCertificatePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTTCUpload').text('Please upload only PDF document');
            $('#EquipmentModel_TransferCertificatePath').val('');
        }
        else
            $('#errMsgPCPNDTTCUpload').text('');
    });

    $('#EquipmentModel_NocFilePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTNOCUpload').text('Please upload only PDF document');
            $('#EquipmentModel_NocFilePath').val('');
        }
        else
            $('#errMsgPCPNDTNOCUpload').text('');
    });
    </script>

    @*Ownership & Institution Uploads onchange events*@
    <script>
    $('#InstitutionModel_OwnershipTypeId').on('change', function(e){
        $('#affidavitFile').val('');
        $('#articlesofAssociationFile').val('');
        $('#StudyCertificateFile').val('');
        $('#articlesofAssociationFile').val('');
    });
    </script>
    @*Facility for Registration Uploads onchange events*@
    <script>
    $('#FacilityModel_AddressProofType').on('change', function(e){
        $('#FacilityModel_AddressProofPath').val('');
    });
    $('#FacilityModel_OwnershipType').on('change', function(e){
        $('#FacilityModel_OwnerShipPath').val('');
    });
    </script>
<script>
        function ShowSpinner() {
            $('#divspinner').fadeIn();
        }

        function StopSpinner() {
            $('#divspinner').fadeOut();
        }
</script>