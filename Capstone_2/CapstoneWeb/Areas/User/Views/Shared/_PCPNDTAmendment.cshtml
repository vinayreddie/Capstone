
@model Capstone.Models.PCPNDTAmendmentModel

<div class="row">
    <div class="col-md-12">
        <!-- Custom Tabs -->
        <div class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#tabApplicantAmendment" data-toggle="tab">Applicant</a></li>
                <li id="li_Facilityreg"><a href="#tabFacility" data-toggle="tab">Facility for Registration</a></li>
                <li id="li_Tests"><a href="#tabTests" data-toggle="tab">Tests</a></li>
                <li id="li_Equip"><a href="#tabEquipment" data-toggle="tab">Equipment</a></li>
                <li id="li_TestFacility"><a href="#tabFacilities" data-toggle="tab">Facilities for Test</a></li>
                <li id="li_Employee"><a href="#tabEmployee" data-toggle="tab">Employees</a></li>                
                <li id="li_OwnerInst"><a href="#tabOwnership" data-toggle="tab">Ownership & Institution</a></li>
                <li id="li_Declare"><a href="#tabDeclaration" data-toggle="tab">Declaration</a></li>
                <li id="li_LicenseCancel"><a href="#tabLicenseCancel" data-toggle="tab">License Cancel</a></li>
            </ul>
            <div class="tab-content">
                @*1st tab Applicant*@

                <div class="tab-pane active" id="tabApplicantAmendment">
                    <form id="formApplicant">
                        <div class="row">
                            <div class="col-md-8"></div>
                            <div class="col-md-4">
                                <div>
                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.ApplicantModel.ApplicantPhoto))
                                    {
                                        //var Image =Url.Content( "~/Uploads/" + Model.ApplicantModel.ApplicantPhoto);
                                        <img id="targetImg" src='@Url.Content( "~/Uploads/" + Model.PCPNDTModel.ApplicantModel.ApplicantPhoto)' style="height:100px;width:100px;margin-left:12px" />
                                    }

                                </div>
                            </div>


                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.Name, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.HiddenFor(model => model.PCPNDTModel.ApplicantModel.Id)
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.Name, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRole, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRole)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRole, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1 applicantroleother" hidden>
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRoleOther, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3 applicantroleother" hidden>
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRoleOther, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.ApplicantRoleOther, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.DistrictId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.DistrictName)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.DistrictId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.MandalId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.MandalName)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.MandalId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.VillageId, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.VillageName)
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.VillageId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.Aadhar, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.Aadhar, new { htmlAttributes = new { @class = "form-control numeric" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.Aadhar, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.PAN, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.PAN, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.PAN, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.HouseNumber, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.HouseNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.StreetName, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.StreetName, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-1">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.PINCode, new { @class = "control-label" })
                            </div>
                            <div class="col-md-3">
                                @Html.DisplayFor(model => model.PCPNDTModel.ApplicantModel.PINCode, new { htmlAttributes = new { @class = "form-control numeric" } })
                                @Html.ValidationMessageFor(model => model.PCPNDTModel.ApplicantModel.PINCode, "", new { @class = "text-danger" })
                            </div>
                            @*<div class="col-md-4 text-right">
                                    <input type="button" value="Clear" id="btnApplicantClear" class="btn btn-default" />
                                    <input type="button" value="Save" id="btnApplicantSave" class="btn btn-primary" />
                                </div>*@
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.AadharCardPath, new { @class = "control-label" })
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-2">
                                @if (!string.IsNullOrEmpty(Model.PCPNDTModel.ApplicantModel.AadharCardPath))
                                {
                                    var addressindex = Model.PCPNDTModel.ApplicantModel.AadharCardPath.LastIndexOf("/");
                                    var addressfileName = Model.PCPNDTModel.ApplicantModel.AadharCardPath.Substring(addressindex + 1);
                                    @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.ApplicantModel.AadharCardPath, downloadName = addressfileName },
                            null
                            );
                                }
                            </div>
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.PCPNDTModel.ApplicantModel.PANCardPath, new { @class = "control-label" })
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-2">
                                @if (!string.IsNullOrEmpty(Model.PCPNDTModel.ApplicantModel.PANCardPath))
                                {
                                    var layoutindex = Model.PCPNDTModel.ApplicantModel.PANCardPath.LastIndexOf("/");
                                    var layoutfileName = Model.PCPNDTModel.ApplicantModel.PANCardPath.Substring(layoutindex + 1);
                                    @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                        new { Area = "", path = Model.PCPNDTModel.ApplicantModel.PANCardPath, downloadName = layoutfileName }, null);
                                }
                            </div>
                        </div>
                    </form>
                </div>

                @*1st tab Applicant*@

                @*1st tab Facilities*@

                <div class="tab-pane" id="tabFacility">
                    @if (Model.FacilityAmendment == true)
                    {
                    <form id="formFacility">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Facilities</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[0].Id}) @ViewBag.FacilityMaster[0].Name

                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[1].Id }) @ViewBag.FacilityMaster[1].Name
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[2].Id }) @ViewBag.FacilityMaster[2].Name
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[3].Id }) @ViewBag.FacilityMaster[3].Name
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[4].Id}) @ViewBag.FacilityMaster[4].Name
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytype", new { @value = ViewBag.FacilityMaster[5].Id }) @ViewBag.FacilityMaster[5].Name
                                </div>
                            </div>
                        </fieldset>
                        <div id="tabFacilityinfo">
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Name, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.Id)
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Name, new { @class = "form-control" })

                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.DistrictId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.DistrictId, new { })
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.DistrictName, new { @class = "form-control" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.MandalId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.MandalId, new { })
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.MandalName, new { @class = "form-control" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.VillageId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.FacilityModel.VillageId, new { })
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.VillageName, new { @class = "form-control" })

                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.HouseNumber, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.HouseNumber, new { @class = "form-control" })

                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.StreetName, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.StreetName, new { @class = "form-control" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Phone, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Phone, new { @class = "form-control numeric" })

                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Email, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Email, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.FacilityModel.Email, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Fax, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Fax, new { @class = "form-control" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telegraph, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Telegraph, new { @class = "form-control" })

                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telex, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.Telex, new { @class = "form-control" })

                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.PINCode, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.PINCode, new { @class = "form-control" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.AddressProofPath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.AddressProofPath, new { @class = "", type = "file", @style = "margin-left:-58%;", @id = "AddressProofPath" })
                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.AddressProofPath))
                                        {
                                            var addressindex = Model.PCPNDTModel.FacilityModel.AddressProofPath.LastIndexOf("/");
                                            var addressfileName = Model.PCPNDTModel.FacilityModel.AddressProofPath.Substring(addressindex + 1);
                                    @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.FacilityModel.AddressProofPath, downloadName = addressfileName },
                            null
                            );
                                        }

                                </div>
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.BuildingLayoutPath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.BuildingLayoutPath, new { @class = "", type = "file", @style = "margin-left:-56%;", @id = "BuildingLayoutPath" })
                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.BuildingLayoutPath))
                                        {
                                            var layoutindex = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath.LastIndexOf("/");
                                            var layoutfileName = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath.Substring(layoutindex + 1);
                                    @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
 new { Area = "", path = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath, downloadName = layoutfileName }, null);
                                        }

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.OwnerShipPath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-1">
                                    @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.OwnershipType, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.OwnerShipPath))
                                    {
                                        var addressindex = Model.PCPNDTModel.FacilityModel.OwnerShipPath.LastIndexOf("/");
                                        var addressfileName = Model.PCPNDTModel.FacilityModel.OwnerShipPath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.FacilityModel.OwnerShipPath, downloadName = addressfileName },
                            null
                            );
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <input type="button" value="Clear" id="btnFacilityClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnFacilitySave" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                    }
                    else if (Model.FacilityAmendment == false)
                    {

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Facilities</legend>
                        <div class="row">
                            <div class="col-md-offset-1 col-md-3">
                                @Html.CheckBox("facilitytype", new { @value = "1" }) Generic Counselling Center
                            </div>
                            <div class="col-md-3">
                                @Html.CheckBox("facilitytype", new { @value = "2" }) Ultra Sound Clinic
                            </div>
                            <div class="col-md-4">
                                @Html.CheckBox("facilitytype", new { @value = "3" }) Imaging Center
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-offset-1 col-md-3">
                                @Html.CheckBox("facilitytype", new { @value = "4" }) Genetic Clinic
                            </div>
                            <div class="col-md-3">
                                @Html.CheckBox("facilitytype", new { @value = "5" }) Generic Laboratory
                            </div>
                            <div class="col-md-4">
                                @Html.CheckBox("facilitytype", new { @value = "6" }) Assisted Reproductive Technology (ART)
                            </div>
                        </div>
                    </fieldset>
                    <div class="row">
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Name, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Name)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.DistrictId, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.DistrictName)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.MandalId, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.MandalName)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.VillageId, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.VillageName)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.HouseNumber, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.HouseNumber)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.StreetName, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.StreetName)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Phone, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Phone)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Email, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Email)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Fax, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Fax)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telegraph, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Telegraph)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.Telex, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.Telex)
                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.PINCode, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.PINCode)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.AddressProofPath, new { @class = "control-label" })
                        </div>
                        <div class="col-md-3">
                            @*@Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.AddressProofPath, new { @class = "", type = "file", @style = "margin-left:-58%;", @id = "AddressProofPath" })*@
                            @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.AddressProofPath))
                                    {
                                        var addressindex = Model.PCPNDTModel.FacilityModel.AddressProofPath.LastIndexOf("/");
                                        var addressfileName = Model.PCPNDTModel.FacilityModel.AddressProofPath.Substring(addressindex + 1);
                            @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.FacilityModel.AddressProofPath, downloadName = addressfileName },
                            null
                            );
                                    }

                        </div>
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.BuildingLayoutPath, new { @class = "control-label" })
                        </div>
                        <div class="col-md-2">
                            @*@Html.TextBoxFor(model => model.PCPNDTModel.FacilityModel.BuildingLayoutPath, new { @class = "", type = "file", @style = "margin-left:-56%;", @id = "BuildingLayoutPath" })*@
                            @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.BuildingLayoutPath))
                                    {
                                        var layoutindex = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath.LastIndexOf("/");
                                        var layoutfileName = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath.Substring(layoutindex + 1);
                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
 new { Area = "", path = Model.PCPNDTModel.FacilityModel.BuildingLayoutPath, downloadName = layoutfileName }, null);
                                    }

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-1">
                            @Html.LabelFor(model => model.PCPNDTModel.FacilityModel.OwnerShipPath, new { @class = "control-label" })
                        </div>
                        <div class="col-md-1">
                            @Html.DisplayFor(model => model.PCPNDTModel.FacilityModel.OwnershipType, new { @class = "control-label" })
                        </div>
                        <div class="col-md-2">
                            @if (!string.IsNullOrEmpty(Model.PCPNDTModel.FacilityModel.OwnerShipPath))
                            {
                                var addressindex = Model.PCPNDTModel.FacilityModel.OwnerShipPath.LastIndexOf("/");
                                var addressfileName = Model.PCPNDTModel.FacilityModel.OwnerShipPath.Substring(addressindex + 1);
                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.FacilityModel.OwnerShipPath, downloadName = addressfileName },
                            null
                            );
                            }
                        </div>
                    </div>
                    }

                </div>

                @*1st tab Facilities*@

                <div id="tabTests" class="tab-pane">
                    @if (Model.TestsProceduresAmendment == true || Model.FacilityAmendment==true)
                    {
                    <form id="formTests">
                        <div class="row">
                            <div class="col-md-offset-1 col-md-10">
                                Specific pre-natal diagnostic procedures/tests for which approval is sought
                            </div>
                        </div>
                        <fieldset class="scheduler-border" id="fsInvasive" hidden>
                            <legend class="scheduler-border">Invasive</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.TestsModel.Id)
                                    @Html.CheckBox("testinvasive", new { @value = "1" }) Amniocentesis
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "2" }) Biochemical
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("testinvasive", new { @value = "3" }) Chorionic Villi Aspiration
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "4" }) Molecular Studies
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "5" }) Chromosomal
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsNonInvasive" hidden>
                            <legend class="scheduler-border">Non-Invasive</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("testnoninvasive", new { @value = "6" }) Ultra Sonography
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsTestsRemarks" hidden>
                            <legend class="scheduler-border">Remarks</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.TestsModel.Remarks, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(model => model.PCPNDTModel.TestsModel.Remarks, new { @class = "form-control" })
                                </div>
                            </div>
                        </fieldset>
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <input type="button" value="Clear" id="btnTestClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnTestSave" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                    }
                    else if (Model.TestsProceduresAmendment == false)
                    {
                    <form id="formTests">
                        @{
                                if (Model.PCPNDTModel.FacilityModel.Faclities != null)
                                {
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("4") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("5"))
                                    {
                        <fieldset class="scheduler-border" id="fsInvasive" hidden>
                            <legend class="scheduler-border">Invasive</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.HiddenFor(model => model.PCPNDTModel.TestsModel.Id)
                                    @Html.CheckBox("testinvasive", new { @value = "1" }) Amniocentesis
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "2" }) Biochemical
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("testinvasive", new { @value = "3" }) Chorionic Villi Aspiration
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "4" }) Molecular Studies
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("testinvasive", new { @value = "5" }) Chromosomal
                                </div>
                            </div>
                        </fieldset>
                                    }
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("2") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("3")
                                        || Model.PCPNDTModel.FacilityModel.Faclities.Contains("4") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("5"))
                                    {
                        <fieldset class="scheduler-border" id="fsNonInvasive" hidden>
                            <legend class="scheduler-border">Non-Invasive</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("testnoninvasive", new { @value = "6" }) Ultra Sonography
                                </div>
                            </div>
                        </fieldset>
                                    }
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("1") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("6"))
                                    {
                        <fieldset class="scheduler-border" id="fsTestsRemarks">
                            <legend class="scheduler-border">Remarks</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.TestsModel.Remarks, new { @class = "control-label" })
                                </div>
                                <div class="col-md-8">
                                    @Html.DisplayFor(model => model.PCPNDTModel.TestsModel.Remarks)
                                </div>
                            </div>
                        </fieldset>
                                    }
                                }
                        }
                    </form>
                                }
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tabEquipment">
                    @if (Model.EquipmentAmendment == true)
                    {
                    <form id="formEquipment">
                        @Html.HiddenFor(model => model.PCPNDTModel.EquipmentModel.Id)
                        @Html.Hidden("hfEquipmentIndex","-1")
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Equipment Details</legend>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.Name, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.HiddenFor(model => model.PCPNDTModel.EquipmentModel.Id)
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.Name, new { @class = "form-control", @Style = "text-transform: uppercase;" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.MachineModel, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.MachineModel, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.MachineModel, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.SerialNumber, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.SerialNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.SerialNumber, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.Make, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.Make, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.Make, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.Type, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @*@Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.Type, new { @class = "form-control" })*@
                                    @Html.RadioButtonFor(model => model.PCPNDTModel.EquipmentModel.Type, "New") New
                                    @Html.RadioButtonFor(model => model.PCPNDTModel.EquipmentModel.Type, "Old") Old
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.Type, "", new { @class = "text-danger" })
                                </div>
                                @*<div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.UploadedFilePath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.UploadedFilePath, new { @type = "file" })
                                    <span id="errMsgEmployeeAmendmentUpload" style="color:red;"></span>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.UploadedFilePath, "", new { @class = "text-danger" })
                                </div>*@
                                <div class="col-md-2 text-right  OldType" hidden>
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.TransferCertificatePath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2 OldType" hidden>
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.TransferCertificatePath, new { @type = "file" })
                                    <span id="errMsgPCPNDTTCUpload" style="color:red;"></span>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.TransferCertificatePath, "", new { @class = "text-danger" })
                                    <div id="divTC"></div>                                    
                                </div>
                                <div class="col-md-2 text-right  NewType" hidden>
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.InvoicePath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2 NewType" hidden>
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.InvoicePath, new { @type = "file" })
                                    <span id="errMsgPCPNDTInvoiceUpload" style="color:red;"></span>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.InvoicePath, "", new { @class = "text-danger" })                                    
                                    <div id="divInvoice"></div>
                                </div>
                                @*<div class="col-md-2 text-right">
                                    <input type="button" value="Add" id="btnAddEquipment" class="btn btn-default" />
                                </div>*@
                            </div>
                            <div class="row">


                                <div class="col-md-2 common" hidden>
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.InstallationCerticatePath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2 common" hidden>
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.InstallationCerticatePath, new { @type = "file" })
                                    <span id="errMsgPCPNDTICUpload" style="color:red;"></span>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.InstallationCerticatePath, "", new { @class = "text-danger" })
                                    <div id="divInstallation"></div>
                                </div>
                                <div class="col-md-1 text-right common" hidden>
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.ImagePath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2 common" hidden>
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.ImagePath, new { @type = "file" })
                                    <span id="errMsgPCPNDTImageUpload" style="color:red;"></span>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.ImagePath, "", new { @class = "text-danger" })
                                    <div id="divImage"></div>
                                </div>
                                <div class="col-md-2  text-right OldType" hidden>
                                    @Html.LabelFor(model => model.PCPNDTModel.EquipmentModel.NocFilePath, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2 OldType" hidden>
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EquipmentModel.NocFilePath, new { @type = "file" })
                                    <span id="errMsgPCPNDTNOCUpload" style="color:red;"></span>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EquipmentModel.NocFilePath, "", new { @class = "text-danger" })
                                    <div id="divNOC"></div>
                                </div>
                                

                                <div class="col-md-3 pull-right text-right">
                                    <input type="button" value="Clear" id="btnEquipmentClear" class="btn btn-default" onclick="ClearEquipment()" />
                                    <input type="button" value="Add" id="btnAddEquipment" class="btn btn-default" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Equipment List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblEquiments" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th>Name</th>
                                                <th>Serial No.</th>
                                                <th>Model</th>
                                                <th>Make</th>
                                                <th>Type</th>
                                                @*<th>Uploaded File</th>*@
                                                <th>Invoice</th>
                                                <th>NOC</th>
                                                <th>Transfer</th>
                                                <th>Installatlion</th>
                                                <th>Image</th>
                                                <th>Status</th>
                                                <th></th>                                                
                                                <th>Edit</th>
                                            </tr>
                                            @if (Model.PCPNDTModel.EquipmentList != null)
                                                {
                                                    for (int i = 0; i < Model.PCPNDTModel.EquipmentList.Count; i++)
                                                    {
                                            <tr>
                                                <td>@Convert.ToInt32(i + 1)</td>
                                                <td>@Model.PCPNDTModel.EquipmentList[i].Name.ToUpper()</td>
                                                <td>@Model.PCPNDTModel.EquipmentList[i].SerialNumber</td>
                                                <td>@Model.PCPNDTModel.EquipmentList[i].MachineModel</td>
                                                <td>@Model.PCPNDTModel.EquipmentList[i].Make</td>
                                                <td>@Model.PCPNDTModel.EquipmentList[i].Type</td>
                                                @*<td>
                                                    @if (Model.PCPNDTModel.EquipmentList[i].UploadedFilePath != null && Model.PCPNDTModel.EquipmentList[i].UploadedFilePath!="")
                                                                {
                                                                    var layoutindex = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath.LastIndexOf("/");
                                                                    var layoutfileName = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath.Substring(layoutindex + 1);
                                                    @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].UploadedFilePath, downloadName = layoutfileName }, null);
                                                                }
                                                </td>*@
                                                <td>
                                                    @if (Model.PCPNDTModel.EquipmentList[i].InvoicePath != null && Model.PCPNDTModel.EquipmentList[i].InvoicePath != "")
                                                    {
                                                        var layoutindex = Model.PCPNDTModel.EquipmentList[i].InvoicePath.LastIndexOf("/");
                                                        var layoutfileName = Model.PCPNDTModel.EquipmentList[i].InvoicePath.Substring(layoutindex + 1);
                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].InvoicePath, downloadName = layoutfileName }, null);
                                                    }
                                                </td>
                                                <td>
                                                    @if (Model.PCPNDTModel.EquipmentList[i].NocFilePath != null && Model.PCPNDTModel.EquipmentList[i].NocFilePath != "")
                                                    {
                                                        var layoutindex = Model.PCPNDTModel.EquipmentList[i].NocFilePath.LastIndexOf("/");
                                                        var layoutfileName = Model.PCPNDTModel.EquipmentList[i].NocFilePath.Substring(layoutindex + 1);
                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].NocFilePath, downloadName = layoutfileName }, null);
                                                    }
                                                </td>
                                                <td>
                                                    @if (Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath != null && Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath != "")
                                                    {
                                                        var layoutindex = Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath.LastIndexOf("/");
                                                        var layoutfileName = Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath.Substring(layoutindex + 1);
                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath, downloadName = layoutfileName }, null);
                                                    }
                                                </td>
                                                <td>
                                                    @if (Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath != null && Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath != "")
                                                    {
                                                        var layoutindex = Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath.LastIndexOf("/");
                                                        var layoutfileName = Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath.Substring(layoutindex + 1);
                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath, downloadName = layoutfileName }, null);
                                                    }
                                                </td>
                                                <td>
                                                    @if (Model.PCPNDTModel.EquipmentList[i].ImagePath != null && Model.PCPNDTModel.EquipmentList[i].ImagePath != "")
                                                    {
                                                        var layoutindex = Model.PCPNDTModel.EquipmentList[i].ImagePath.LastIndexOf("/");
                                                        var layoutfileName = Model.PCPNDTModel.EquipmentList[i].ImagePath.Substring(layoutindex + 1);
                                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].ImagePath, downloadName = layoutfileName }, null);
                                                    }
                                                   
                                                </td>
                                                @if (@Model.PCPNDTModel.EquipmentList[i].Id != 0)
                                                            {
                                                <td>Existing</td>
                                                <td><input type='button' value='Delete' onclick='DeleteEquipment(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EquipmentList[i].Id == 0)
                                                            {
                                                <td>New</td>
                                                <td><input type='button' value='Delete' onclick='DeleteEquipment(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EquipmentList[i].Id != 0 && @Model.PCPNDTModel.EquipmentList[i].IsDeleted == true)
                                                            {
                                                <td>Deleted</td>

                                                            }
                                                <td><input type='button' value='Edit' onclick='EditEquipment(@i);' /></td>
                                            </tr>
                                                    }
                                                }

                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    <div class="row">
                        <div class="col-md-12 text-right">
                            <input type="button" value="Clear" id="btnEquipmentClear" class="btn btn-default" />
                            <input type="button" value="Save" id="btnEquipmentSave" class="btn btn-primary" />
                        </div>
                    </div>
                    }
                    else if (Model.EquipmentAmendment == false)
                    {
                    <div class="tab-pane" id="tabEquipment">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Equipment List</legend>
                            <div class="row">
                                <div class="col-xs-12">
                                    <div class="box">
                                        <div class="box-body table-responsive no-padding">
                                            <table id="tblEquiments" class="table table-hover">
                                                <tr>
                                                    <th>S.No.</th>
                                                    <th>Name</th>
                                                    <th>Serial No.</th>
                                                    <th>Model</th>
                                                    <th>Make</th>
                                                    <th>Type</th>
                                                    <th>Invoice</th>
                                                    <th>NOC</th>
                                                    <th>Transfer</th>
                                                    <th>Installatlion</th>
                                                    <th>Image</th>
                                                </tr>
                                                @if (Model.PCPNDTModel.EquipmentList != null)
                                                    {
                                                        for (int i = 0; i < Model.PCPNDTModel.EquipmentList.Count; i++)
                                                        {
                                                <tr>
                                                    <td>@Convert.ToInt32(i + 1)</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].Name.ToUpper()</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].SerialNumber</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].MachineModel</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].Make</td>
                                                    <td>@Model.PCPNDTModel.EquipmentList[i].Type</td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EquipmentList[i].InvoicePath != null && Model.PCPNDTModel.EquipmentList[i].InvoicePath != "")
                                                        {
                                                            var layoutindex = Model.PCPNDTModel.EquipmentList[i].InvoicePath.LastIndexOf("/");
                                                            var layoutfileName = Model.PCPNDTModel.EquipmentList[i].InvoicePath.Substring(layoutindex + 1);
                                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].InvoicePath, downloadName = layoutfileName }, null);
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EquipmentList[i].NocFilePath != null && Model.PCPNDTModel.EquipmentList[i].NocFilePath != "")
                                                        {
                                                            var layoutindex = Model.PCPNDTModel.EquipmentList[i].NocFilePath.LastIndexOf("/");
                                                            var layoutfileName = Model.PCPNDTModel.EquipmentList[i].NocFilePath.Substring(layoutindex + 1);
                                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].NocFilePath, downloadName = layoutfileName }, null);
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath != null && Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath != "")
                                                        {
                                                            var layoutindex = Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath.LastIndexOf("/");
                                                            var layoutfileName = Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath.Substring(layoutindex + 1);
                                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].TransferCertificatePath, downloadName = layoutfileName }, null);
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath != null && Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath != "")
                                                        {
                                                            var layoutindex = Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath.LastIndexOf("/");
                                                            var layoutfileName = Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath.Substring(layoutindex + 1);
                                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].InstallationCerticatePath, downloadName = layoutfileName }, null);
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (Model.PCPNDTModel.EquipmentList[i].ImagePath != null && Model.PCPNDTModel.EquipmentList[i].ImagePath != "")
                                                        {
                                                            var layoutindex = Model.PCPNDTModel.EquipmentList[i].ImagePath.LastIndexOf("/");
                                                            var layoutfileName = Model.PCPNDTModel.EquipmentList[i].ImagePath.Substring(layoutindex + 1);
                                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                                                 new { Area = "", path = Model.PCPNDTModel.EquipmentList[i].ImagePath, downloadName = layoutfileName }, null);
                                                        }

                                                    </td>

                                                </tr>
                                                        }
                                                    }

                                            </table>
                                        </div>
                                        <!-- /.box-body -->
                                    </div>
                                    <!-- /.box -->
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    }
                    <div class="row">
                        <div class="col-md-12 text-right">
                            @*<input type="button" value="Clear" id="btnEquipmentClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnEquipmentSave" class="btn btn-primary" />*@
                        </div>
                    </div>
                </div>

                <!-- /.tab-pane -->
                <div id="tabFacilities" class="tab-pane">
                    @if (Model.FacilitiesAmendment == true || Model.FacilityAmendment == true)
                    {
                    <form id="formFacilities">
                        @Html.HiddenFor(model => model.PCPNDTModel.FacilitiesModel.Id)
                        <div class="row">
                            <div class="col-md-offset-1 col-md-10">
                                Facilities that are or would be available in the Laboratory/Clinic for the following tests:
                            </div>
                        </div>
                        <fieldset class="scheduler-border" id="fsTests" hidden>
                            <legend class="scheduler-border">Tests</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "1" }) Amniocentesis
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "2" }) Ultra Sound
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytest", new { @value = "3" }) Chorionic Villi Aspiration
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "4" }) Foetal Biopsy
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "5" }) Foetoscopy
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytest", new { @value = "6" }) Cordocentesis
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsStudies" hidden>
                            <legend class="scheduler-border">Studies</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "7" }) Chromosomal Studies
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "8" }) Biochemical Studies
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitystudies", new { @value = "9" }) Molecular Studies
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "10" }) Preemplantatioin Genetic
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border" id="fsFacilityRemarks" hidden>
                            <legend class="scheduler-border">Remarks</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilitiesModel.Remarks, new { @class = "control-label" })
                                </div>
                                <div class="col-md-6">
                                    @Html.TextAreaFor(model => model.PCPNDTModel.FacilitiesModel.Remarks, new { @class = "form-control" })
                                </div>
                            </div>
                        </fieldset>
                        <div class="row">
                            <div class="col-md-12 text-right">
                                <input type="button" value="Clear" id="btnFacilitiesClear" class="btn btn-default" />
                                <input type="button" value="Save" id="btnFacilicitesSave" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                    }
                    else if (Model.FacilitiesAmendment == false)
                    {
                    <form id="formFacilities">
                        @{
                                if (Model.PCPNDTModel.FacilityModel.Faclities != null)
                                {
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("4") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("5"))
                                    {
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Tests</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "1" }) Amniocentesis
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "2" }) Ultra Sound
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytest", new { @value = "3" }) Chorionic Villi Aspiration
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "4" }) Foetal Biopsy
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitytest", new { @value = "5" }) Foetoscopy
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitytest", new { @value = "6" }) Cordocentesis
                                </div>
                            </div>
                        </fieldset>
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Studies</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "7" }) Chromosomal Studies
                                </div>
                                <div class="col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "8" }) Biochemical Studies
                                </div>
                                <div class="col-md-4">
                                    @Html.CheckBox("facilitystudies", new { @value = "9" }) Molecular Studies
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-3">
                                    @Html.CheckBox("facilitystudies", new { @value = "10" }) Preemplantatioin Genetic
                                </div>
                            </div>
                        </fieldset>
                                    }
                                    if (Model.PCPNDTModel.FacilityModel.Faclities.Contains("1") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("2")
                                        || Model.PCPNDTModel.FacilityModel.Faclities.Contains("3") || Model.PCPNDTModel.FacilityModel.Faclities.Contains("6"))
                                    {
                        <fieldset class="scheduler-border" id="fsFacilityRemarks">
                            <legend class="scheduler-border">Remarks</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.FacilitiesModel.Remarks, new { @class = "control-label" })
                                </div>
                                <div class="col-md-6">
                                    @Html.DisplayFor(model => model.PCPNDTModel.FacilitiesModel.Remarks)
                                </div>
                            </div>
                        </fieldset>
                                    }
                                }
                        }
                    </form>
                                }
                </div>

                <div id="tabEmployee" class="tab-pane">
                    @if (Model.EmployeesAmendment == true)
                    {
                    <form id="formEmployee">
                        @Html.HiddenFor(model => model.PCPNDTModel.EmployeeModel.Id)

                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Employee Details</legend>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.DesignationId, "Designation", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.PCPNDTModel.EmployeeModel.DesignationId,
                                new SelectList(TempData.Peek("DoctorSpecialityList") as List<Capstone.Models.DoctorSpecialityModel>, "Id", "Name"), "Select Designation",
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.DesignationId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 subdesignation" hidden>
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.SubDesignation, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2 subdesignation" hidden>
                                    @Html.DropDownList("ddlSubDesignation", new List<SelectListItem>(), new { @class = "form-control" })
                                </div>
                                <div class="col-md-7 subdesignation-sonologist" hidden>
                                    <b style="color:red">Note:</b>
                                    Those are under trained by 6 months Sonology training by government teaching hospitals or equivalent. Under supervision of Qualified Radiologist( Professor in Radiology)
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.Name, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.Name, new { @class = "form-control", @Style = "text-transform: uppercase;" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.Experience, new { @class = "control-label" })
                                </div>
                                <div class="col-md-5">
                                    <div class="row">
                                        <div class="col-md-4">
                                            @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.ExpYears, new { @class = "form-control numeric", @Value = "", @placeholder = "Years" })
                                            @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.ExpYears, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.ExpMonths, new { @class = "form-control numeric", @Value = "", @placeholder = "Months" })
                                            @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.ExpMonths, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-4">
                                            @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.ExpDays, new { @class = "form-control numeric", @Value = "", @placeholder = "Days" })
                                            @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.ExpDays, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.RegistrationNumber, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.EmployeeModel.RegistrationNumber, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.RegistrationNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2">
                                    <label>Education Certificates</label><span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBox("txtEmployeeEducationCertificates", null, new { @type = "file", @multiple = "true" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.EmployeeModel.Type, "File Type", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownList("ddlUploadFileType",
                                new List<SelectListItem> {
                                    new SelectListItem { Text = "Select File Type", Value = "", Selected = true },
                                    new SelectListItem { Text = "Aadhar", Value = "Aadhar" },
                                    new SelectListItem { Text = "PAN", Value = "PAN" },
                                    new SelectListItem { Text = "Photo", Value = "Photo" },
                                    new SelectListItem { Text = "Sign", Value = "Sign" }
                                },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.EmployeeModel.Type, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBox("txtEmployeeUpload", null, new { @type = "file" })
                                </div>
                                <div class="col-md-2">
                                    <input type="button" id="btnEmployeeUpload" value="Upload" class="btn btn-default" />
                                </div>
                            </div>
                            <div class="row" id="divEmployeeUploads" hidden>
                                <div class="col-md-offset-2 col-md-8">
                                    <table id="tblEmployeeUploads" class="table table-striped">
                                        <tr>
                                            <th>#</th>
                                            <th>File Type</th>
                                            <th>File</th>
                                            <th></th>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    <input type="button" value="Add Employee" id="btnAddEmployee" class="btn btn-default" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Employee List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblEmployees" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th>Name</th>
                                                <th>Designation</th>
                                                <th>Experience</th>
                                                <th>Registration Number</th>
                                                <th>Uploaded File</th>
                                                <th>Status</th>
                                                <th></th>
                                            </tr>
                                            @if (Model.PCPNDTModel.EmployeeList != null)
                                                {
                                                    for (int i = 0; i < Model.PCPNDTModel.EmployeeList.Count; i++)
                                                    {
                                                <tr>
                                                    <td> @Convert.ToInt32(@i + 1)</td>
                                                    <td>
                                                        @{ 
                                                            var name = string.Empty;
                                                            if (Model.PCPNDTModel.EmployeeList[i].SubDesignation!= "None")
                                                            { name = Model.PCPNDTModel.EmployeeList[i].Name+ ". " + Model.PCPNDTModel.EmployeeList[i].SubDesignation  ; }
                                                            else
                                                            { name = Model.PCPNDTModel.EmployeeList[i].Name; }
                                                        }
                                                        @name
                                                    </td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].DesignationName</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].ExpYears Years, @Model.PCPNDTModel.EmployeeList[i].ExpMonths Months, @Model.PCPNDTModel.EmployeeList[i].ExpDays Days</td>
                                                    <td>@Model.PCPNDTModel.EmployeeList[i].RegistrationNumber</td>
                                                    <td><input type='button' value='View Uploads' onclick='ViewEmployeeUploads(@i);' /></td>
                                                    @if (@Model.PCPNDTModel.EmployeeList[i].Id != 0)
                                                            {
                                                            <td>Existing</td>
                                                            <td><input type='button' value='Delete' onclick='DeleteEmployee(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EmployeeList[i].Id == 0)
                                                            {
                                                            <td>New</td>
                                                            <td><input type='button' value='Delete' onclick='DeleteEmployee(@i);' /></td>
                                                            }
                                                            else if (@Model.PCPNDTModel.EmployeeList[i].Id != 0 && @Model.PCPNDTModel.EmployeeList[i].IsDeleted == true)
                                                            {
                                                            <td>Deleted</td>
                                                            }
                                                </tr>
                                                    }
                                                }
                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    <div class="row">
                        <div class="col-md-12 text-right">
                            @*<input type="button" value="Clear" id="btnEmployeeClear" class="btn btn-default" />*@
                            <input type="button" value="Save" id="btnEmployeeSave" class="btn btn-primary" />
                        </div>
                    </div>
                    }
                    else if (Model.EmployeesAmendment == false)
                    {
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Employee List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblEmployees" class="table table-hover">
                                            <tr>
    <th>S.No.</th>
    <th>Name</th>
    <th>Designation</th>
    <th>Experience</th>
    <th>Registration Number</th>
    <th>Uploaded File</th>
</tr>
@if (Model.PCPNDTModel.EmployeeList != null)
{
    for (int i = 0; i < Model.PCPNDTModel.EmployeeList.Count; i++)
    {
        <tr>
            <td> @Convert.ToInt32(@i + 1)</td>
            <td>
                @{
                    var name = Model.PCPNDTModel.EmployeeList[i].Name;
                    if (Model.PCPNDTModel.EmployeeList[i].SubDesignation != "None")
                    {
                        name = Model.PCPNDTModel.EmployeeList[i].SubDesignation + ". " + Model.PCPNDTModel.EmployeeList[i].Name;
                    }
                }
                @name
            </td>
            <td>@Model.PCPNDTModel.EmployeeList[i].DesignationName</td>
            <td>
                @Model.PCPNDTModel.EmployeeList[i].ExpYears Years, @Model.PCPNDTModel.EmployeeList[i].ExpMonths Months, @Model.PCPNDTModel.EmployeeList[i].ExpDays Days
            </td>

            <td>@Model.PCPNDTModel.EmployeeList[i].RegistrationNumber</td>
            <td>
                <input type='button' value='View Uploads' onclick='ViewEmployeeUploads(@i);' />
            </td>
        </tr>
                        }
                    }
                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    }

                </div>

                <div id="tabOwnership" class="tab-pane">
                    @*@if (Model.InstitutionAmendment == true)
                        {*@
                    <form id="formOwnership">
                        <div class="row">

                            @if (Model.OwnershipTypeAmendment == true)
                            {
                                <div class="col-md-1">
                                    @Html.HiddenFor(model => model.PCPNDTModel.InstitutionModel.Id)
                                    @Html.HiddenFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId)
                                    @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId,
      new SelectList(ViewBag.OwnershipTypeList, "Id", "Name"), "Select Ownership",
       new { @class = "form-control select2", @style = "Width:100%;" })
                                    <div id="ownershipotherfeild" hidden>
                                        @Html.TextBoxFor(model => model.PCPNDTModel.InstitutionModel.OwnershipOthers, new { @class = "form-control", @style = "margin-top:10px;" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId, "", new { @class = "text-danger" })
                                </div>

                            }
                            else if (Model.OwnershipTypeAmendment == false)
                            {
                                <div class="col-md-1">

                                    @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.InstitutionModel.OwnershipTypeName)
                                </div>


                            }

                            @if (Model.InstitutionAmendment == true)
                            {
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId,
               new SelectList(ViewBag.InstitutionTypeList, "Id", "Name"), "Select Institution Type",
                new { @class = "form-control select2", @style = "Width:100%;" })
                                    <div id="institutionotherfeild" hidden>
                                        @Html.TextBoxFor(model => model.PCPNDTModel.InstitutionModel.InstitutionOthers, new { @class = "form-control", @style = "margin-top:10px;" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @readonly = "readonly", @class = "form-control numeric" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, "", new { @class = "text-danger" })
                                </div>

                            }
                            else if (Model.InstitutionAmendment == false)
                            {
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.InstitutionModel.InstitutionTypeName)
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @class = "control-label" })
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, new { @readonly = "readonly", @class = "form-control numeric" })
                                    @Html.ValidationMessageFor(model => model.PCPNDTModel.InstitutionModel.TotalWorkArea, "", new { @class = "text-danger" })
                                </div>

                            }
                        </div>
                        <div class="row">
                            @if (Model.OwnershipTypeAmendment == true)
                            {
                                <div class="row" id="divOwnershipUploads" hidden>
                                    <div class="col-md-12">
                                        <fieldset class="scheduler-border">
                                            <legend class="scheduler-border">File Uploads</legend>
                                            <div class="row" id="divAffidavitFile">
                                                <div class="col-md-offset-1 col-md-3">
                                                    Affidavit
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("affidavitFile", null, new { @type = "file" })
                                                    <span id="errMsgAmendmentaffidavitFile" style="color:red;"></span>
                                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.InstitutionModel.AffidavitDocPath))
                                                    {
                                                        var index = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath.LastIndexOf("/");
                                                        var fileName = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath.Substring(index + 1);
                                                        @Html.ActionLink(fileName, "DownloadFile", "Generic",
                                                    new { Area = "", path = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath, downloadName = fileName },
                                                    new {@id="lnkAffidavit" }
                                                    );
                                                      
                                                    }
                                                </div>
                                            </div>
                                            <div class="row" id="divAssociationFile">
                                                <div class="col-md-offset-1 col-md-3">
                                                    <span id="spanArticlesofAssociation">Articles of Association</span>
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("articlesofAssociationFile", null, new { @type = "file" })
                                                    <span id="errMsgAmendmentarticlesofAssociationFile" style="color:red;"></span>
                                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.InstitutionModel.ArticleDocPath))
                                                    {
                                                        var index = Model.PCPNDTModel.InstitutionModel.ArticleDocPath.LastIndexOf("/");
                                                        var fileName = Model.PCPNDTModel.InstitutionModel.ArticleDocPath.Substring(index + 1);
                                                        @Html.ActionLink(fileName, "DownloadFile", "Generic",
                                                    new { Area = "", path = Model.PCPNDTModel.InstitutionModel.ArticleDocPath, downloadName = fileName },
                                                    new { @id = "lnkArticlesOfAssociation" }
                                                    );
                                                    }
                                                </div>
                                            </div>
                                            <div class="row" id="divStudyCertificateFiles">
                                                <div class="col-md-offset-1 col-md-3">
                                                    Study Certificate
                                                </div>
                                                <div class="col-md-4">
                                                    @Html.TextBox("StudyCertificateFile", null, new { @type = "file", @multiple = "multiple" })
                                                    <span id="errMsgAmendmentStudyCertificateFile" style="color:red;"></span>
                                                </div>
                                            </div>
                                            <div class="row" id="divStudyCertificatesList">
                                                <div class="col-md-offset-1 col-md-10">
                                                    <table id="tblStudyCertificates">
                                                        <tr>
                                                            <th>S.No.</th>
                                                            <th>Document</th>
                                                            <th></th>
                                                        </tr>
                                                        @if (Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths != null)
                                                        {
                                                            for (int i = 0; i < Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths.Count; i++)
                                                            {
                                                                <tr>
                                                                    <td> @Convert.ToInt32(@i + 1)</td>
                                                                    <td>
                                                                        @if (Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath != null)
                                                                        {
                                                                            var addressindex = Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath.LastIndexOf("/");
                                                                            var addressfileName = Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath.Substring(addressindex + 1);
                                                                            @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                         new { Area = "", path = Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath, downloadName = addressfileName }, null);
                                                                        }
                                                                    </td>
                                                                </tr>
                                                            }
                                                        }
                                                        <tbody></tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>
                            }
                            @if (Model.OwnershipTypeAmendment == false)
                            {
                                <div class="row" id="divOwnershipUploads" hidden>
                                    <div class="col-md-12">
                                        <fieldset class="scheduler-border">
                                            <legend class="scheduler-border">File Uploads</legend>
                                            <div class="row" id="divAffidavitFile">
                                                <div class="col-md-offset-1 col-md-3">
                                                    Affidavit
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.TextBox("affidavitFile", null, new { @type = "file" })*@
                                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.InstitutionModel.AffidavitDocPath))
                                                    {
                                                        var index = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath.LastIndexOf("/");
                                                        var fileName = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath.Substring(index + 1);
                                                        @Html.ActionLink(fileName, "DownloadFile", "Generic",
                                                    new { Area = "", path = Model.PCPNDTModel.InstitutionModel.AffidavitDocPath, downloadName = fileName },
                                                    null
                                                    );
                                                    }
                                                </div>
                                            </div>
                                            <div class="row" id="divAssociationFile">
                                                <div class="col-md-offset-1 col-md-3">
                                                    <span id="spanArticlesofAssociation">Articles of Association</span>
                                                </div>
                                                <div class="col-md-4">
                                                    @*@Html.TextBox("articlesofAssociationFile", null, new { @type = "file" })*@
                                                    @if (!string.IsNullOrEmpty(Model.PCPNDTModel.InstitutionModel.ArticleDocPath))
                                                    {
                                                        var index = Model.PCPNDTModel.InstitutionModel.ArticleDocPath.LastIndexOf("/");
                                                        var fileName = Model.PCPNDTModel.InstitutionModel.ArticleDocPath.Substring(index + 1);
                                                        @Html.ActionLink(fileName, "DownloadFile", "Generic",
                                                    new { Area = "", path = Model.PCPNDTModel.InstitutionModel.ArticleDocPath, downloadName = fileName },
                                                    null
                                                    );
                                                    }
                                                </div>
                                            </div>
                                            <div class="row" id="divStudyCertificateFiles">
                                                <div class="col-md-offset-1 col-md-3">
                                                    Study Certificate
                                                </div>

                                            </div>
                                            <div class="row">
                                                <div class="col-md-offset-1 col-xs-10">
                                                    <table id="tblStudyCertificates">
                                                        <tr>
                                                            <th>S.No.</th>
                                                            <th>Document</th>
                                                            <th></th>
                                                        </tr>
                                                        @*@if (Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths != null)
                                                                           {
                                                                               for (int i = 0; i < Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths.Count; i++)
                                                                               {
                                                                                   <tr>
                                                                                       <td> @Convert.ToInt32(@i + 1)</td>
                                                                                       <td>
                                                                                           @if (Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath != null)
                                                                                           {
                                                                                               var addressindex = Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath.LastIndexOf("/");
                                                                                               var addressfileName = Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath.Substring(addressindex + 1);
                                                                                               @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                                            new { Area = "", path = Model.PCPNDTModel.InstitutionModel.StudyCertificateDocPaths[i].DocumentPath, downloadName = addressfileName }, null);
                                                                                           }
                                                                                       </td>
                                                                                   </tr>
                                                                               }
                                                                           }*@


                                                    </table>
                                                </div>
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>
                            }
                        </div>


                        <div class="row">
                            @if (Model.OwnershipTypeAmendment == true || Model.InstitutionAmendment == true)
                            {
                                <div class="row">
                                    <div class="col-md-12 text-right">
                                        @*<input type="button" value="Clear" id="btnInstitutionClear" class="btn btn-default" />*@
                                        <input type="button" value="Save" id="btnInstitutionSave" class="btn btn-primary" />
                                    </div>
                                </div>
                            }
                        </div>

                    </form>
                    @*}*@

                </div>

                <div id="tabDeclaration" class="tab-pane">
                    <form id="formDeclaration">
                        <div class="row">
                            <div class="col-md-offset-1 col-md-10">
                                <p style="text-indent: 50px; text-align:justify;line-height: 30px;">
                                    I, Sh./Smt./Kum./Dr. <b>@Model.PCPNDTModel.DeclarationModel.Name</b> Son/Daughter/Wife of
                                    <b>@Model.PCPNDTModel.DeclarationModel.SonOf</b> aged <b>@Model.PCPNDTModel.DeclarationModel.Age years</b>
                                    resident of <b>@Model.PCPNDTModel.DeclarationModel.ResidentOf</b> working as (indicate designation)
                                    <b>@Model.PCPNDTModel.DeclarationModel.Designation</b> in (indicate name of the organization to be registered)
                                    <b>@Model.PCPNDTModel.DeclarationModel.Organization</b> hereby declare that I have read and understood the
                                    prenatal Diagnostic techniques (Regulation and Prevention of Miuse) Act, 1994 (57 of 1994) and
                                    Pre Natal Diagnostic Techniques (Regulation and Prevention of Miuse) Rules, 1996.
                                </p>
                                <p style="text-indent: 50px; text-align:justify;line-height: 30px;">
                                    I also undertake to explain the said Act and Rules to all employees of the Genetic Counselling Center / Genetic
                                    Laboratory / Generic Clinic / Ultrasound Clinic / Imaging Center in respect of which registration
                                    is sought and to ensure that act and Rules are fully compiled with.
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                Date
                            </div>
                            <div class="col-md-2">
                                <b>@Model.PCPNDTModel.DeclarationModel.Date.ToString("dd-MM-yyyy")</b>
                            </div>
                            <div class="col-md-6 text-right">
                                Signature
                            </div>
                            <div class="col-md-3 pull-right">
                                @*<img id="imgSignature" src="@Url.Content("~/Uploads/"+ Model.PCPNDTModel.DeclarationModel.SignatureDocPath)" style="height:50px;width:50px;margin-left:12px" />*@
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-1">
                                Place
                            </div>
                            <div class="col-md-2">
                                <b>@Model.PCPNDTModel.DeclarationModel.Place</b>
                            </div>
                            <div class="col-md-offset-5 col-md-4" style="text-align:center">
                                <div>
                                    <img id="imgSignature" src="@Url.Content("~/Uploads/"+ Model.PCPNDTModel.DeclarationModel.SignatureDocPath)" style="height:50px;width:50px;margin-left:12px" />
                                </div>
                                  <b>@Model.PCPNDTModel.DeclarationModel.Signature</b>
                                <br />
                                Name, Designation and Signature of the<br />
                                person who conduct the scanning
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12">
                                <fieldset class="scheduler-border">
                                    <legend class="scheduler-border">Other Uploads</legend>
                                    <div class="box">
                                        <div class="box-body table-responsive no-padding">
                                            <table id="tblOtherUploadsPCPNDT" class="table table-hover">
                                                <tr>
                                                    <th>S.No.</th>
                                                    <th>Type</th>
                                                    <th>Uploaded File</th>
                                                    <th></th>
                                                </tr>
                                                @if (Model.PCPNDTModel.DeclarationModel.OtherUploadsList != null)
                                                {
                                                    for (int i = 0; i < Model.PCPNDTModel.DeclarationModel.OtherUploadsList.Count; i++)
                                                    {
                                                        <tr>
                                                            <td> @Convert.ToInt32(@i + 1)</td>
                                                            <td>@Model.PCPNDTModel.DeclarationModel.OtherUploadsList[i].UploadType</td>
                                                            <td>
                                                                @if (Model.PCPNDTModel.DeclarationModel.OtherUploadsList[i].DocumentPath != null)
                                                                {
                                                                    var addressindex = Model.PCPNDTModel.DeclarationModel.OtherUploadsList[i].DocumentPath.LastIndexOf("/");
                                                                    var addressfileName = Model.PCPNDTModel.DeclarationModel.OtherUploadsList[i].DocumentPath.Substring(addressindex + 1);
                                                                    @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.PCPNDTModel.DeclarationModel.OtherUploadsList[i].DocumentPath, downloadName = addressfileName }, null);
                                                                }
                                                            </td>

                                                        </tr>
                                                    }
                                                }
                                            </table>
                                        </div>
                                        <!-- /.box-body -->
                                    </div>
                                    <!-- /.box -->
                                </fieldset>
                            </div>
                        </div>
                    </form>
                </div>

                <div id="tabLicenseCancel" class="tab-pane">
                    @if (Model.LicenseCancellation == true)
                    {
                        {
                            Html.RenderPartial("_PCPNDTLicense", Model.PCPNDTModel.PCPNDTLicenseModel);
                        }
                    <div class="row">
                        <div class="col-md-offset-8 col-md-3 text-right">

                            <input type="button" value="Cancel My License" id="btnLicenseCancel" class="btn btn-primary" />
                        </div>
                    </div>

                    @*<form id="formLicenseCancel">
                            <div class="row">
                                <div class="col-md-offset-1 col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, "License#", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, new { @class = "control-label" })
                                </div>
                                <div class="col-md-1 ">
                                    <input type="button" value="Search" id="btnLicenseSearch" class="btn btn-default" />
                                </div>
                            </div>
                            @*<div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ApplicantName, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.cancelLiceseModel.ApplicantName)
                                </div>
                                </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, "License No", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">

                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, new { @class = "control-label", @id = "lblLicenseNo" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.IsseuDate, "Issue Date", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.IsseuDate, new { @class = "control-label", @id = "lblIsseuDate" })
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ExpireDate, "Expire Date", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ExpireDate, new { @class = "control-label", @id = "lblExpireDate" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-3 col-md-3 text-right">

                                    <input type="button" value="Cancel My License" id="btnLicenseCancel" class="btn btn-primary" />
                                </div>
                            </div>
                        </form>*@
                    }
                    else if (Model.LicenseCancellation == false)
                    {
                        {
                            //Html.RenderPartial("_PCPNDTLicense", Model.PCPNDTModel.PCPNDTLicenseModel);
                        }

                    @*<form id="formLicenseCancel">


                            <div class="row">
                                <div class="col-md-offset-1 col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, "License No", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">

                                    @Html.DisplayFor(model => model.PCPNDTModel.cancelLiceseModel.LicenseNo, new { @class = "control-label", @id = "lblLicenseNo" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.IsseuDate, "Issue Date", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.cancelLiceseModel.IsseuDate, new { @class = "control-label", @id = "lblIsseuDate" })
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-2">
                                    @Html.LabelFor(model => model.PCPNDTModel.cancelLiceseModel.ExpireDate, "Expire Date", new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DisplayFor(model => model.PCPNDTModel.cancelLiceseModel.ExpireDate, new { @class = "control-label", @id = "lblExpireDate" })
                                </div>
                            </div>

                        </form>*@
                    }
                </div>
            </div>

            <!-- /.tab-content -->
        </div>

        <div class="row">
            @if(Model.ApplyforNOCofEquipment==true)
            {
              
                Model.PCPNDTModel.NocforEquipmentModel.TransactionId =Model.PCPNDTModel.TransactionId;
                Html.RenderPartial("_PCPNDTNOCforEquipment", Model.PCPNDTModel.NocforEquipmentModel);
            }
        </div>
        <!-- nav-tabs-custom -->
    </div>
    <!-- /.col -->

</div>
<script>


    @*$(document).ready(function () {
        $('#tabApplicant input').attr("readonly", "readonly");
        $('#tabFacility input').attr("readonly", "readonly");

        var facilitytabValue =@ViewBag.FacilityTab;
        if(facilitytabValue == true)  {  $('#tabFacility').addClass("active");  }
        else{ console.log('test fail');   }

        var employeetabValue = @ViewBag.EmployeeTab;
        if(employeetabValue == true)  { $('#tabEmployee').addClass("active");   }
        else {  $('#tabEmployee *').prop('disabled',true);      }

        var equipmenttabValue = @ViewBag.EquipmentsTab;
        if(equipmenttabValue == true)  { $('#tabEquipment').addClass("active");  }
        else  {   $('#tabEquipment *').prop('disabled',true);   }

        var inistutionValue = @ViewBag.InistutionsTab;
        if(inistutionValue == true)  {  $('#tabOwnership').addClass("active");  }
        else {  $('#tabOwnership *').prop('disabled',true);    }

        var facilityAvailableValue = @ViewBag.FacilitiesAvailableTab;
        if(facilityAvailableValue == true)  {  $('#tabFacilities').addClass("active");  }
        else {  $('#tabFacilities *').prop('disabled',true);    }

    });*@
    $('input[name="PCPNDTModel.EquipmentModel.Type"]').on('ifChecked', function(event){

        if(this.value=='Old'){
            $('.OldType').show();
            $('.NewType').hide();
            $('.common').show();
        }

        else{
            $('.OldType').hide();
            $('.NewType').show();
            $('.common').show();
        }

    });

    $('#PCPNDTModel_InstitutionModel_InstitutionTypeId').on('change', function () {
        debugger;
        if (this.value == 5) {
            $('#institutionotherfeild').show();
        }
        else
        {
            $('#institutionotherfeild').hide();
        }
    });



    //$('#PCPNDTModel_InstitutionModel_OwnershipTypeId').on('change', function () {

    //    if (this.value == 5) {
    //        $('#ownershipotherfeild').show();
    //    }
    //    else
    //    {
    //        $('#ownershipotherfeild').hide();
    //    }
    //});


    $("#lblLicenseNo").text('');
    $('#lblIsseuDate').text('');
    $('#lblExpireDate').text('');

    var ownershiptypeid= @Model.PCPNDTModel.InstitutionModel.OwnershipTypeId;
    //   var ownershiptypeid=$('#PCPNDTModel_InstitutionModel_OwnershipTypeId').val();
    if(ownershiptypeid > 0){
        $('#divOwnershipUploads').show();
        switch (ownershiptypeid) {
            case '1':
                {
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').hide();
                }
                break;
            case '2':
            case '3':
            case '5':{
                $('#divAffidavitFile').show();
                $('#divStudyCertificateFiles').show();
                $('#divAssociationFile').show();
                $('#spanArticlesofAssociation').text('Articles of Association');
            }
                break;
            case '4':{

                $('#divAffidavitFile').show();
                $('#divStudyCertificateFiles').show();
                $('#divAssociationFile').show();
                $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
            }
            default:

        }
    }
    else{
        $('#divOwnershipUploads').hide();
    }

    $('#btnFacilitySave').on('click', function (e) {

        e.preventDefault();
        var selectedfacilities = []; var noninvasive = []; var invasive = [];
        var tests = []; var studies = []; var testRemarks; var facilitiesRemarks;

        $.each($("input[name='facilitytype']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                selectedfacilities.push(this.value);
        });


        if (selectedfacilities.length == 0) {
            alert('Please select at least one Facility');
            return false;
        }

        // Hide all the divisions
        $('#fsInvasive').hide();
        $('#fsNonInvasive').hide();
        $('#fsTestsRemarks').hide();
        $('#fsTests').hide();
        $('#fsStudies').hide();
        $('#fsFacilityRemarks').hide();


        var validations = [];
        for (var i = 0; i < selectedfacilities.length; i++) {
            var temparr = ValidateTestsFacilities(selectedfacilities[i]);
            validations.push.apply(validations, temparr);
        }

        if(validations.length > 0){
            alert(validations.join('\n'));
            return false;
        }

        if($.inArray("1", selectedfacilities) !== -1 || $.inArray("6", selectedfacilities) !== -1){
            testRemarks = $('#PCPNDTModel_TestsModel_Remarks').val();
            facilitiesRemarks = $('#PCPNDTModel_FacilitiesModel_Remarks').val();
        }
        if($.inArray("2", selectedfacilities) !== -1 || $.inArray("3", selectedfacilities) !== -1){
            $.each($("input[name='testnoninvasive']"), function () {
                if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                    noninvasive.push(this.value);
            });
            facilitiesRemarks = $('#PCPNDTModel_FacilitiesModel_Remarks').val();
        }
        if($.inArray("4", selectedfacilities) !== -1 || $.inArray("5", selectedfacilities) !== -1){
            $.each($("input[name='testinvasive']"), function () {
                if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                    invasive.push(this.value);
            });
            $.each($("input[name='testnoninvasive']"), function () {
                if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                    noninvasive.push(this.value);
            });
            $.each($("input[name='facilitytest']"), function () {
                if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                    tests.push(this.value);
            });

            $.each($("input[name='facilitystudies']"), function () {
                if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                    studies.push(this.value);
            });
        }







        var modelsdata = {
            facility:{
                Faclities: selectedfacilities.join(',')
            },
            tests:{
                InvasiveTests: invasive.join(','),
                NonInvasiveTests: noninvasive.join(','),
                Remarks: testRemarks
            },
            facilities:{
                Tests: tests.join(','),
                Studies: studies.join(','),
                Remarks: facilitiesRemarks
            }
        };


        var url2 = '@Url.Action("SaveFacilityAmendment2", "Amendment", new { Area = "User" })';

        var jqxhr = $.post(url2, modelsdata, function () { })
        .done(function (response) {

            ShowModal(response);
        }).fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("Save Facility Amendment Failed: " + err);
        });

        return false;
        // if ($('#formFacility').valid()) {

        var url = '@Url.Action("SaveFacilityAmendment", "Amendment", new { Area = "User" })';


        // New Code
        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {
            var addressProof = $("#AddressProofPath").get(0).files[0];
            var buildingLayout = $("#BuildingLayoutPath").get(0).files[0];

            // Create FormData object
            var fileData = new FormData();

            fileData.append('AddressProof', addressProof);
            fileData.append('BuildingLayout', buildingLayout);
            fileData.append('Id', $('#PCPNDTModel_FacilityModel_Id').val() == '' ? 0 : $('#PCPNDT_FacilityModel_Id').val());
            fileData.append('Faclities', facilities.join());
            fileData.append('Name', $('#PCPNDTModel_FacilityModel_Name').val());
            fileData.append('DistrictId', $('#PCPNDTModel_FacilityModel_DistrictId').val());
            fileData.append('MandalId', $('#PCPNDTModel_FacilityModel_MandalId').val());
            fileData.append('VillageId', $('#PCPNDTModel_FacilityModel_VillageId').val());
            fileData.append('HouseNumber', $('#PCPNDTModel_FacilityModel_HouseNumber').val());
            fileData.append('StreetName', $('#PCPNDTModel_FacilityModel_StreetName').val());
            fileData.append('PINCode', $('#PCPNDTModel_FacilityModel_PINCode').val());
            fileData.append('Phone', $('#PCPNDTModel_FacilityModel_Phone').val());
            fileData.append('Email', $('#PCPNDTModel_FacilityModel_Email').val());
            fileData.append('Fax', $('#PCPNDTModel_FacilityModel_Fax').val());
            fileData.append('Telegraph', $('#PCPNDTModel_FacilityModel_Telegraph').val());
            fileData.append('Telex', $('#PCPNDTModel_FacilityModel_Telex').val());
            fileData.append('PINCode', $('#PCPNDTModel_FacilityModel_PINCode').val());

            if(addressProof != undefined)
                fileData.append('AddressProofPath', addressProof.name);
            if(buildingLayout != undefined)
                fileData.append('BuildingLayoutPath', buildingLayout.name);

            $.ajax({
                type: "POST",
                url: url,
                cache: false,
                data: fileData,
                contentType: false,
                processData: false,
                async: true,
                success: function (response) {

                    //$('#PCPNDT_FacilityModel_Id').val(response.ReturnData.split(',')[0]);
                    ShowModal(response);


                },
                failure: function (response) {
                    alert('failure: ' + response.d);
                },
                error: function (response) {
                    alert('error: ' + response.d);
                }
            });
        }
        else{
            alert("FormData is not supported.");
        }
        //   }
    });

    function ValidateTestsFacilities(facilityId){
        var validations = [];
        switch (facilityId) {
            case '1':   //Generic Counselling Center
            case '6':   //Assisted Reproductive Technology (ART)
                {
                    if(facilityId){
                        $('#fsTestsRemarks').show();
                        $('#fsFacilityRemarks').show();

                        // validations
                        if($('#PCPNDTModel_TestsModel_Remarks').val() == '')
                            validations.push('Please Enter Remarks in Tests tab');
                        if($('#PCPNDTModel_FacilitiesModel_Remarks').val() == '')
                            validations.push('Please Enter Remarks in Facilities for Test tab');

                    }
                    else{
                        $('#fsTestsRemarks').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '2':   //Ultra Sound Clinic
            case '3':   //Imaging Center
                {
                    if(facilityId){
                        $('#fsNonInvasive').show();
                        $('#fsFacilityRemarks').show();

                        // validations
                        if($('#PCPNDTModel_FacilitiesModel_Remarks').val() == '')
                            validations.push('Please Enter Remarks in Facilities for Test tab');

                        var noninvaive = [];
                        $.each($("input[name='testnoninvasive']"), function () {
                            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                                noninvaive.push(this.value);
                        });

                        if (noninvaive.length == 0) {
                            validations.push('Please select at least one Non-Invasive Test');
                        }
                    }
                    else{
                        $('#fsNonInvasive').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '4':   //Genetic Clinic
            case '5':   //Generic Laboratory
                {
                    if(facilityId){
                        $('#fsInvasive').show();
                        $('#fsNonInvasive').show();
                        $('#fsTests').show();
                        $('#fsStudies').show();

                        // validations
                        var invaive = [];
                        $.each($("input[name='testinvasive']"), function () {
                            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                                invaive.push(this.value);
                        });

                        if (invaive.length == 0) {
                            validations.push('Please select at least one Invasive Test');
                        }

                        var noninvaive = [];
                        $.each($("input[name='testnoninvasive']"), function () {
                            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                                noninvaive.push(this.value);
                        });

                        if (noninvaive.length == 0) {
                            validations.push('Please select at least one Non-Invasive Test');
                        }

                        var tests = []; var studies = [];
                        $.each($("input[name='facilitytest']"), function () {
                            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                                tests.push(this.value);
                        });

                        if (tests.length == 0) {
                            validations.push('Please select at least one Test');
                        }

                        $.each($("input[name='facilitystudies']"), function () {
                            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                                studies.push(this.value);
                        });

                        if (studies.length == 0) {
                            validations.push('Please select at least one Study');
                        }
                    }
                    else{
                        $('#fsInvasive').hide();
                        $('#fsNonInvasive').hide();
                        $('#fsTests').hide();
                        $('#fsStudies').hide();
                    }
                }
                break;
            default:

        }

        return validations;
    }
    function RemoveValuesfromHiddenControls(){
        if ($('#fsInvasive').css('display') == 'none') {
            $.each($("input[name='testinvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsNonInvasive').css('display') == 'none') {
            $.each($("input[name='testnoninvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsTestsRemarks').css('display') == 'none') {
            $('#TestsModel_Remarks').val('');
        }

        if ($('#fsTests').css('display') == 'none') {
            $.each($("input[name='facilitytest']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsStudies').css('display') == 'none') {
            $.each($("input[name='facilitystudies']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsFacilityRemarks').css('display') == 'none') {
            $('#FacilitiesModel_Remarks').val('');
        }
    }

    $('#tabFacilityinfo input').attr('readonly','readonly');

    //$('#divfacilitycheckbox1 select').attr('disabled','disabled');

    function ShowTestsFacilities(facilityId){

        switch (facilityId) {
            case '1':   //Generic Counselling Center
            case '6':   //Assisted Reproductive Technology (ART)
                {
                    if(facilityId){
                        $('#fsTestsRemarks').show();
                        $('#fsFacilityRemarks').show();
                    }
                    else{
                        $('#fsTestsRemarks').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '2':   //Ultra Sound Clinic
            case '3':   //Imaging Center
                {
                    if(facilityId){
                        $('#fsNonInvasive').show();
                        $('#fsFacilityRemarks').show();
                    }
                    else{
                        $('#fsNonInvasive').hide();
                        $('#fsFacilityRemarks').hide();
                    }
                }
                break;
            case '4':   //Genetic Clinic
            case '5':   //Generic Laboratory
                {
                    if(facilityId){
                        $('#fsInvasive').show();
                        $('#fsNonInvasive').show();
                        $('#fsTests').show();
                        $('#fsStudies').show();
                    }
                    else{
                        $('#fsInvasive').hide();
                        $('#fsNonInvasive').hide();
                        $('#fsTests').hide();
                        $('#fsStudies').hide();
                    }
                }
                break;
            default:

        }
    }
    function RemoveValuesfromHiddenControls(){
        if ($('#fsInvasive').css('display') == 'none') {
            $.each($("input[name='testinvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsNonInvasive').css('display') == 'none') {
            $.each($("input[name='testnoninvasive']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsTestsRemarks').css('display') == 'none') {
            $('#TestsModel_Remarks').val('');
        }

        if ($('#fsTests').css('display') == 'none') {
            $.each($("input[name='facilitytest']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsStudies').css('display') == 'none') {
            $.each($("input[name='facilitystudies']"), function () {
                $(this).iCheck('uncheck');
            });
        }

        if ($('#fsFacilityRemarks').css('display') == 'none') {
            $('#FacilitiesModel_Remarks').val('');
        }
    }

    $('#btnTestSave').on('click', function (e) {

        e.preventDefault();
        var invaive = [];
        $.each($("input[name='testinvasive']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                invaive.push(this.value);
        });

        if (invaive.length == 0) {
            alert('Please select at least one Invasive Test');
            return false;
        }

        var noninvaive = [];
        $.each($("input[name='testnoninvasive']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                noninvaive.push(this.value);
        });

        if (noninvaive.length == 0) {
            alert('Please select at least one Non-Invasive Test');
            return false;
        }

        if ($('#formTests').valid()) {

            var url = '@Url.Action("SaveTestsAmendment", "Amendment", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#PCPNDTModel_TestsModel_Id').val() == '' ? 0 : $('#PCPNDTModel_TestsModel_Id').val(),
                    InvasiveTests: invaive.join(),
                    NonInvasiveTests: noninvaive.join(),
                    Remarks: $('#PCPNDTModel_TestsModel_Remarks').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            //var json;
            //if (response instanceof Object)
            //    json = response;
            //else
            //    json = $.parseJSON(response);

            //$('#PCPNDTModel_TestsModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Facility Request Failed: " + err);
    });
        }
    });

    $('#btnAddEquipment').on('click', function (e) {
        e.preventDefault();
        var flag=true;
        if ($('#formEquipment').valid()) {
            var InvoiceFile=$('#PCPNDTModel_EquipmentModel_InvoicePath').get(0).files[0];
            var NOCFile=$('#PCPNDTModel_EquipmentModel_NocFilePath').get(0).files[0];
            var TransferCerticate=$('#PCPNDTModel_EquipmentModel_TransferCertificatePath').get(0).files[0];
            var InstallationFile=$('#PCPNDTModel_EquipmentModel_InstallationCerticatePath').get(0).files[0];
            var Image=$('#PCPNDTModel_EquipmentModel_ImagePath').get(0).files[0];
            var uri = '@Url.Action("AddEquipment", "Amendment", new { Area = "User" })';
            var type=$("input:radio[name='PCPNDTModel.EquipmentModel.Type']:checked").val()
            var applicationtype = $('#PCPNDTModel_ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
            if(InstallationFile==undefined && $('#divInstallation').html()==""){
                $('#errMsgPCPNDTICUpload').text('Please Select Installation Flie');
                return;
            }
            if(Image==undefined && $('#divImage').html()==""){
                $('#errMsgPCPNDTImageUpload').text('Please Select Photo');
                return;
            }
            if($('#PCPNDTModel_EquipmentModel_SerialNumber').val()=='')
            {
                alert("Please Enter Serial Number");
                return;
            }
            if(type=="Old")
            {
                if(TransferCerticate==undefined && $('#divTC').html()==""){
                    $('#errMsgPCPNDTTCUpload').text('Please Select Transfer Certificate');
                    return;
                }

                if(NOCFile==undefined && $('#divNOC').html()==""){
                    $('#errMsgPCPNDTNOCUpload').text('Please Select NOC File');
                    return;
                }

            }
            else{
                if(InvoiceFile==undefined && $('#divInvoice').html()==""){
                    $('#errMsgPCPNDTInvoiceUpload').text('Please Select Invoice File');
                    return;
                }
            }
            if (window.FormData !== undefined) {
                //var uploadedFile = $("#PCPNDTModel_EquipmentModel_UploadedFilePath").get(0).files[0];
                //if(uploadedFile != undefined)
                //{
                //    if((uploadedFile.size/1000) > 4096)
                //    {
                //        $('#errMsgEmployeeAmendmentUpload').text('Please check File size, limit to below 3.8 MB');
                //    }
                //    else
                //    {
                //        $('#errMsgEmployeeAmendmentUpload').text('');
                //    }
                //}
                if(NOCFile !=undefined)
                {
                    if((NOCFile.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTNOCUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTNOCUpload').text('');
                    }

                }
                if(TransferCerticate !=undefined)
                {
                    if((TransferCerticate.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTTCUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTTCUpload').text('');
                    }

                }
                if(InstallationFile !=undefined)
                {
                    if((InstallationFile.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTICUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTICUpload').text('');
                    }

                }
                if(Image !=undefined)
                {
                    if((Image.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTImageUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTImageUpload').text('');
                    }

                }
                if(InvoiceFile !=undefined)
                {
                    if((InvoiceFile.size/1000) > 4096)
                    {
                        $('#errMsgPCPNDTInvoiceUpload').text('Please check File size, limit to below 3.8 MB');
                        flag=false;
                    }
                    else
                    {
                        $('#errMsgPCPNDTInvoiceUpload').text('');
                    }

                }
                if(flag==false){
                    return;
                }
                else{
                // Create FormData object
                    var fileData = new FormData();
                fileData.append('Index',$('#hfEquipmentIndex').val());
                fileData.append('Id', $('#PCPNDTModel_EquipmentModel_Id').val() == '' ? 0 : $('#PCPNDTModel_EquipmentModel_Id').val());
                fileData.append('Name', $('#PCPNDTModel_EquipmentModel_Name').val().toUpperCase());
                fileData.append('SerialNumber', $('#PCPNDTModel_EquipmentModel_SerialNumber').val());
                fileData.append('MachineModel', $('#PCPNDTModel_EquipmentModel_MachineModel').val());
                fileData.append('Make', $('#PCPNDTModel_EquipmentModel_Make').val());
                fileData.append('Type', $("input:radio[name='PCPNDTModel.EquipmentModel.Type']:checked").val());
                //fileData.append('Type', $('#PCPNDTModel_EquipmentModel_Type').val());
                //fileData.append('UploadedFilePath', uploadedFile.name);
                //fileData.append('UploadedFile', uploadedFile);
                fileData.append('NocFile',NOCFile);
                fileData.append('TransferCertificate',TransferCerticate);
                fileData.append('ApplicationType',  applicationtype);
                fileData.append('InstallationFile',InstallationFile);
                fileData.append('Image',Image);
                fileData.append('InvoiceFile',InvoiceFile);

                $.ajax({
                    type: "POST",
                    url: uri,
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: true,
                    success: function (response) {
                        ClearEquipment();

                        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();

                        var json = response;

                        var tr;
                        //Append each row to html table
                        for (var i = 0; i < json.length; i++) {
                            tr = $('<tr/>');
                            tr.append("<td>" + (i + 1) + "</td>");
                            tr.append("<td>" + json[i].Name.toUpperCase() + "</td>");
                            tr.append("<td>" + json[i].SerialNumber + "</td>");
                            tr.append("<td>" + json[i].MachineModel + "</td>");
                            tr.append("<td>" + json[i].Make + "</td>");
                            tr.append("<td>" + json[i].Type + "</td>");

                            @*var path = json[i].UploadedFilePath;
                            var index = path.indexOf("/");
                            var displayFileName = path.substring(index + 1, path.length);
                            var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                            fileLink = fileLink.replace("displaytext", displayFileName);
                            fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                            fileLink = fileLink.replace("downloadfilename", displayFileName);
                            tr.append("<td>" + fileLink + "</td>");*@
                            var Invoice = json[i].InvoicePath;
                            if(Invoice!=null){
                                var index = Invoice.indexOf("/");
                                var displayFileName = Invoice.substring(index + 1, Invoice.length);
                                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                fileLink = fileLink.replace("displaytext", displayFileName);
                                fileLink = fileLink.replace("filepath", json[i].Invoice);
                                fileLink = fileLink.replace("downloadfilename", displayFileName);
                                tr.append("<td>" + fileLink + "</td>");
                            }
                            else{
                                tr.append("<td>NA</td>");
                            }

                            var path = json[i].NocFilePath;
                            if(path!=null){
                                var index = path.indexOf("/");
                                var displayFileName = path.substring(index + 1, path.length);
                                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                fileLink = fileLink.replace("displaytext", displayFileName);
                                fileLink = fileLink.replace("filepath", json[i].NocFilePath);
                                fileLink = fileLink.replace("downloadfilename", displayFileName);
                                tr.append("<td>" + fileLink + "</td>");
                            }
                            else{
                                tr.append("<td>NA</td>");
                            }

                            //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                            var TransferCertificate = json[i].TransferCertificatePath;
                            console.log("TC :"+TransferCerticate);
                            if(TransferCertificate!=null){
                                var index = TransferCertificate.indexOf("/");
                                var displayFileName = TransferCertificate.substring(index + 1, TransferCertificate.length);
                                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                fileLink = fileLink.replace("displaytext", displayFileName);
                                fileLink = fileLink.replace("filepath", json[i].TransferCertificatePath);
                                fileLink = fileLink.replace("downloadfilename", displayFileName);
                                tr.append("<td>" + fileLink + "</td>");

                            }
                            else{
                                tr.append("<td>NA</td>");
                            }

                            var InstallationCertificate = json[i].InstallationCerticatePath;
                            if(InstallationCertificate!=null){
                                var index = InstallationCertificate.indexOf("/");
                                var displayFileName = InstallationCertificate.substring(index + 1, InstallationCertificate.length);
                                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                fileLink = fileLink.replace("displaytext", displayFileName);
                                fileLink = fileLink.replace("filepath", json[i].InstallationCertificate);
                                fileLink = fileLink.replace("downloadfilename", displayFileName);
                                tr.append("<td>" + fileLink + "</td>");

                            }
                            else{
                                tr.append("<td></td>");
                            }

                            var ImagePath = json[i].ImagePath;
                            if(ImagePath!=null){
                                var index = ImagePath.indexOf("/");
                                var displayFileName = ImagePath.substring(index + 1, ImagePath.length);
                                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                fileLink = fileLink.replace("displaytext", displayFileName);
                                fileLink = fileLink.replace("filepath", json[i].ImagePath);
                                fileLink = fileLink.replace("downloadfilename", displayFileName);
                                tr.append("<td>" + fileLink + "</td>");

                            }
                            else{
                                tr.append("<td></td>");
                            }
                            if(json[i].Id!=0 && json[i].IsDeleted==false)
                            {
                                tr.append("<td>Existing</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                            }
                            if (json[i].Id==0 && json[i].IsDeleted==false)
                            {
                                tr.append("<td>New</td>");
                                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                            }
                            if(json[i].Id!=0 && json[i].IsDeleted==true)
                            {
                                tr.append("<td>Deleted</td>");
                            }
                            tr.append("<td><input type='button' value='Edit' onclick='EditEquipment("+ i + ");' /></td>")
                            //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                            $('#tblEquiments').append(tr);
                        }
                    },
                    failure: function (response) {
                        // alert('failure: ' + response.d);
                    },
                    error: function (response) {
                        //alert('error: ' + response.d);
                    }
                });
            }

            } else {
                alert("FormData is not supported.");
            }
        }
    });

    function EditEquipment(index){
        var url = '@Url.Action("EditEquipment","Amendment", new { Area = "User" })';
        var data = { index: index };
        var jqxhr=$.post(url,data,function(){})
        .done(function(response){
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);
            PopulateEquipment(json);
            $('#hfEquipmentIndex').val(index);
        });
    }
    function ClearEquipment(){
        // Clear controls
        $('#PCPNDTModel_EquipmentModel_Name').val('');
        $('#PCPNDTModel_EquipmentModel_SerialNumber').val('');
        $('#PCPNDTModel_EquipmentModel_MachineModel').val('');
        $('#PCPNDTModel_EquipmentModel_Make').val('');
        $('input:radio[name="PCPNDTModel.EquipmentModel.Type"]:checked').iCheck('uncheck');
        $('input:radio[name="PCPNDTModel.EquipmentModel.Type"]').attr('disabled', false);
        //$('#PCPNDTModel_EquipmentModel_Type').val('');
        //$('#PCPNDTModel_EquipmentModel_UploadedFilePath').val('');

        $('#PCPNDTModel_EquipmentModel_NocFilePath').val('');
        $('#PCPNDTModel_EquipmentModel_TransferCertificatePath').val('');
        $('#PCPNDTModel_EquipmentModel_InstallationCerticatePath').val('');
        $('#PCPNDTModel_EquipmentModel_ImagePath').val('');
        $('#PCPNDTModel_EquipmentModel_InvoicePath').val('');
        $('.OldType').hide();
        $('.NewType').hide();
        $('.common').hide();
        $('#btnAddEquipment').val('Add');
        $('#divInstallation').html('');$('#divImage').html('');$('#divTC').html('');
        $('#divNOC').html('');$('#divInvoice').html('');
        $('#hfEquipmentIndex').val("-1");
    }
    function PopulateEquipment(json){
        console.log(json);
        $('#btnAddEquipment').val('Update');
        $('#PCPNDTModel_EquipmentModel_Id').val(json.Id);
        $('#PCPNDTModel_EquipmentModel_Name').val(json.Name.toUpperCase());
        $('#PCPNDTModel_EquipmentModel_MachineModel').val(json.MachineModel);
        $('#PCPNDTModel_EquipmentModel_SerialNumber').val(json.SerialNumber);
        $('#PCPNDTModel_EquipmentModel_Make').val(json.Make);
        $('input:radio[name="PCPNDTModel.EquipmentModel.Type"][value="'+json.Type+'"]').iCheck('check');
        $('input:radio[name="PCPNDTModel.EquipmentModel.Type"]').attr('disabled', true);
        //InstallationCertificatee
        if(json.InstallationCerticatePath!="" && json.InstallationCerticatePath!=null){

            var InstallationIndex = json.InstallationCerticatePath.indexOf("/");
            var InstallationFileName = json.InstallationCerticatePath.substring(InstallationIndex + 1, json.InstallationCerticatePath.length);
            var InstallationfileLink = '@Html.Raw(Html.ActionLink("displayFileName", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
            InstallationfileLink = InstallationfileLink.replace("displayFileName", InstallationFileName);
            InstallationfileLink = InstallationfileLink.replace("filepath", json.InstallationCerticatePath);
            InstallationfileLink = InstallationfileLink.replace("downloadfilename", InstallationFileName);
            $('#divInstallation').html(InstallationfileLink);
        }
        //Image
        if(json.ImagePath!="" && json.ImagePath!=null){
            var ImageIndex = json.ImagePath.indexOf("/");
            var ImageFileName = json.ImagePath.substring(ImageIndex + 1, json.ImagePath.length);
            var ImagefileLink = '@Html.Raw(Html.ActionLink("displayFileName", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
            ImagefileLink = ImagefileLink.replace("filepath", json.ImagePath);
            ImagefileLink = ImagefileLink.replace("downloadfilename", ImageFileName);
            ImagefileLink = ImagefileLink.replace("displayFileName", ImageFileName);
            $('#divImage').html(ImagefileLink);
        }
        //Invoice File
        if(json.InvoicePath!="" && json.InvoicePath!=null){
            var InvoiceIndex = json.InvoicePath.indexOf("/");
            var InvoiceFileName = json.InvoicePath.substring(InvoiceIndex + 1, json.InvoicePath.length);
            var InvoicefileLink = '@Html.Raw(Html.ActionLink("displayFileName", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
            InvoicefileLink = InvoicefileLink.replace("displayFileName", InvoiceFileName);
            InvoicefileLink = InvoicefileLink.replace("filepath", json.InvoicePath);
            InvoicefileLink = InvoicefileLink.replace("downloadfilename", InvoiceFileName);
            $('#divInvoice').html(InvoicefileLink);
        }
        //Transfer Certificate
        if(json.TransferCertificatePath!="" && json.TransferCertificatePath!=null){
            var TransferIndex = json.TransferCertificatePath.indexOf("/");
            var TransferFileName = json.TransferCertificatePath.substring(TransferIndex + 1, json.TransferCertificatePath.length);
            var TransferfileLink = '@Html.Raw(Html.ActionLink("displayFileName", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
            TransferfileLink = TransferfileLink.replace("displayFileName", TransferFileName);
            TransferfileLink = TransferfileLink.replace("filepath", json.TransferCertificatePath);
            TransferfileLink = TransferfileLink.replace("downloadfilename", TransferFileName);
            $('#divTC').html(TransferfileLink);
        }
        //NOC  File
        if(json.NocFilePath!="" && json.NocFilePath!=null){
            var NOCIndex = json.NocFilePath.indexOf("/");
            var NOCFileName = json.NocFilePath.substring(NOCIndex + 1, json.NocFilePath.length);
            var NOCfileLink = '@Html.Raw(Html.ActionLink("displayFileName", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
            NOCfileLink = NOCfileLink.replace("filepath", json.NocFilePath);
            NOCfileLink = NOCfileLink.replace("displayFileName", NOCFileName);
            NOCfileLink = NOCfileLink.replace("downloadfilename", NOCFileName);
            $('#divNOC').html(NOCfileLink);
        }
    }

    function DeleteEquipment(index) {

        if (confirm('Do you really want to delete this equipment?')) {
            var url = '@Url.Action("DeleteEquipment","Amendment", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);
        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i +1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].SerialNumber + "</td>");
                tr.append("<td>" + json[i].MachineModel + "</td>");
                tr.append("<td>" + json[i].Make + "</td>");
                tr.append("<td>" + json[i].Type + "</td>");

                @*var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");*@
                var Invoice = json[i].InvoicePath;
                if(Invoice!=null){
                    var index = Invoice.indexOf("/");
                    var displayFileName = Invoice.substring(index + 1, Invoice.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].Invoice);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                }
                else{
                    tr.append("<td>NA</td>");
                }

                var path = json[i].NocFilePath;
                if(path!=null){
                    var index = path.indexOf("/");
                    var displayFileName = path.substring(index + 1, path.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].NocFilePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                }
                else{
                    tr.append("<td>NA</td>");
                }

                //tr.append("<td><a href='javascript:void(0);' onclick='DeleteEquipment(" + i + ");' text='Delete'></a></td>");

                var TransferCertificate = json[i].TransferCertificatePath;
                if(TransferCertificate!=null){
                    var index = TransferCertificate.indexOf("/");
                    var displayFileName = TransferCertificate.substring(index + 1, TransferCertificate.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].TransferCertificatePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");

                }
                else{
                    tr.append("<td>NA</td>");
                }

                var InstallationCertificate = json[i].InstallationCerticatePath;
                if(InstallationCertificate!=null){
                    var index = InstallationCertificate.indexOf("/");
                    var displayFileName = InstallationCertificate.substring(index + 1, InstallationCertificate.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].InstallationCertificate);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");

                }
                else{
                    tr.append("<td></td>");
                }

                var ImagePath = json[i].ImagePath;
                if(ImagePath!=null){
                    var index = ImagePath.indexOf("/");
                    var displayFileName = ImagePath.substring(index + 1, ImagePath.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].ImagePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");

                }
                else{
                    tr.append("<td></td>");
                }
                if (json[i].Id!=0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                }
                else{
                    tr.append("<td></td>");
                }
                if (json[i].Id==0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>New</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");
                }
                else{
                    tr.append("<td></td>");
                }
                if (json[i].Id!=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");
                }

                tr.append("<td><input type='button' value='Edit' onclick='EditEquipment("+ i + ");' /></td>")

                $('#tblEquiments').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnTestSave').val('Save');
            $('#btnTestSave').removeClass('btn-success');
            $('#btnTestSave').addClass('btn-primary');
        }
        CheckforEnableSubmit();
    }
    )
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Equipment Request Failed: " + err);
});
        }
    }

    $('#btnEquipmentSave').on('click', function (e) {
        e.preventDefault();
        var url = '@Url.Action("SaveEquipments", "Amendment", new { Area = "User" })';
        var jqxhr = $.post(url, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        ShowModal(response);
        var transactionId = response.ReturnData.split(',')[0];
        BindEquipmentsOnSave(transactionId);

        //if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
        //    $('#btnEquipmentSave').val('Update');
        //    $('#btnEquipmentSave').removeClass('btn-success');
        //    $('#btnEquipmentSave').addClass('btn-primary');
        //}
        //else if(response.ReturnData.split(',')[1] == 'Completed'){
        //    $('#btnEquipmentSave').val('Update');
        //    $('#btnEquipmentSave').removeClass('btn-primary');
        //    $('#btnEquipmentSave').addClass('btn-success');
        //}


        CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("SaveEquipments Request Failed: " + err);
});
    });

    function BindEquipmentsOnSave(transactionId){
        var url = '@Url.Action("GetEquipments", "Amendment", new { Area = "User" })';
        var data = {transactionId : transactionId};
        var jqxhr = $.post(url, data, function () { }, "json")
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEquiments tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined && json.length != 0) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].SerialNumber + "</td>");
                tr.append("<td>" + json[i].MachineModel + "</td>");
                tr.append("<td>" + json[i].Make + "</td>");
                tr.append("<td>" + json[i].Type + "</td>");

                var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEquipment(" + i + ");'/></td>");


                $('#tblEquiments').append(tr);
            }

            $('#btnEquipmentSave').val('Update');
            $('#btnEquipmentSave').removeClass('btn-primary');
            $('#btnEquipmentSave').addClass('btn-success');
        }
        else if(json == undefined || json.length == 0){
            $('#btnEquipmentSave').val('Save');
            $('#btnEquipmentSave').removeClass('btn-success');
            $('#btnEquipmentSave').addClass('btn-primary');
        }
    })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("GetEquipments Request Failed: " + err);
        });

    }

    $('#btnFacilicitesSave').on('click', function (e) {
        e.preventDefault();
        var tests = []; var studies = [];
        $.each($("input[name='facilitytest']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                tests.push(this.value);
        });

        if (tests.length == 0) {
            alert('Please select at least one Test');
            return false;
        }

        $.each($("input[name='facilitystudies']"), function () {
            if ($(this).parent('[class*="icheckbox"]').hasClass("checked"))
                studies.push(this.value);
        });

        if (studies.length == 0) {
            alert('Please select at least one Study');
            return false;
        }

        if ($('#formFacilities').valid()) {

            var url = '@Url.Action("SaveFacilitiesamendment", "Amendment", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#PCPNDTModel_FacilitiesModel_Id').val() == '' ? 0 : $('#PCPNDTModel_FacilitiesModel_Id').val(),
                    Tests: tests.join(),
                    Studies: studies.join(),
                    Remarks: $('#PCPNDTModel_FacilitiesModel_Remarks').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            //var json;
            //if (response instanceof Object)
            //    json = response;
            //else
            //    json = $.parseJSON(response);

            //$('#PCPNDTModel_FacilitiesModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);


        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Facilities Request Failed: " + err);
    });
        }
    });

    $('#PCPNDTModel_EmployeeModel_DesignationId').on('change', function(){
        $('.subdesignation').hide();
        $('.subdesignation-sonologist').hide();

        if(this.value != ''){
            var employeeDesignationId = this.value;
            $('#ddlUploadFileType').empty();
            $('#ddlUploadFileType').append($("<option></option>").val('').html('Select File Type'));

            // Bind default values      - Aadhar, PAN, Photo, Sign
            $('#ddlUploadFileType').append($("<option></option>").val('Aadhar').html('Aadhar'));
            $('#ddlUploadFileType').append($("<option></option>").val('PAN').html('PAN'));
            $('#ddlUploadFileType').append($("<option></option>").val('Photo').html('Photo'));
            $('#ddlUploadFileType').append($("<option></option>").val('Sign').html('Sign'));

            var designationId = this.value;
            if(designationId == 1 || designationId == 4){
                // Gynecologist/Radiologist
                $('#ddlUploadFileType').append($("<option></option>").val('APMCR / TSMCR').html('APMCR / TSMCR'));
                $('#ddlUploadFileType').append($("<option></option>").val('Test Certificate').html('Test Certificate'));
            }
            else if(designationId == 11){
                // Supporting Staff
                $('#ddlUploadFileType').append($("<option></option>").val('TS ParaCapstone Board Certificate').html('TS ParaCapstone Board Certificate'));
            }
            else{
                // Others
                $('#ddlUploadFileType').append($("<option></option>").val('Registration Certificate').html('Registration Certificate'));
            }

            // Show/Hide SubDesignations
            if(designationId == 1 || designationId == 4){
                // Gynaecologist or Radiologist
                $('#ddlSubDesignation').val('Select');
                $('.subdesignation').show();
            }
            else if(designationId == 6){
                // Sonologist
                $('.subdesignation-sonologist').show();
            }

            $('#ddlSubDesignation').empty();
            $('#ddlSubDesignation').append($("<option></option>").val('Select').html('Select'));

            // Bind Sub Designations
            if(designationId == 1){
                // Gynaecologist
                $('#ddlSubDesignation').append($("<option></option>").val('MBBS, DGO.').html('MBBS, DGO.'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD, DGO.').html('MD, DGO.'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD (OBG).').html('MD (OBG).'));
                $('#ddlSubDesignation').append($("<option></option>").val('MS (OBG).').html('MS (OBG).'));
                $('#ddlSubDesignation').append($("<option></option>").val('DNB (OBG).').html('DNB (OBG).'));
            }
            else if(designationId == 4){
                // Radiologist
                $('#ddlSubDesignation').append($("<option></option>").val('MBBS, DMRD.').html('MBBS, DMRD.'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD (Radio diagnosis).').html('MD (Radio diagnosis).'));
                $('#ddlSubDesignation').append($("<option></option>").val('MD, DMRD.').html('MD, DMRD.'));
                $('#ddlSubDesignation').append($("<option></option>").val('DNB (Radio diagnosis).').html('DNB (Radio diagnosis).'));
            }
        }
        else{
            // Bind Defaults    - Aadhar, PAN, Photo, Sign
            $('#ddlUploadFileType').append($("<option></option>").val('Aadhar').html('Aadhar'));
            $('#ddlUploadFileType').append($("<option></option>").val('PAN').html('PAN'));
            $('#ddlUploadFileType').append($("<option></option>").val('Photo').html('Photo'));
            $('#ddlUploadFileType').append($("<option></option>").val('Sign').html('Sign'));
        }

        // Clear existing Employee uploads
        var url = '@Url.Action("ClearEmployeeUploads", "Amendment", new { Area = "User" })';
        var jqxhr = $.post(url, function () { })
        .done(function (response) {
            $('#divEmployeeUploads').hide();

            var arrFileTypes = ['Aadhar', 'PAN', 'Photo', 'Sign'];
            if(employeeDesignationId == 1 || employeeDesignationId == 4){
                // Gynecologist/Radiologist
                arrFileTypes.push('APMCR / TSMCR');
                arrFileTypes.push('Test Certificate');
            }
            else if(employeeDesignationId == 11){
                // Supporting Staff
                arrFileTypes.push('TS ParaCapstone Board Certificate');
            }
            else if(employeeDesignationId != '') {
                // Others
                arrFileTypes.push('Registration Certificate');
            }

            // Bind File Type dropdown
            $('#ddlUploadFileType').empty();
            $('#ddlUploadFileType').append($("<option/>").val('').text('Select File Type'));
            $.each(arrFileTypes, function (key, value) {
                $('#ddlUploadFileType').append($("<option/>").val(value).text(value));
            });
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("ClearEmployeeUploads Request Failed: " + err);
    });
    });

    $('#btnEmployeeUpload').on('click', function(e){
        e.preventDefault();
        var uploadedFile = $("#txtEmployeeUpload").get(0).files[0];
        var employeeDesignationId = $('#PCPNDTModel_EmployeeModel_DesignationId').val();
        var fileType = $('#ddlUploadFileType').val();

        if(employeeDesignationId == ''){
            alert('Please select Employee designation');
            return;
        }
        if(fileType == ''){
            alert('Please select File Type');
            return;
        }
        if(uploadedFile == undefined){
            alert('Please upload a file');
            return;
        }

        var fileExtension = uploadedFile.name.split('.').pop();
        if(fileType == 'Photo' || fileType == 'Sign'){
            if(fileExtension != "jpeg" && fileExtension != "jpg"){
                alert('Please upload only JPEG or JPG files');
                return;
            }
            else{
                var fileSize = uploadedFile.size;
                if(fileSize/1024 > 20 || fileSize/1024 < 10){
                    alert('Size of image should be 10 KB - 20 KB');
                    return;
                }
            }
        }
        else{
            if(fileExtension != "pdf"){
                alert('Please upload only PDF files');
                return;
            }
        }

        var url = '@Url.Action("UploadEmployeeDocument", "Amendment", new { Area = "User" })';
        var fileData = new FormData();
        fileData.append('Id', $('#PCPNDTModel_EmployeeModel_Id').val() == '' ? 0 : $('#PCPNDTModel_EmployeeModel_Id').val());
        fileData.append('uploadedFile', uploadedFile);
        fileData.append('fileType', fileType);

        $.ajax({
            type: "POST",
            url: url,
            data: fileData,
            contentType: false,
            processData: false,
            async: true,
            success: function (response) {
                // Bind doc uploads
                console.clear();
                console.log(response.DocumentsList);
                BindEmployeeUploads(response.DocumentsList);
                BindEmployeeUploadDocFileTypes(employeeDesignationId, response.DocumentsList);

                // Clear Controls
                $('#ddlUploadFileType').val('');
                $("#txtEmployeeUpload").val('');

            },
            failure: function (response) {
                console.log('failure: ' + response.d);
            },
            error: function (response) {
                console.log('error: ' + response.d);
            }
        });
    });

    function DeleteEmployeeUpload(index){
        var confirmation = confirm('Are you sure to delete?');
        if(confirmation){
            var url = '@Url.Action("DeleteEmployeeUpload", "Amendment", new { Area = "User" })';
            var data = { index : index };
            var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var employeeDesignationId = $('#PCPNDTModel_EmployeeModel_DesignationId').val();
                BindEmployeeUploadDocFileTypes(employeeDesignationId, response);
                BindEmployeeUploads(response);
            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("DeleteEmployeeUpload Request Failed: " + err);
        });
        }
    }

    function BindEmployeeUploads(json){
        $('#tblEmployeeUploads tr').not(function () { return !!$(this).has('th').length; }).remove();

        if(json.length > 0){
            $('#divEmployeeUploads').show();
            for (var i = 0; i < json.length; i++) {
                var arrFileName = json[i].DocumentPath.split('/');
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append('<td>' + json[i].UploadType);
                tr.append('<td>' + arrFileName[1]);
                tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployeeUpload(" + i + ");'/></td>");
                $('#tblEmployeeUploads').append(tr);
            }
        }
        else{
            $('#divEmployeeUploads').hide();
        }
    }

    function BindEmployeeUploadDocFileTypes(employeeDesignationId, uploadedFilesJson){
        var arrFileTypes = ['Aadhar', 'PAN', 'Photo', 'Sign'];
        if(employeeDesignationId == 1 || employeeDesignationId == 4){
            // Gynecologist/Radiologist
            arrFileTypes.push('APMCR / TSMCR');
            arrFileTypes.push('Test Certificate');
        }
        else if(employeeDesignationId == 11){
            // Supporting Staff
            arrFileTypes.push('TS ParaCapstone Board Certificate');
        }
        else if(employeeDesignationId != '') {
            // Others
            arrFileTypes.push('Registration Certificate');
        }

        // Removing uploaded File Types
        for (var i = 0; i < uploadedFilesJson.length; i++) {
            arrFileTypes = jQuery.grep(arrFileTypes, function (value) {
                return value != uploadedFilesJson[i].UploadType;
            });
        }

        // Bind File Type dropdown
        $('#ddlUploadFileType').empty();
        $('#ddlUploadFileType').append($("<option/>").val('').text('Select File Type'));
        $.each(arrFileTypes, function (key, value) {
            $('#ddlUploadFileType').append($("<option/>").val(value).text(value));
        });
    }

    $('#PCPNDTModel_EmployeeModel_RegistrationNumber').on('blur', function(e){
        CheckforEmployeeRegistration(this.value);
    });

    function CheckforEmployeeRegistration(registrationNumber){
        var url = '@Url.Action("CheckforEmployeeRegistration", "License", new { Area = "User" })';
        var data = { registrationNumber: registrationNumber };
        var jqxhr = $.post(url, data, function () { })
.done(function (response) {
    var json;
    if (response instanceof Object)
        json = response;
    else
        json = $.parseJSON(response);
    if(json.EmployeeRegistrations >= 2){
        $('#btnAddEmployee').attr("disabled", "disabled");
        alert('An employee with same Registration Number already registered twice. \nYou can not register more than twice.');
    }
    else{
        $('#btnAddEmployee').removeAttr("disabled");
    }
})
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("CheckforEmployeeRegistration Request Failed: " + err);
});
    }

    $('#btnAddEmployee').on('click', function (e) {
        e.preventDefault();
        if ($('#formEmployee').valid()) {
            var uri = '@Url.Action("AddEmployeeAmendment", "Amendment", new { Area = "User" })';

            if (window.FormData !== undefined) {
                debugger;
                var SubDesignation = $('#ddlSubDesignation').val();
                var DesignationId = $('#PCPNDTModel_EmployeeModel_DesignationId').val();
                if((DesignationId == 1 || DesignationId == 4) && SubDesignation == 'Select'){
                    alert('Please Select Sub Designation');
                    return;
                }

                var employeeDocFileTypesCount = $('#ddlUploadFileType option').length;
                if(employeeDocFileTypesCount > 1)
                {
                    alert('Please upload all type of documents');
                    return;
                }

                var educationCertificates = $("#txtEmployeeEducationCertificates").get(0).files;
                if(educationCertificates == undefined)
                {
                    alert('Please upload Education Certificates');
                    return;
                }
                else{
                    // Check for Uploads Format
                    for (var i = 0; i < educationCertificates.length; i++) {
                        var extension =  educationCertificates[i].name.split('.').pop();
                        if(extension != "pdf"){
                            alert('Please upload only PDF documents (Education Certificates)');
                            return;
                        }
                    }

                    // Create FormData object
                    var fileData = new FormData();

                    fileData.append('Id', $('#PCPNDTModel_EmployeeModel_Id').val() == '' ? 0 : $('#PCPNDTModel_EmployeeModel_Id').val());
                    fileData.append('Name', $('#PCPNDTModel_EmployeeModel_Name').val());
                    fileData.append('DesignationId', $('#PCPNDTModel_EmployeeModel_DesignationId').val());
                    fileData.append('DesignationName', $("#PCPNDTModel_EmployeeModel_DesignationId option:selected").text());
                    fileData.append('SubDesignation', $('#ddlSubDesignation').val());
                    fileData.append('ExpYears', $('#PCPNDTModel_EmployeeModel_ExpYears').val());
                    fileData.append('ExpMonths', $('#PCPNDTModel_EmployeeModel_ExpMonths').val());
                    fileData.append('ExpDays', $('#PCPNDTModel_EmployeeModel_ExpDays').val());
                    fileData.append('Type', $('#PCPNDTModel_EmployeeModel_Type').val());
                    fileData.append('RegistrationNumber', $('#PCPNDTModel_EmployeeModel_RegistrationNumber').val());

                    for (var i = 0; i < educationCertificates.length; i++) {
                        fileData.append('educationCertificates', educationCertificates[i]);
                    }

                    $.ajax({
                        type: "POST",
                        url: uri,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {
                            // Clear controls
                            $('#PCPNDTModel_EmployeeModel_Name').val('');
                            $('#PCPNDTModel_EmployeeModel_DesignationId').val('');
                            $('#PCPNDTModel_EmployeeModel_Experience').val('');
                            $('#PCPNDTModel_EmployeeModel_ExpYears').val('');
                            $('#PCPNDTModel_EmployeeModel_ExpMonths').val('');
                            $('#PCPNDTModel_EmployeeModel_ExpDays').val('');
                            $('#PCPNDTModel_EmployeeModel_DesignationId').val('').trigger('change');
                            $('#PCPNDTModel_EmployeeModel_Type').val('').trigger('change');
                            $('#PCPNDTModel_EmployeeModel_RegistrationNumber').val('');
                            $('#PCPNDTModel_EmployeeModel_UploadedFilePath').val('');
                            $('#txtEmployeeEducationCertificates').val('');
                            $('.subdesignation').hide();

                            $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();

                            var json = response;

                            var tr;
                            //Append each row to html table
                            for (var i = 0; i < json.length; i++) {
                                var name = json[i].Name.toUpperCase();
                                if(json[i].SubDesignation != 'Select' && json[i].SubDesignation != null && json[i].SubDesignation != 'None')
                                    name = json[i].Name.toUpperCase() + ', ' + json[i].SubDesignation;

                                tr = $('<tr/>');
                                tr.append("<td>" + (i + 1) + "</td>");
                                tr.append("<td>" + name + "</td>");
                                tr.append("<td>" + json[i].DesignationName + "</td>");
                                tr.append("<td>" + json[i].ExpYears + " Years, " + json[i].ExpMonths + " Months, " + json[i].ExpDays + " Days</td>");
                                tr.append("<td>" + json[i].RegistrationNumber + "</td>");
                                tr.append("<td><input type='button' value='View Uploads' onclick='ViewEmployeeUploads(" + i + ");'/></td>");

                                if (json[i].Id!=0 && json[i].IsDeleted==false)
                                {
                                    tr.append("<td>Existing</td>");
                                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                                }
                                if (json[i].Id==0 && json[i].IsDeleted==false)
                                {
                                    tr.append("<td>New</td>");
                                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                                }
                                if (json[i].Id!=0 && json[i].IsDeleted==true)
                                {
                                    tr.append("<td>Deleted</td>");
                                    tr.append('<td></td>');
                                }

                                $('#tblEmployees').append(tr);
                            }
                            // CheckforEnableSubmit();
                        },
                        failure: function (response) {
                            // alert('failure: ' + response.d);
                        },
                        error: function (response) {
                            // alert('error: ' + response.d);
                        }
                    });
                }
            } else {
                alert("FormData is not supported.");
            }
        }
    });

    function ViewEmployeeUploads(index){
        var url = '@Url.Action("GetEmployeeUploads", "License", new { Area = "User" })';
        var data = {
            index: index,
            source: 'Amendment'
        };
        var jqxhr = $.post(url, data, function () { })
.done(function (response) {
    var json;
    if (response instanceof Object)
        json = response;
    else
        json = $.parseJSON(response);

    ShowEmployeeUploads(json);
})
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("GetEmployeeUploads Request Failed: " + err);
});
    }

    function DeleteEmployee(index) {
        if (confirm('Do you really want to delete this Employee?')) {
            var url = '@Url.Action("DeleteEmployeeAmendment", "Amendment", new { Area = "User" })';
            var data = { index: index };
            var jqxhr = $.post(url, data, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                var name = json[i].Name;
                if(json[i].SubDesignation != 'Select' && json[i].SubDesignation != null)
                    name = json[i].Name.toUpperCase() + ', ' + json[i].SubDesignation;

                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + name + "</td>");
                tr.append("<td>" + json[i].DesignationName + "</td>");
                tr.append("<td>" + json[i].ExpYears + " Years, " + json[i].ExpMonths + " Months, " + json[i].ExpDays + " Days</td>");
                tr.append("<td>" + json[i].RegistrationNumber + "</td>");
                tr.append("<td><input type='button' value='View Uploads' onclick='ViewEmployeeUploads(" + i + ");'/></td>");
                if(json[i].Id !=0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                else  if (json[i].Id==0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>New</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                else if (json[i].Id !=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");
                    tr.append('<td></td>');
                }

                $('#tblEmployees').append(tr);
            }
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }

        CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("Delete Employee Request Failed: " + err);
});
        }
    }


    $('#btnEmployeeSave').on('click', function (e) {

        e.preventDefault();
        var url = '@Url.Action("SaveEmployeeDetails", "Amendment", new { Area = "User" })';
        var jqxhr = $.post(url, function () { })
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        ShowModal(response);
        var transactionId = response.ReturnData.split(',')[0];
        BindEmployeesOnSave(transactionId);

        CheckforEnableSubmit();
    })
.fail(function (jqxhr, status, error) {
    var err = status + ", " + error;
    console.log("SaveEmployees Request Failed: " + err);
});
    });

    function BindEmployeesOnSave(transactionId){
        var url = '@Url.Action("GetEmployees", "Amendment", new { Area = "User" })';
        var data = {transactionId : transactionId};
        var jqxhr = $.post(url, data, function () { }, "json")
    .done(function (response) {
        var json;
        if (response instanceof Object)
            json = response;
        else
            json = $.parseJSON(response);

        $('#tblEmployees tr').not(function () { return !!$(this).has('th').length; }).remove();
        if (json != undefined && json.length != 0) {
            var tr;
            //Append each row to html table
            for (var i = 0; i < json.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");
                tr.append("<td>" + json[i].Name + "</td>");
                tr.append("<td>" + json[i].Designation + "</td>");
                tr.append("<td>" + json[i].Experience + "</td>");
                tr.append("<td>" + json[i].RegistrationNumber + "</td>");

                var path = json[i].UploadedFilePath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                if (json[i].Id!=0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                if (json[i].Id==0 && json[i].IsDeleted==false)
                {
                    tr.append("<td>New</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteEmployee(" + i + ");'/></td>");
                }
                if (json[i].Id!=0 && json[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");

                }


                $('#tblEmployees').append(tr);
            }

            $('#btnEmployeeSave').val('Update');
            $('#btnEmployeeSave').removeClass('btn-primary');
            $('#btnEmployeeSave').addClass('btn-success');
        }
        else if(json == undefined || json.length == 0){
            $('#btnEmployeeSave').val('Save');
            $('#btnEmployeeSave').removeClass('btn-success');
            $('#btnEmployeeSave').addClass('btn-primary');
        }
    })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("GetEquipments Request Failed: " + err);
        });

    }

    $('select[id^="PCPNDTModel_InstitutionModel_OwnershipTypeId"]').on('change', function(){
       

        if(this.value != ''){
            debugger;
            $('#divOwnershipUploads').show();
            var OwnershipModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
            if(this.value==OwnershipModel.OwnershipTypeId){
                $('#lnkAffidavit').show();
                $('#lnkArticlesOfAssociation').show();
                $('#tblStudyCertificates').show();
            }
            else{
                $('#lnkAffidavit').hide();
                $('#lnkArticlesOfAssociation').hide();
                $('#tblStudyCertificates').hide();
            }
            switch (this.value) {
                case '1':
                    {
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').hide();
                    }
                    break;
                case '2':
                case '3':
                case '5':{
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').show();
                    $('#spanArticlesofAssociation').text('Articles of Association');
                }
                    break;
                case '4':{
                    $('#divAffidavitFile').show();
                    $('#divStudyCertificateFiles').show();
                    $('#divAssociationFile').show();
                    $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
                }
                default:

            }
        }
        else{
            $('#divOwnershipUploads').hide();
        }
    });


    $('#btnInstitutionSave').on('click', function(e){

        e.preventDefault();
        var flag=true;
        var url = '@Url.Action("SaveInstitutionAmendment", "Amendment", new { Area = "User" })';
        if (window.FormData !== undefined) {



            // Create FormData object
            var fileData = new FormData();
            var ownershipId = $('#PCPNDTModel_InstitutionModel_OwnershipTypeId').val();
            fileData.append('Id', $('#PCPNDTModel_InstitutionModel_Id').val() == '' ? 0 : $('#PCPNDTModel_InstitutionModel_Id').val());
            fileData.append('OwnershipTypeId', ownershipId);
            fileData.append('InstitutionTypeId', $('#PCPNDTModel_InstitutionModel_InstitutionTypeId').val());
            fileData.append('TotalWorkArea', $('#PCPNDTModel_InstitutionModel_TotalWorkArea').val());
            fileData.append('OwnershipOthers', $('#PCPNDTModel_InstitutionModel_OwnershipOthers').val());
            fileData.append('InstitutionOthers', $('#PCPNDTModel_InstitutionModel_InstitutionOthers').val());

            if(ownershipId != ''){

                switch (ownershipId) {
                    case '1':
                        {
                            var affidavitFile = $('#affidavitFile').get(0).files[0];
                            var StudyCertificateFiles = $("#StudyCertificateFile").get(0).files;

                            if(affidavitFile != undefined)
                            {
                                if((affidavitFile.size/1000) > 4096)
                                {
                                    $('#errMsgAmendmentaffidavitFile').text('Please check File size, limit to below 3.8 MB');
                                    flag=false;
                                }
                                else
                                {
                                    $('#errMsgAmendmentaffidavitFile').text('');

                                }
                            }


                            if(StudyCertificateFiles != undefined)
                            {
                                for (var i = 0; i < StudyCertificateFiles.length; i++) {
                                    if((StudyCertificateFiles[i].size/1000) > 4096)
                                    {
                                        $('#errMsgAmendmentStudyCertificateFile').text('Please check File size, limit to below 3.8 MB');
                                         flag= false;
                                    }
                                    else
                                    {
                                        $('#errMsgAmendmentStudyCertificateFile').text('');
                                    }
                                }
                            }


                            fileData.append("affidavitFile", affidavitFile);
                            for (var i = 0; i < StudyCertificateFiles.length; i++) {
                                fileData.append("studyCertificateFiles", StudyCertificateFiles[i]);
                            }


                            if(affidavitFile == undefined || StudyCertificateFiles.length == 0){
                                var InstitutionModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
                                if(InstitutionModel.AffidavitDocPath == undefined){
                                    alert('Please upload required files');
                                    return false;
                                }

                            }
                        }
                        if(flag==false)
                        {
                            return ;
                        }

                        break;
                    case '2':
                    case '3':
                    case '4':
                    case '5':{
                        var affidavitFile = $('#affidavitFile').get(0).files[0];
                        var articleFile = $('#articlesofAssociationFile').get(0).files[0];
                        var StudyCertificateFiles = $("#StudyCertificateFile").get(0).files;

                        //File Upload size upto 4 MB
                        if(affidavitFile != undefined)
                        {
                            if((affidavitFile.size/1000) > 4096)
                            {
                                $('#errMsgAmendmentaffidavitFile').text('Please check File size, limit to below 3.8 MB');
                                flag=false;
                            }
                            else
                            {
                                $('#errMsgAmendmentaffidavitFile').text('');
                            }
                        }
                        if(articleFile != undefined)
                        {
                            if((articleFile.size/1000) > 4096)
                            {
                                $('#errMsgAmendmentarticlesofAssociationFile').text('Please check File size, limit to below 3.8 MB');
                                flag=false;
                            }
                            else
                            {
                                $('#errMsgAmendmentarticlesofAssociationFile').text('');
                            }
                        }


                        fileData.append("affidavitFile", affidavitFile);
                        fileData.append("articleFile", articleFile);
                        for (var i = 0; i < StudyCertificateFiles.length; i++) {
                            fileData.append("studyCertificateFiles", StudyCertificateFiles[i]);
                        }


                        if(affidavitFile == undefined || articleFile == undefined || StudyCertificateFiles.length == 0){
                            var InstitutionModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
                            if(InstitutionModel.AffidavitDocPath == undefined || InstitutionModel.ArticleDocPath == undefined
                                || InstitutionModel.StudyCertificateDocPaths.length == 0){
                                alert('Please upload required files');
                                return false;
                            }

                        }
                    }
                        if(flag==false)
                        {
                            return ;
                        }
                        break;
                }

            }

            $.ajax({
                type: "POST",
                url: url,
                data: fileData,
                contentType: false,
                processData: false,
                async: true,
                success: function (response) {
                    //var json;
                    //if (response instanceof Object)
                    //    json = response;
                    //else
                    //    json = $.parseJSON(response);

                    //   $('#InstitutionModel_Id').val(response.ReturnData.split(',')[0]);
                    ShowModal(response);

                    //if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                    //    $('#btnInstitutionSave').val('Update');
                    //    $('#btnInstitutionSave').removeClass('btn-success');
                    //    $('#btnInstitutionSave').addClass('btn-primary');
                    //}
                    //else if(response.ReturnData.split(',')[1] == 'Completed'){
                    //    $('#btnInstitutionSave').val('Update');
                    //    $('#btnInstitutionSave').removeClass('btn-primary');
                    //    $('#btnInstitutionSave').addClass('btn-success');
                    //}
                    //else if(response.ReturnData.split(',')[1] == 'Empty'){
                    //    $('#btnInstitutionSave').val('Save');
                    //    $('#btnInstitutionSave').removeClass('btn-success');
                    //    $('#btnInstitutionSave').addClass('btn-primary');
                    //}

                    //CheckforEnableSubmit();
                },
                failure: function (response) {
                    // alert('failure: ' + response.d);
                },
                error: function (response) {
                    // alert('error: ' + response.d);
                }
            });

        }
        else{
            // alert("FormData is not supported.");
        }

    });

    $('#btnInstitutionSaveOld').on('click', function (e) {
        e.preventDefault();
        if (true) {  // ($('#formOwnership').valid()) {
            var url = '@Url.Action("SaveInstitution", "License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#InstitutionModel_Id').val() == '' ? 0 : $('#InstitutionModel_Id').val(),
                    OwnershipTypeId: $('#InstitutionModel_OwnershipTypeId').val(),
                    InstitutionTypeId: $('#InstitutionModel_InstitutionTypeId').val(),
                    TotalWorkArea: $('#InstitutionModel_TotalWorkArea').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#InstitutionModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-success');
                $('#btnInstitutionSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-primary');
                $('#btnInstitutionSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnInstitutionSave').val('Save');
                $('#btnInstitutionSave').removeClass('btn-success');
                $('#btnInstitutionSave').addClass('btn-primary');
            }

            CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("SaveInstitution Request Failed: " + err);
    });
        }
    });

    $('#btnDeclarationSave').on('click', function (e) {

        e.preventDefault();
        if (true) {  // ($('#formDeclaration').valid()) {
            var url = '@Url.Action("SaveDeclarationDetails", "License", new { Area = "User" })';
            var data = {
                model: {
                    Id: $('#DeclarationModel_Id').val() == '' ? 0 : $('#DeclarationModel_Id').val(),
                    Name: $('#DeclarationModel_Name').val(),
                    SonOf: $('#DeclarationModel_SonOf').val(),
                    Age: $('#DeclarationModel_Age').val(),
                    ResidentOf: $('#DeclarationModel_ResidentOf').val(),
                    Designation: $('#DeclarationModel_Designation').val(),
                    Organization: $('#DeclarationModel_Organization').val(),
                    Date: $('#DeclarationModel_Date').val(),
                    Place: $('#DeclarationModel_Place').val(),
                    Signature: $('#DeclarationModel_Signature').val()
                }
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#DeclarationModel_Id').val(response.ReturnData.split(',')[0]);
            ShowModal(response);

            if(response.ReturnData.split(',')[1] == 'PartiallySaved'){
                $('#btnDeclarationSave').val('Update');
                $('#btnDeclarationSave').removeClass('btn-success');
                $('#btnDeclarationSave').addClass('btn-primary');
            }
            else if(response.ReturnData.split(',')[1] == 'Completed'){
                $('#btnDeclarationSave').val('Update');
                $('#btnDeclarationSave').removeClass('btn-primary');
                $('#btnDeclarationSave').addClass('btn-success');
            }
            else if(response.ReturnData.split(',')[1] == 'Empty'){
                $('#btnDeclarationSave').val('Save');
                $('#btnDeclarationSave').removeClass('btn-success');
                $('#btnDeclarationSave').addClass('btn-primary');
            }

            CheckforEnableSubmit();
        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Save Declaration Request Failed: " + err);
    });
        }
    });



    $('#btnLicenseSearch').click(function (e){

        e.preventDefault();
        var uri = '@Url.Action("SearchLicenseByLicenseNo", "Amendment", new { Area = "User" })';
        var data = {
            model: {
                LicenseNo: $('#PCPNDTModel_cancelLiceseModel_LicenseNo').val(),
            }
        }
        var jqxhr = $.post(uri, data, function () { }, 'json')
        .done(function (response) {
            console.log(response);
            if(response.NotificationType==undefined)
            {
                // Bind controls
                $("#lblLicenseNo").text(response.LicenseNo);
                $("#lblIsseuDate").text(ToJavaScriptDate(response.IsseuDate));
                $("#lblExpireDate").text(ToJavaScriptDate(response.ExpireDate));
            }
            else
            {
                // Clear controls
                $('#lblLicenseNo').text('');
                $('#lblIsseuDate').text('');
                $('#lblExpireDate').text('');
                ShowModal(response);  //error Message Display
            }

        })
        .fail(function (jqxhr, textStatus, error) {
            var err = textStatus + ", " + error;
            console.log("License Details Request Failed: " + err);
        });

    });

    //Amendament License Cancel
    $('#btnLicenseCancel').click(function (e){

        e.preventDefault();
        var uri = '@Url.Action("PCPNDTLicenseCancelAmendment", "Amendment", new { Area = "User" })';
        var data = {
            model: {
                LicenseNo: $('#PCPNDTModel_cancelLiceseModel_LicenseNo').val(),
                IsseuDate: $('#lblIsseuDate').html(),
                ExpireDate: $('#lblExpireDate').html(),
            }
        }
        var jqxhr = $.post(uri, data, function () { }, 'json')
        .done(function (response) {
            ShowModal(response);
        })
        .fail(function (jqxhr, textStatus, error) {
            var err = textStatus + ", " + error;
            console.log("License Details Request Failed: " + err);
        });

    });

    // Script for Edit form Begin
    $(function () {
        BindApplicantData();
        //BindEstablishmentData();
        BindFacilityData();
        BindTestsData();
        BindEquipmentData();
        BindFacilitiesData();
        BindEmployeeData();
        BindInstitutionData();
        BindDeclarationData();
        CheckforEnableSubmit();
    });

    function BindApplicantData(){
        var applicantModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.ApplicantModel));
        if(applicantModel.FormStatus != 0){
            $('#btnApplicantSave').val('Update');
            $('#btnApplicantSave').removeClass('btn-primary');
            $('#btnApplicantSave').addClass('btn-success');

            if(applicantModel.DistrictId > 0)
            {
                BindMandals('ApplicantModel_', applicantModel.DistrictId);
                setTimeout(
                   function(){
                       if(applicantModel.MandalId > 0){
                           $('#ApplicantModel_MandalId').val(applicantModel.MandalId).trigger('change');
                           BindVillages('ApplicantModel_', applicantModel.MandalId);
                           setTimeout(function(){
                               if(applicantModel.VillageId > 0){
                                   $('#ApplicantModel_VillageId').val(applicantModel.VillageId).trigger('change');
                               }
                           }, 2000);
                       }
                   }
                    , 2000);
            }
        }
    }



    function BindFacilityData(){
        var FacilityModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.FacilityModel));
        if(FacilityModel.FormStatus != 0){
            $('#btnFacilitySave').val('Update');
            $('#btnFacilitySave').removeClass('btn-primary');
            $('#btnFacilitySave').addClass('btn-success');

            if(FacilityModel.DistrictId > 0)
            {
                BindMandals('FacilityModel_', FacilityModel.DistrictId);
                setTimeout(
                   function(){
                       if(FacilityModel.MandalId > 0){
                           $('#FacilityModel_MandalId').val(FacilityModel.MandalId).trigger('change');
                           BindVillages('FacilityModel_', FacilityModel.MandalId);
                           setTimeout(function(){
                               if(FacilityModel.VillageId > 0){
                                   $('#FacilityModel_VillageId').val(FacilityModel.VillageId).trigger('change');
                               }
                           }, 2000);
                       }
                   }
                    , 2000);
            }

            // Bind checkboxes
            var facilities = FacilityModel.Faclities;
            if (facilities != undefined && facilities.length > 0) {
                var arrFacilities = facilities.split(',');
                for (var i = 0; i < arrFacilities.length; i++) {
                    $('input:checkbox[name="facilitytype"][value="' + arrFacilities[i] + '"]').iCheck('check');
                    ShowTestsFacilities(arrFacilities[i]);
                }
            }
        }
    }

    function BindTestsData(){
        var TestsModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.TestsModel));
        if(TestsModel.FormStatus != 0){
            $('#btnTestSave').val('Update');
            $('#btnTestSave').removeClass('btn-primary');
            $('#btnTestSave').addClass('btn-success');

            // Bind Invasive in Tests tab
            var invasives = TestsModel.InvasiveTests;
            if (invasives != undefined && invasives.length > 0) {
                var arrInvasives = invasives.split(',');
                for (var i = 0; i < arrInvasives.length; i++) {
                    $('input:checkbox[name="testinvasive"][value="' + arrInvasives[i] + '"]').iCheck('check');
                }
            }

            // Bind Non-Invasive in Tests tab
            var noninvasives = TestsModel.NonInvasiveTests;
            if (noninvasives != undefined && noninvasives.length > 0) {
                var arrNonInvasives = noninvasives.split(',');
                for (var i = 0; i < arrNonInvasives.length; i++) {
                    $('input:checkbox[name="testnoninvasive"][value="' + arrNonInvasives[i] + '"]').iCheck('check');
                }
            }
        }
    }

    function BindEquipmentData(){
        var EquipmentModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.EquipmentModel));
        if(EquipmentModel.FormStatus != 0){
            $('#btnEquipmentSave').val('Update');
            $('#btnEquipmentSave').removeClass('btn-primary');
            $('#btnEquipmentSave').addClass('btn-success');
        }
    }

    function BindFacilitiesData(){
        debugger;
        var FacilitiesModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.FacilitiesModel));
        if(FacilitiesModel.FormStatus != 0){
            $('#btnFacilicitesSave').val('Update');
            $('#btnFacilicitesSave').removeClass('btn-primary');
            $('#btnFacilicitesSave').addClass('btn-success');

            // Bind Tests in Facilities tab
            var tests = FacilitiesModel.Tests;
            if (tests != undefined && tests.length > 0) {
                var arrTests = tests.split(',');
                for (var i = 0; i < arrTests.length; i++) {
                    $('input:checkbox[name="facilitytest"][value="' + arrTests[i] + '"]').iCheck('check');
                }
            }

            // Bind Studies in Facilities tab
            var studies = FacilitiesModel.Studies;
            if (studies != undefined && studies.length > 0) {
                var arrStudies = studies.split(',');
                for (var i = 0; i < arrStudies.length; i++) {
                    $('input:checkbox[name="facilitystudies"][value="' + arrStudies[i] + '"]').iCheck('check');
                }
            }
        }
    }

    function BindEmployeeData(){
        var EmployeeModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.EmployeeModel));
        if(EmployeeModel.FormStatus != 0){
            $('#btnEmployeeSave').val('Update');
            $('#btnEmployeeSave').removeClass('btn-primary');
            $('#btnEmployeeSave').addClass('btn-success');
        }
    }

    function BindInstitutionData(){

        var InstitutionModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.InstitutionModel));
        //console.log(InstitutionModel);
        var documentJson = InstitutionModel.StudyCertificateDocPaths;


        if (documentJson != undefined) {
            $('#tblStudyCertificates tr').not(function () { return !!$(this).has('th').length; }).remove();
            var tr;
            //Append each row to html table
            for (var i = 0; i < documentJson.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");

                var path = documentJson[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", documentJson[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");

                if(documentJson[i].Id !=0 && documentJson[i].IsDeleted ==false)
                {
                    tr.append("<td>Existing</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");

                }

                if (documentJson[i].Id!=0 && documentJson[i].IsDeleted==true)
                {
                    tr.append("<td>Deleted</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");
                }

                $('#tblStudyCertificates').append(tr);
            }


            if(InstitutionModel.OwnershipTypeId > 0){
                $('#divOwnershipUploads').show();
                switch (InstitutionModel.OwnershipTypeId) {
                    case 1:
                        {
                            $('#divAffidavitFile').show();
                            $('#divStudyCertificateFiles').show();
                            $('#divAssociationFile').hide();
                        }
                        break;
                    case 2:
                    case 3:
                    case 5:{
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').show();
                        $('#spanArticlesofAssociation').text('Articles of Association');
                    }
                        break;
                    case 4:{
                        $('#divAffidavitFile').show();
                        $('#divStudyCertificateFiles').show();
                        $('#divAssociationFile').show();
                        $('#spanArticlesofAssociation').text('Articles of Association/Memorandum of Association');
                    }
                    default:

                }
            }
            else{
                $('#divOwnershipUploads').hide();
            }


            if(InstitutionModel.FormStatus != 0){
                $('#btnInstitutionSave').val('Update');
                $('#btnInstitutionSave').removeClass('btn-primary');
                $('#btnInstitutionSave').addClass('btn-success');
            }
        }
    }
    function DeleteStudyCertificate(documentId){

        if(confirm('Are you sure to delete this document?')){
            var url = '@Url.Action("DeleteStudyCertificate", "Amendment", new { Area = "User" })';
            var data = {
                id: documentId
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var documentJson;
            if (response instanceof Object)
                documentJson = response;
            else
                documentJson = $.parseJSON(response);

            console.log(documentJson);

            $('#tblStudyCertificates tr').not(function () { return !!$(this).has('th').length; }).remove();
            var tr;
            //Append each row to html table
            for (var i = 0; i < documentJson.length; i++) {
                tr = $('<tr/>');
                tr.append("<td>" + (i + 1) + "</td>");

                var path = documentJson[i].DocumentPath;
                var index = path.indexOf("/");
                var displayFileName = path.substring(index + 1, path.length);
                var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                fileLink = fileLink.replace("displaytext", displayFileName);
                fileLink = fileLink.replace("filepath", documentJson[i].UploadedFilePath);
                fileLink = fileLink.replace("downloadfilename", displayFileName);
                tr.append("<td>" + fileLink + "</td>");
                tr.append("<td><input type='button' value='Delete' onclick='DeleteStudyCertificate(" + documentJson[i].Id + ");'/></td>");

                $('#tblStudyCertificates').append(tr);
            }

        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("DeleteStudyCertificate Request Failed: " + err);
    });
        }
    }

    function BindDeclarationData(){
        var DeclarationModel = @Html.Raw(Json.Encode(Model.PCPNDTModel.DeclarationModel));
        if(DeclarationModel.FormStatus != 0){
            $('#btnDeclarationSave').val('Update');
            $('#btnDeclarationSave').removeClass('btn-primary');
            $('#btnDeclarationSave').addClass('btn-success');
        }
    }
    // Script for Edit form End

    function CheckforEnableSubmit(){
        if($('#btnApplicantSave').hasClass('btn-success') //&& $('#btnEstablishmentSave').hasClass('btn-success')
            && $('#btnFacilitySave').hasClass('btn-success') && $('#btnTestSave').hasClass('btn-success')
            && $('#btnEquipmentSave').hasClass('btn-success') && $('#btnFacilicitesSave').hasClass('btn-success')
        && $('#btnEmployeeSave').hasClass('btn-success') && $('#btnInstitutionSave').hasClass('btn-success')
        && $('#btnDeclarationSave').hasClass('btn-success')
            ){
            $('#btnPreview').removeAttr("disabled");
        }
        else
        {
            $('#btnPreview').attr('disabled', 'disabled');
        }
    }

</script>
<script>
    $(function () {
        DisableCheckboxes();
        debugger;
        if('@Model.FacilityAmendment' == 'True'){
            debugger;
            EnableFacility();
            EnableTests();
            EnableFacilities();

            // hide Tests and Facilities for Test submit buttons
            $('#btnTestSave').hide();
            $('#btnFacilicitesSave').hide();

        }
        if('@Model.TestsProceduresAmendment' == 'True'){
            EnableTests();
        }
        if('@Model.FacilitiesAmendment' == 'True'){
            EnableFacilities();
        }
    });

    function DisableCheckboxes(){
        $.each($("input[name='facilitytype']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        $.each($("input[name='testinvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        $.each($("input[name='testnoninvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        $.each($("input[name='facilitytest']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        $.each($("input[name='facilitystudies']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });
    }

    function EnableFacility(){
        $.each($("input[name='facilitytype']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('enable');
        });
    }

    function EnableTests(){
        $.each($("input[name='testinvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('enable');
        });

        $.each($("input[name='testnoninvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('enable');
        });
    }

    function EnableFacilities(){
        debugger;
        $.each($("input[name='facilitytest']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('enable');
        });

        $.each($("input[name='facilitystudies']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('enable');
        });
    }

    function BindFacility() {
        // Bind Facilities in Facility tab
        $.each($("input[name='facilitytype']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var facilities = '@Model.PCPNDTModel.FacilityModel.Faclities';
        if (facilities.length > 0) {
            var arrFacilities = facilities.split(',');
            for (var i = 0; i < arrFacilities.length; i++) {
                $('input:checkbox[name="facilitytype"][value="' + arrFacilities[i] + '"]').iCheck('check');
            }
        }
    }

    function BindTests() {
        // Bind Invasive in Tests tab
        $.each($("input[name='testinvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var invasives = '@Model.PCPNDTModel.TestsModel.InvasiveTests';
        //if (invasives.length > 0) {
        //    var arrInvasives = invasives.split(',');
        //    for (var i = 0; i < arrInvasives.length; i++) {
        //        $('input:checkbox[name="testinvasive"][value="' + arrInvasives[i] + '"]').iCheck('check');
        //    }
        //}

        // Bind Non-Invasive in Tests tab
        $.each($("input[name='testnoninvasive']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var noninvasives = '@Model.PCPNDTModel.TestsModel.NonInvasiveTests';
        //if (noninvasives.length > 0) {
        //    var arrNonInvasives = noninvasives.split(',');
        //    for (var i = 0; i < arrNonInvasives.length; i++) {
        //        $('input:checkbox[name="testnoninvasive"][value="' + arrNonInvasives[i] + '"]').iCheck('check');
        //    }
        //}
    }

    function BindFacilities() {
        debugger;
        // Bind Tests in Facilities tab
        $.each($("input[name='facilitytest']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var tests = '@Model.PCPNDTModel.FacilitiesModel.Tests';
        if (tests.length > 0) {
            var arrTests = tests.split(',');
            for (var i = 0; i < arrTests.length; i++) {
                $('input:checkbox[name="facilitytest"][value="' + arrTests[i] + '"]').iCheck('check');
            }
        }

        // Bind Studies in Facilities tab
        $.each($("input[name='facilitystudies']"), function () {
            $(this).parent('[class*="icheckbox"]').iCheck('disable');
        });

        var studies = '@Model.PCPNDTModel.FacilitiesModel.Studies';
        if (studies.length > 0) {
            var arrStudies = studies.split(',');
            for (var i = 0; i < arrStudies.length; i++) {
                $('input:checkbox[name="facilitystudies"][value="' + arrStudies[i] + '"]').iCheck('check');
            }
        }

        debugger;
    }

</script>
<script>

    ////var facilitytype = $("#facilitytype").val();
    //var res=  $("input[id='facilitytype']").is(':checked');
    //var result= this.val();
    //if(res==true)
    //{
    //    alert('Do you want to uncheck');
    //}
    $(function(){
        CheckboxLoad();

        $("[id$='facilitytype']").on('ifToggled', function (event) {
          
            if (this.checked)
            {
                alert('Do you want to check the facility');
                if(this.value==1 || this.value==6){
                    $('#fsFacilityRemarks').show();
                    $('#fsTestsRemarks').show();
                }
                else if(this.value==2 || this.value==3){
                    $('#fsNonInvasive').show();

                }
                else {
                    $('#fsInvasive').show();
                    $('#fsNonInvasive').show();
                    $('#fsTests').show();
                    $('#fsStudies').show();
                }


            }

            else  if(this.value==1 || this.value==6){
                alert('Do you want to uncheck the facility');
                $('#fsFacilityRemarks').hide();
                $('#fsTestsRemarks').hide();
            }
            else if(this.value==2 || this.value==3){
                alert('Do you want to uncheck the facility');
                $('#fsNonInvasive').hide();
                $('#fsFacilityRemarks').hide();

            }
            else {
                alert('Do you want to uncheck the facility');
                $('#fsInvasive').hide();
                $('#fsNonInvasive').hide();
                $('#fsTests').hide();
                $('#fsStudies').hide();
            }

            CheckboxLoad();

        });



    })


    function CheckboxLoad(){
       
        $("#tabFacility :checkbox:checked").each(function (i,item) {
         
            if(item.value==1 || item.value==6){
                $('#fsFacilityRemarks').show();
                $('#fsTestsRemarks').show();

            }
            else if(item.value==2 || item.value==3){
                $('#fsNonInvasive').show();
                $('#fsFacilityRemarks').show();

            }
            else if(item.value==4 || item.value==5) {
                
                $('#fsInvasive').show();
                $('#fsNonInvasive').show();
                $('#fsTests').show();
                $('#fsStudies').show();
            }


        })
    }



</script>
@*Equipment Uploads onchange events*@
<script>
    $('#PCPNDTModel_EquipmentModel_InvoicePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTInvoiceUpload').text('Please upload only PDF document');
            $('#PCPNDTModel_EquipmentModel_InvoicePath').val('');
        }
        else
            $('#errMsgPCPNDTInvoiceUpload').text('');
    });
    $('#PCPNDTModel_EquipmentModel_TransferCertificatePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTTCUpload').text('Please upload only PDF document');
            $('#PCPNDTModel_EquipmentModel_TransferCertificatePath').val('');
        }
        else
            $('#errMsgPCPNDTTCUpload').text('');
    });
    $('#PCPNDTModel_EquipmentModel_InstallationCerticatePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTICUpload').text('Please upload only PDF document');
            $('#PCPNDTModel_EquipmentModel_InstallationCerticatePath').val('');
        }
        else
            $('#errMsgPCPNDTICUpload').text('');
    });
    $('#PCPNDTModel_EquipmentModel_ImagePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="jpg" && File[0].name.split('.').pop().toLowerCase()!="jpeg"){
            $('#errMsgPCPNDTImageUpload').text('Please upload only PDF document');
            $('#PCPNDTModel_EquipmentModel_ImagePath').val('');
        }
        else
            $('#errMsgPCPNDTImageUpload').text('');
    });
    $('#PCPNDTModel_EquipmentModel_NocFilePath').change(function(){
        var File = this.files;

        if(File[0].name.split('.').pop().toLowerCase()!="pdf"){
            $('#errMsgPCPNDTNOCUpload').text('Please upload only PDF document');
            $('#PCPNDTModel_EquipmentModel_NocFilePath').val('');
        }
        else
            $('#errMsgPCPNDTNOCUpload').text('');
    });
</script>
