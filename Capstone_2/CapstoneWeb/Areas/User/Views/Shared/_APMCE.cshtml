@model Capstone.Models.APMCEViewModel

<div class="row">
    <div class="col-md-12" style="text-align:center;">
        <span style="font-size:large">Hospital (TAMCE ACT,2002)</span> <br />
        <span style="font-size:large;align-self:center; ">FORM-I </span><br />
        <span style="font-size:small;align-content:center; "> [See Rule 4(a)]</span>
    </div>
</div>
<div class="row"> 
    <div class="col-md-12">
        <!-- Custom Tabs -->
        <div class="nav-tabs-custom" id="tamceTabs">
            <ul class="nav nav-tabs">
                <li class="active" id="liRegistrationTab"><a href="#tabRegistration" data-toggle="tab">Registration</a></li>
                <li id="liAddressTab"><a href="#tabCorreespondingAddress" data-toggle="tab">Address</a></li>
                <li id="liTrustTab"><a href="#tabTrust" data-toggle="tab">Trust Details</a></li>
                <li id="liAccomudationTab"><a href="#tabAccommodation" data-toggle="tab">Accommodation</a></li>
                <li id="liEstablishmentTab"><a href="#tabEstablishment" data-toggle="tab">Establishment</a></li>
                <li id="liServicesTab"><a href="#tabServices" data-toggle="tab">Services Offered</a></li>
                <li id="liStaffTab"><a href="#tabStaffDetails" data-toggle="tab">Staff</a></li>
                <li id="liAPMCEEquipmentTab"><a href="#tabInfraStructure" data-toggle="tab">Equipment & Furniture</a></li>
                <li id="liFacilitiesTab"><a href="#tabFacilitiesAvailable" data-toggle="tab">Facilities Available</a></li>
                <li id="liAdditionalDocumentsTab"><a href="#tabUploadAdditionalDocuments" data-toggle="tab">Additional Documents</a></li>
                <li><a href="#tabCertificateFiles" data-toggle="tab" style="display:none;">Certificate's</a></li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="tabRegistration">
                    <form id="formRegistration">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Registration Details</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-10">
                                    Whether Registration is sought for Main Facility or branches also, if so details (separate application shall be submitted for each branch)
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.HiddenFor(model => model.RegistrationModel.Id)
                                    @Html.LabelFor(model => model.RegistrationModel.FacilityType, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-4">
                                    @Html.RadioButtonFor(model => model.RegistrationModel.FacilityType, "Main") Main
                                    @Html.RadioButtonFor(model => model.RegistrationModel.FacilityType, "Branch") Branch
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.FacilityType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.HospitalTypeId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.RegistrationModel.HospitalTypeId,
                                new SelectList(ViewBag.HospitalTypesList, "Id", "Name"), "Select HospitalType",
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.HospitalTypeId, "", new { @class = "text-danger" })
                                </div>
                                <div id="divClinicType" hidden>
                                    <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                        @Html.LabelFor(model => model.RegistrationModel.ClinicType, "Clinic Type", new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.RegistrationModel.ClinicType,
                                            new List<SelectListItem>() { new SelectListItem() { Text = "Select Clinic Type", Value="", Selected=true  } ,
                                                          new SelectListItem() {Text="Solo", Value="Solo"},
                                                          new SelectListItem() {Text="Poly", Value="Poly" }},
                                             new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.RegistrationModel.ClinicType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div id="divDentalLabType" hidden>
                                    <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                        @Html.LabelFor(model => model.RegistrationModel.ClinicType, "Lab Type", new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        <select id="ddlDentalLabType" class="form-control select2" style="width:100%;">
                                            <option value="">Select Lab Type</option>
                                            <option value="Basic Equipment">Basic Equipment</option>
                                            <option value="Hi-end Equipment">Hi-end Equipment</option>
                                        </select>
                                    </div>
                                </div>
                                <div id="divDiagnosticCenterType" hidden>
                                    <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                        @Html.LabelFor(model => model.RegistrationModel.ClinicType, "Lab Type", new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        <select id="ddlDiagnosticCenterType" class="form-control select2" style="width:100%;">
                                            <option value="">Select Diagnostic Type</option>
                                            <option value="Basic Equipment">Basic Equipment</option>
                                            <option value="Hi-end Equipment">Hi-end Equipment</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-2" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.Name, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.RegistrationModel.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 branchfields" style="padding-right: 0px; padding-left: 0px;" hidden>
                                    @Html.LabelFor(model => model.RegistrationModel.LicenseNumber, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3 branchfields" hidden>
                                    @Html.EditorFor(model => model.RegistrationModel.LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.LicenseNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="row" id="divBedStrengthSpeciality" hidden>
                                <div id="divBedStrength">
                                    <div class="col-md-2" style="padding-right: 0px; padding-left: 0px;">
                                        @Html.LabelFor(model => model.RegistrationModel.BedStrength, "Bed Strength", new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.RegistrationModel.BedStrength,
                                            new List<SelectListItem>() {
                                                new SelectListItem() { Text = "Select Bed Strength", Value = "", Selected = true } ,
                                                new SelectListItem() {Text="Less than 20 beds", Value="Less than 20 beds" },
                                                new SelectListItem() {Text="21 to 50 beds", Value="21 to 50 beds" },
                                                new SelectListItem() {Text="51 to 100 beds", Value="51 to 100 beds" },
                                                new SelectListItem() {Text="101 to 200 beds", Value="101 to 200 beds" },
                                                new SelectListItem() {Text="More than 200 beds", Value="More than 200 beds" }
                                            },
                                             new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.RegistrationModel.ClinicType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div id="divSpeciality">
                                    <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                        @Html.LabelFor(model => model.RegistrationModel.Speciality, new { @class = "control-label" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.RegistrationModel.Speciality,
                                            new List<SelectListItem>() { new SelectListItem() { Text = "Select Speciality", Value="",Selected=true } ,
                                                          new SelectListItem() {Text="Basic", Value="Basic" },
                                                          new SelectListItem() {Text="Multi", Value="Multi" },
                                                          new SelectListItem() {Text="Super", Value="Super" }},
                                             new { @class = "form-control select2", @style = "width:100%;" })
                                        @Html.ValidationMessageFor(model => model.RegistrationModel.ClinicType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.BuildingHeight, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.RegistrationModel.BuildingHeight, new { htmlAttributes = new { @class = "form-control numeric",@value="0" } })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.BuildingHeight, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-2">(in meters)</div>
                            </div>
                            <div class="row">
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.DistrictId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.RegistrationModel.DistrictId,
                                new SelectList(ViewBag.DistrictList, "Id", "Name"), "Select District",
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.DistrictId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.MandalId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.RegistrationModel.MandalId,
                                new List<SelectListItem>() { new SelectListItem() { Text = "Select Mandal", Value = "", Selected = true } },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.MandalId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.VillageId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.RegistrationModel.VillageId,
                                new List<SelectListItem>() { new SelectListItem() { Text = "Select Mandal", Value = "", Selected = true } },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.VillageId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.HouseNumber, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.RegistrationModel.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.HouseNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.StreetName, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.RegistrationModel.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.StreetName, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.RegistrationModel.PINCode, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.RegistrationModel.PINCode, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    @Html.ValidationMessageFor(model => model.RegistrationModel.PINCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" id="btnRegistrationClear" value="Clear" class="btn btn-default" />*@
                                    <input type="button" id="btnRegistrationSave" value="Save" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tabCorreespondingAddress">
                    <form id="formCorrespondingAddress">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Corresponding Address Details</legend>
                            <div class="row">
                                <div class="col-md-offset-1 col-md-10">
                                    Correspondent or any Authorised Person Details for Correspondence
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.CorrespondingAddress.Name, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.CorrespondingAddress.Id)
                                    @Html.EditorFor(model => model.CorrespondingAddress.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.CorrespondingAddress.DistrictId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.CorrespondingAddress.DistrictId,
    new SelectList(ViewBag.DistrictList, "Id", "Name"), "Select District",
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.DistrictId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.CorrespondingAddress.MandalId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.CorrespondingAddress.MandalId,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Mandal", Value = "", Selected = true } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.MandalId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.CorrespondingAddress.VillageId, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.CorrespondingAddress.VillageId,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Village", Value = "", Selected = true } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.VillageId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.CorrespondingAddress.HouseNumber, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.CorrespondingAddress.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.HouseNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.CorrespondingAddress.StreetName, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.CorrespondingAddress.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.StreetName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.CorrespondingAddress.PINCode, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.CorrespondingAddress.PINCode, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    @Html.ValidationMessageFor(model => model.CorrespondingAddress.PINCode, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-8 text-right">
                                    @*<input type="button" value="Clear" id="btnCorrespondingClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnCorrespondingSave" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tabTrust">
                    <form id="formTrust">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Trust Details</legend>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.TrustModel.Name, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.TrustModel.Id)
                                    @Html.EditorFor(model => model.TrustModel.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TrustModel.Name, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.TrustModel.DistrictId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.TrustModel.DistrictId,
    new SelectList(ViewBag.DistrictList, "Id", "Name"), "Select District",
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.TrustModel.DistrictId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.TrustModel.MandalId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.TrustModel.MandalId,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Mandal", Value = "", Selected = true } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.TrustModel.MandalId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.TrustModel.VillageId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.TrustModel.VillageId,
    new List<SelectListItem>() { new SelectListItem() { Text = "Select Village", Value = "", Selected = true } },
     new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.TrustModel.VillageId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.TrustModel.HouseNumber, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.TrustModel.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TrustModel.HouseNumber, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.TrustModel.StreetName, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.TrustModel.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TrustModel.StreetName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.TrustModel.PINCode, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.TrustModel.PINCode, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    @Html.ValidationMessageFor(model => model.TrustModel.PINCode, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.TrustModel.EstablishedDate, new { @class = "control-label" })
                                </div>
                                @if (Model.TrustModel.Id == 0)
                                {
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.TrustModel.EstablishedDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = @System.DateTime.Today.ToString("dd/MM/yyyy") } })

                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.TrustModel.EstablishedDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.TrustModel.EstablishedDate.ToString("dd/MM/yyyy") } })

                                    </div>
                                }

                                <div class="col-md-4 text-right">
                                    @*<input type="button" value="Clear" id="btnTrustClear" class="btn btn-default" />*@
                                    <input type="button" value="Save" id="btnTrustSave" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>
                <!-- /.tab-pane -->
                <div class="tab-pane" id="tabInfraStructure">
                    <form id="formInfraStructure">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">InfraStructure Details</legend>
                            <div class="row" hidden>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.InfraStructure.Name, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.InfraStructure.Id)
                                    @Html.EditorFor(model => model.InfraStructure.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.InfraStructure.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                @**@
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.InfraStructure.EquipmentId, "Equipment", new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.InfraStructure.EquipmentId,
                                new List<SelectListItem>() { new SelectListItem() { Text = "Select Equipment", Value = "", Selected = true } },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.InfraStructure.EquipmentId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.InfraStructure.Quantity, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.InfraStructure.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.InfraStructure.Quantity, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.InfraStructure.ItemModel, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.InfraStructure.ItemModel, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.InfraStructure.ItemModel, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.InfraStructure.Remarks, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.InfraStructure.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.InfraStructure.Remarks, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; padding-left: 0px;">
                                    @Html.LabelFor(model => model.InfraStructure.UploadedFilePath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.InfraStructure.UploadedFilePath, new { @type = "file",
                                   @class = "fileUpload" })
                                    <span id="spnInfraDocMsg" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                </div>
                                <div class="col-md-1 text-right">
                                    <input type="button" value="Add" id="btnAddInfraStructure" class="btn btn-default" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12 text-center">
                                    <label id="lblServicesOfferedTabEditMode" style="font-size:22px;color:red;" />
                                </div>
                            </div>

                        </fieldset>

                    </form>
                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Items List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblInfraStructure" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th style="display:none;">EquipmentId</th>
                                                <th>Equipment Name</th>
                                                <th>Quantity</th>
                                                <th>Model</th>
                                                <th>Remarks</th>
                                                <th>Uploaded File</th>
                                                <th></th>
                                            </tr>
                                            @if (Model.InfraStructureList != null)
                                            {
                                                for (int i = 0; i < Model.InfraStructureList.Count; i++)
                                                {
                                                    <tr>
                                                        <td> @Convert.ToInt32(@i + 1)</td>
                                                        <td style="display:none;">@Model.InfraStructureList[i].EquipmentId</td>
                                                        <td>@Model.InfraStructureList[i].Name</td>
                                                        <td>@Model.InfraStructureList[i].Quantity</td>
                                                        <td>@Model.InfraStructureList[i].ItemModel</td>
                                                        <td>@Model.InfraStructureList[i].Remarks</td>
                                                        <td>
                                                            @if (Model.InfraStructureList[i].UploadedFilePath != null)
                                                            {
                                                                var addressindex = Model.InfraStructureList[i].UploadedFilePath.LastIndexOf("/");
                                                                var addressfileName = Model.InfraStructureList[i].UploadedFilePath.Substring(addressindex + 1);
                                                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                        new { Area = "", path = Model.InfraStructureList[i].UploadedFilePath, downloadName = addressfileName }, null);
                                                            }
                                                        </td>
                                                        <td><input type='button' value='Delete' onclick='DeleteInfraStructure(@i);' /></td>
                                                    </tr>
                                                }
                                            }
                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>
                    <div class="row">
                        <div class="col-md-12 text-right">
                            @*<input type="button" value="Clear" id="btnInfraStructureClear" class="btn btn-default" />*@
                            <input type="button" value="Save" id="btnInfraStructureSave" class="btn btn-primary" />
                        </div>
                    </div>

                </div>

                <div id="tabAccommodation" class="tab-pane">
                    <form id="formAccommodation">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Accommodation Details</legend>
                            <div class="row">
                                <div class="col-md-2" style="padding-left: 0px;  padding-right: 0px;">
                                    @Html.LabelFor(model => model.Accommadation.EstablishementType, "Establishment Owned by", new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.Accommadation.Id)
                                    @Html.DropDownListFor(model => model.Accommadation.EstablishementType,
                                new List<SelectListItem> {
                                    new SelectListItem {Text = "Select", Value = "", Selected = true },
                                    new SelectListItem {Text = "Own", Value = "1" },
                                    new SelectListItem {Text = "Rent", Value = "2" },
                                    new SelectListItem {Text = "Lease", Value = "3" }
                                },
                                new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.Accommadation.EstablishementType, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-md-1" style="padding-left: 0px;  padding-right: 0px;">
                                    @Html.LabelFor(model => model.Accommadation.FromDate, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>

                                @if (Model.Accommadation.Id == 0)
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Accommadation.FromDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = @System.DateTime.Today.ToString("dd/MM/yyyy") } })
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Accommadation.FromDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.Accommadation.FromDate.ToString("dd/MM/yyyy") } })
                                    </div>
                                }
                                <div class="col-md-1" style="padding-left: 0px;  padding-right: 0px;">
                                    @Html.LabelFor(model => model.Accommadation.ToDate, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                @if (Model.Accommadation.Id == 0)
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Accommadation.ToDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = @System.DateTime.Today.ToString("dd/MM/yyyy") } })
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.Accommadation.ToDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.Accommadation.ToDate.ToString("dd/MM/yyyy") } })
                                    </div>
                                }

                            </div>
                            <div class="row" id="divAccommodationUpload" hidden>
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.Accommadation.UploadedFilePath, "Upload File", new { @class = "control-label", @id = "lblAccommodationLabel" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.Accommadation.UploadedFilePath, new { @class = "", type = "file" })
                                    <span id="errMsgAccommadationUpload" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                    @if (!string.IsNullOrEmpty(Model.Accommadation.UploadedFilePath))
                                    {
                                        var addressindex = Model.Accommadation.UploadedFilePath.LastIndexOf("/");
                                        var addressfileName = Model.Accommadation.UploadedFilePath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                new { Area = "", path = Model.Accommadation.UploadedFilePath, downloadName = addressfileName },
                                null
                                );
                                    }
                                    @*@Html.ValidationMessageFor(model => model.Accommadation.UploadedFilePath, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" id="btnAccommodationClear" value="Clear" class="btn btn-default" />*@
                                    <input type="button" id="btnAccommodationSave" value="Save" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>

                <div id="tabEstablishment" class="tab-pane">
                    <form id="formEstablishment">
                        <div class="row">
                            <div class="col-md-2">
                                @Html.HiddenFor(model => model.EstablishmentModel.Id)
                                @Html.LabelFor(model => model.EstablishmentModel.EstablishmentDate, new { @class = "control-label" })
                                <span style="color:red">*</span>
                            </div>
                            @if (Model.Accommadation.Id == 0)
                            {
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.EstablishmentModel.EstablishmentDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = @System.DateTime.Today.ToString("dd/MM/yyyy") } })
                                    @*@Html.ValidationMessageFor(model => model.EstablishmentModel.EstablishmentDate, "", new { @class = "text-danger" })*@
                                </div>
                            }
                            else
                            {
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.EstablishmentModel.EstablishmentDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.EstablishmentModel.EstablishmentDate.ToString("dd/MM/yyyy") } })

                                </div>
                            }

                        </div>
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Total Area of Establishment</legend>
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.EstablishmentModel.OpenArea, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.EstablishmentModel.OpenArea, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    @Html.ValidationMessageFor(model => model.EstablishmentModel.OpenArea, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.EstablishmentModel.OpenAreaFilePath, new { @class = "", type = "file" })
                                    <span id="errMsgOpenAreaFilePath" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                    @if (!string.IsNullOrEmpty(Model.EstablishmentModel.OpenAreaFilePath))
                                    {
                                        var addressindex = Model.EstablishmentModel.OpenAreaFilePath.LastIndexOf("/");
                                        var addressfileName = Model.EstablishmentModel.OpenAreaFilePath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.EstablishmentModel.OpenAreaFilePath, downloadName = addressfileName },
                            null
                            );
                                    }
                                    @*@Html.ValidationMessageFor(model => model.EstablishmentModel.OpenAreaFilePath, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.LabelFor(model => model.EstablishmentModel.ConstructionArea, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-2">
                                    @Html.EditorFor(model => model.EstablishmentModel.ConstructionArea, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    @Html.ValidationMessageFor(model => model.EstablishmentModel.ConstructionArea, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.EstablishmentModel.ConstructionAreaFilePath, new { @class = "", type = "file" })
                                    <span id="errMsgConstructionAreaFilePath" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                    @if (!string.IsNullOrEmpty(Model.EstablishmentModel.ConstructionAreaFilePath))
                                    {
                                        var addressindex = Model.EstablishmentModel.ConstructionAreaFilePath.LastIndexOf("/");
                                        var addressfileName = Model.EstablishmentModel.ConstructionAreaFilePath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.EstablishmentModel.ConstructionAreaFilePath, downloadName = addressfileName },
                            null
                            );
                                    }
                                    @*@Html.ValidationMessageFor(model => model.EstablishmentModel.ConstructionAreaFilePath, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                        </fieldset>
                        <div class="row">
                            <div class="col-md-12 text-right">
                                @*<input type="button" id="btnEstablishmentClear" value="Clear" class="btn btn-default" />*@
                                <input type="button" id="btnEstablishmentSave" value="Save" class="btn btn-primary" />
                            </div>
                        </div>
                    </form>
                </div>

                <div id="tabServices" class="tab-pane">
                    <form id="formServices">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Service Offered Details</legend>
                            <div class="row">
                                @*<div class="col-md-2">
                            @Html.LabelFor(model => model.OfferedServices.BedStrength, new { @class = "control-label" })
                            <span style="color:red">*</span>
                        </div>
                        <div class="col-md-2">
                            @Html.EditorFor(model => model.OfferedServices.BedStrength, new { htmlAttributes = new { @class = "form-control numeric" } })
                            @Html.ValidationMessageFor(model => model.OfferedServices.BedStrength, "", new { @class = "text-danger" })
                        </div>*@
                                <div class="col-md-2">
                                    @Html.HiddenFor(model => model.OfferedServices.Id)
                                    @Html.LabelFor(model => model.OfferedServices.OfferedServices, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.OfferedServices.OfferedServices,
                            new List<SelectListItem> {  },
                            new { @class = "form-control select2 multiselect", @multiple = "multiple", @style = "width:100%;", data_placeholder = "Select a Service" })
                                    @Html.ValidationMessageFor(model => model.OfferedServices.OfferedServices, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-center">
                                    <label id="lblRegistrationTabEditMode" style="font-size:22px;color:red;" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" id="btnOfferedServicesClear" value="Clear" class="btn btn-default" />*@
                                    <input type="button" id="btnOfferedServicesSave" value="Save" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>

                <div id="tabStaffDetails" class="tab-pane">
                    <form id="formStaffDetails">
                        <div class="row">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.StaffDetails.StaffDesignation, "Employee Type", new { @class = "control-label" })
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-3">
                                @Html.HiddenFor(model => model.StaffDetails.Id)
                                @Html.DropDownListFor(model => model.StaffDetails.StaffDesignation,
                            new List<SelectListItem> {
                                new SelectListItem {Text = "Select", Value = "", Selected = true },
                                new SelectListItem {Text = "Doctors", Value = "Doctors" },
                                new SelectListItem {Text = "Nursing Staff", Value = "Nursing Staff" },
                                new SelectListItem {Text = "Admin Staff", Value = "Admin Staff" },
                                new SelectListItem {Text = "Para Capstone Staff", Value = "Para Capstone Staff" },
                                new SelectListItem {Text = "Supporting Staff", Value = "Supporting Staff" },
                                new SelectListItem {Text = "Specialists", Value = "Specialists" }

                            },
                            new { @class = "form-control select2", @style = "width:100%;" })
                                @Html.ValidationMessageFor(model => model.StaffDetails.StaffDesignation, "", new { @class = "text-danger" })
                            </div>
                            <div class="nonsupportingstaff supportingstaff specialists Adminstaff">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.StaffDetails.Name, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.StaffDetails.Name, new { htmlAttributes = new { @class = "form-control " } })
                                    @Html.ValidationMessageFor(model => model.StaffDetails.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="nonsupportingstaff specialists Adminstaff">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.StaffDetails.RegistrationNumber, new { @class = "control-label", @id = "lblStaffRegiNumber" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.StaffDetails.RegistrationNumber, new { htmlAttributes = new { @class = "form-control " } })
                                    @Html.ValidationMessageFor(model => model.StaffDetails.RegistrationNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="supportingstaff">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.StaffDetails.PhoneNumber, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.StaffDetails.PhoneNumber, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    @Html.ValidationMessageFor(model => model.StaffDetails.PhoneNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="specialists">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.StaffDetails.Speciality, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(model => model.StaffDetails.Speciality,//SpecialtyId, CT Surgeon
                                                                                                 // new List<SelectListItem>() { new SelectListItem() { Text = "Select Speciality", Value = "", Selected = true } },
                           new List<SelectListItem> {
                                new SelectListItem {Text = "Select Speciality", Value = "", Selected = true },
                                new SelectListItem {Text = "Cardiologist", Value = "Cardiologist" },
                                new SelectListItem {Text = "Dermatologist", Value = "Dermatologist" },
                                new SelectListItem {Text = "Gastroenterologist", Value = "Gastroenterologist" },
                                new SelectListItem {Text = "Gynecologist", Value = "Gynecologist" },


                                new SelectListItem {Text = "CT Surgeon", Value = "CT Surgeon" },
                                new SelectListItem {Text = "Pulmonologist", Value = "Pulmonologist" },
                                new SelectListItem {Text = "Neonatologist & Paediatrician", Value = "Neonatologist & Paediatrician" },
                                new SelectListItem {Text = "Radition Oncologist", Value = "Radition Oncologist" },
                                new SelectListItem {Text = "Orthopaedician", Value = "Orthopaedician" },
                                new SelectListItem {Text = "Gastro Surgeon", Value = "Gastro Surgeon" },
                                new SelectListItem {Text = "Genreal Surgeon", Value = "Genreal Surgeon" },
                                new SelectListItem {Text = "Neuro Physician", Value = "Neuro Physician" },
                                new SelectListItem {Text = "Neuro Surgeon", Value = "Neuro Surgeon" },
                                new SelectListItem {Text = "Spine Surgeon", Value = "Spine Surgeon" },
                                new SelectListItem {Text = "Plastic Surgeon", Value = "Plastic Surgeon" },
                                new SelectListItem {Text = "ENT Surgeon", Value = "ENT Surgeon" },
                                new SelectListItem {Text = "Nephrologist", Value = "Nephrologist" },
                                new SelectListItem {Text = "Vascular Surgeon", Value = "Vascular Surgeon" },
                                new SelectListItem {Text = "Endocrinologist", Value = "Endocrinologist" },
                                new SelectListItem {Text = "Rheumatologist", Value = "Rheumatologist" },
                                new SelectListItem {Text = "Surgical Oncologist", Value = "Surgical Oncologist" },
                                new SelectListItem {Text = "Capstone Oncologist", Value = "Capstone Oncologist" },
                                new SelectListItem {Text = "Haemato Oncologist", Value = "Haemato Oncologist" },
                                new SelectListItem {Text = "Urologist", Value = "Urologist" },
                                new SelectListItem {Text = "Opthalmologist", Value = "Opthalmologist" },
                                new SelectListItem {Text = "Radiologist", Value = "Radiologist" },
                                new SelectListItem {Text = "Psychiatrist", Value = "Psychiatrist" },
                                new SelectListItem {Text = "Nuclear Medicine", Value = "Nuclear Medicine" },
                                new SelectListItem {Text = "Intensivist", Value = "Intensivist" }
                            },
                            new { @class = "form-control select2", @style = "width:100%;" })
                                    @Html.ValidationMessageFor(model => model.StaffDetails.Speciality, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="supportingstaff">
                                <div class="col-md-1">
                                    @Html.LabelFor(model => model.StaffDetails.Email, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.StaffDetails.Email, new { htmlAttributes = new { @class = "form-control " } })
                                    @Html.ValidationMessageFor(model => model.StaffDetails.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-1 text-right nonsupportingstaff supportingstaff specialists Adminstaff">
                                <input type="button" value="Add" id="btnAddStaffDetails" class="btn btn-default" />
                            </div>

                        </div>

                        <div class="row nonsupportingstaff specialists Adminstaff">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.StaffDetails.UploadedFilePath, new { @class = "control-label" })
                                <span style="color:red">*</span>
                            </div>
                            <div class="col-md-7">
                                @Html.TextBoxFor(model => model.StaffDetails.UploadedFilePath, new { @type = "file" })
                                <span id="errMsgStaffUpload" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                @if (!string.IsNullOrEmpty(Model.StaffDetails.UploadedFilePath))
                                {
                                    var addressindex = Model.StaffDetails.UploadedFilePath.LastIndexOf("/");
                                    var addressfileName = Model.StaffDetails.UploadedFilePath.Substring(addressindex + 1);
                                    @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                            new { Area = "", path = Model.StaffDetails.UploadedFilePath, downloadName = addressfileName },
                            null
                            );
                                }

                                @Html.ValidationMessageFor(model => model.StaffDetails.UploadedFilePath, "", new { @class = "text-danger" })

                            </div>

                        </div>
                    </form>

                    <fieldset class="scheduler-border">
                        <legend class="scheduler-border">Items List</legend>
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="box">
                                    <div class="box-body table-responsive no-padding">
                                        <table id="tblStaffdetails" class="table table-hover">
                                            <tr>
                                                <th>S.No.</th>
                                                <th>Designation</th>
                                                <th>Name</th>
                                                <th>RegistrationNo</th>
                                                <th>Uploaded File</th>
                                                <th>Email</th>
                                                <th>Mobile</th>
                                                <th>Speciality</th>
                                                <th></th>
                                            </tr>
                                            @if (Model.StaffDetailsList != null)
                                            {
                                                for (int i = 0; i < Model.StaffDetailsList.Count; i++)
                                                {
                                                    <tr>
                                                        <td> @Convert.ToInt32(@i + 1)</td>
                                                        <td>@Model.StaffDetailsList[i].StaffDesignation</td>
                                                        <td>@Model.StaffDetailsList[i].Name</td>
                                                        <td>@Model.StaffDetailsList[i].RegistrationNumber</td>
                                                        <td>
                                                            @if (!string.IsNullOrEmpty(Model.StaffDetailsList[i].UploadedFilePath))
                                                            //  @if (Model.StaffDetailsList[i].UploadedFilePath != null || Model.StaffDetailsList[i].UploadedFilePath != "")
                                                            {
                                                                var addressindex = Model.StaffDetailsList[i].UploadedFilePath.LastIndexOf("/");
                                                                var addressfileName = Model.StaffDetailsList[i].UploadedFilePath.Substring(addressindex + 1);
                                                                @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                                    new { Area = "", path = Model.StaffDetailsList[i].UploadedFilePath, downloadName = addressfileName }, null);
                                                            }
                                                        </td>
                                                        <td>@Model.StaffDetailsList[i].Email</td>
                                                        <td>@Model.StaffDetailsList[i].PhoneNumber</td>
                                                        <td>@Model.StaffDetailsList[i].Speciality</td>
                                                        <td><input type='button' value='Delete' onclick='DeleteStaffDetails(@i);' /></td>
                                                    </tr>
                                                }
                                            }
                                        </table>
                                    </div>
                                    <!-- /.box-body -->
                                </div>
                                <!-- /.box -->
                            </div>
                        </div>
                    </fieldset>

                    <div class="row">
                        <div class="col-md-12 text-right">
                            @*<input type="button" id="btnStaffDetailsClear" value="Clear" class="btn btn-default" />*@
                            <input type="button" id="btnStaffDetailsSave" value="Save" class="btn btn-primary" />
                        </div>
                    </div>
                </div>

                <div id="tabFacilitiesAvailable" class="tab-pane">
                    <form id="formFacilitiesAvailable">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Facilities Available Details</legend>
                            <div class="row">
                                <div class="col-md-6 text-right">
                                    @Html.LabelFor(model => model.FacilitiesAvailableModel.HasLaborRoom, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.HiddenFor(model => model.FacilitiesAvailableModel.Id)
                                    @Html.RadioButtonFor(model => model.FacilitiesAvailableModel.HasLaborRoom, "true") Yes
                                    @Html.RadioButtonFor(model => model.FacilitiesAvailableModel.HasLaborRoom, "false", new { @checked = "checked" }) No
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 text-right">
                                    @Html.LabelFor(model => model.FacilitiesAvailableModel.HasOperationTheater, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.RadioButtonFor(model => model.FacilitiesAvailableModel.HasOperationTheater, "true") Yes
                                    @Html.RadioButtonFor(model => model.FacilitiesAvailableModel.HasOperationTheater, "false", new { @checked = "checked" }) No
                                </div>
                                <div id="divOpearationTheatre" hidden>
                                    <div class="col-md-1 text-left">
                                        @Html.LabelFor(model => model.FacilitiesAvailableModel.OperationTheatreCount, "Count", new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-2 text-left">
                                        @Html.EditorFor(model => model.FacilitiesAvailableModel.OperationTheatreCount, new { htmlAttributes = new { @class = "form-control numeric" } })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 text-right">
                                    @Html.LabelFor(model => model.FacilitiesAvailableModel.HasDiagnosticFacility, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                <div class="col-md-3">
                                    @Html.RadioButtonFor(model => model.FacilitiesAvailableModel.HasDiagnosticFacility, "true") Yes
                                    @Html.RadioButtonFor(model => model.FacilitiesAvailableModel.HasDiagnosticFacility, "false", new { @checked = "checked" }) No
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-1 text-right">
                                    @Html.CheckBoxFor(model => model.FacilitiesAvailableModel.HasDeclarationStamp)
                                </div>
                                <div class="col-md-8">
                                    @Html.LabelFor(model => model.FacilitiesAvailableModel.HasDeclarationStamp, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                            </div>
                            <div class="row" id="divDeclarationStampDetails" hidden>
                                <div class="col-md-6">
                                    @Html.LabelFor(model => model.FacilitiesAvailableModel.DeclarationStampFilePath, new { @class = "control-label" })
                                </div>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.FacilitiesAvailableModel.DeclarationStampFilePath, new { @class = "", type = "file" })
                                    <span id="errMsgDeclarationStamp" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                    @if (!string.IsNullOrEmpty(Model.FacilitiesAvailableModel.DeclarationStampFilePath))
                                    {
                                        var addressindex = Model.FacilitiesAvailableModel.DeclarationStampFilePath.LastIndexOf("/");
                                        var addressfileName = Model.FacilitiesAvailableModel.DeclarationStampFilePath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                        new { Area = "", path = Model.FacilitiesAvailableModel.DeclarationStampFilePath, downloadName = addressfileName },
                        null
                        );
                                    }

                                    @Html.ValidationMessageFor(model => model.FacilitiesAvailableModel.DeclarationStampFilePath, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.FacilitiesAvailableModel.OtherInformationDescription, new { @class = "control-label" })
                                </div>
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.FacilitiesAvailableModel.OtherInformationDescription, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FacilitiesAvailableModel.OtherInformationDescription, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(model => model.FacilitiesAvailableModel.OtherInformationDocumentPath, new { @class = "", type = "file" })
                                    <span id="errMsgOtherInformationDocument" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image file & File Size must below 3 MB)</span>
                                    @if (!string.IsNullOrEmpty(Model.FacilitiesAvailableModel.OtherInformationDocumentPath))
                                    {
                                        var addressindex = Model.FacilitiesAvailableModel.OtherInformationDocumentPath.LastIndexOf("/");
                                        var addressfileName = Model.FacilitiesAvailableModel.OtherInformationDocumentPath.Substring(addressindex + 1);
                                        @Html.ActionLink(addressfileName, "DownloadFile", "Generic",
                        new { Area = "", path = Model.FacilitiesAvailableModel.OtherInformationDocumentPath, downloadName = addressfileName },
                        null
                        );
                                    }
                                    @Html.ValidationMessageFor(model => model.FacilitiesAvailableModel.OtherInformationDocumentPath, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    Enclosures Count
                                </div>
                                <div class="col-md-2">
                                    @Html.TextBoxFor(model => model.FacilitiesAvailableModel.EnclosureCnt, new { disabled = "true" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    @*<input type="button" id="btnFacilitiesAvailableClear" value="Clear" class="btn btn-default" />*@
                                    <input type="button" id="btnFacilitiesAvailableSave" value="Save" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>


                <div id="tabUploadAdditionalDocuments" class="tab-pane">
                    <form id="formUploadAdditionalDocuments">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border"><b>Additional Documents</b></legend>
                            @Html.HiddenFor(model => model.AdditionalDocumentsModel.Id)
                            <span id="errMsgAdditionalDocuments" class="error" style="display: initial;color:red;">(Upload pdf/doc/Image files & Files Size must below 3MB)</span>
                            <div class="row" id="divUploadBioCapstoneWastageClearanceFrom">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath, new { @class = "control-label", @id = "lblBioCapstoneClearanceForm" })
                                </div>
                                <div class="col-md-3" style="margin-left:80px;">
                                    @Html.TextBoxFor(model => model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                    @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath, "", new { @class = "text-danger" })

                                    @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath))
                                    {
                                        var layoutindex = Model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath.LastIndexOf("/");
                                        var layoutfileName = Model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath.Substring(layoutindex + 1);
                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
     new { Area = "", path = Model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath, downloadName = layoutfileName }, null);
                                    }
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.AdditionalDocumentsModel.BioCapstoneValidupto, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                @if (string.IsNullOrEmpty(Model.AdditionalDocumentsModel.BioCapstoneWastageClearanceFromFilePath))
                                {
                                    <div class="col-md-2 text-left">
                                        @Html.EditorFor(model => model.AdditionalDocumentsModel.BioCapstoneValidupto, new { htmlAttributes = new { @class = "form-control datepicker", @Value = "" } })
                                        @*@System.DateTime.Today.ToString("dd/MM/yyyy")*@
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-2 text-left">
                                        @Html.EditorFor(model => model.AdditionalDocumentsModel.BioCapstoneValidupto, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.AdditionalDocumentsModel.BioCapstoneValidupto.ToString("dd/MM/yyyy") } })
                                    </div>
                                }
                            </div>

                            <div class="row" id="divUploadPollutionAuthorityLetterByPCB">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath, new { @class = "control-label", @id = "lblPollutionAuthorityLetterByPC" })
                                </div>
                                <div class="col-md-3" style="margin-left:80px;">
                                    @Html.TextBoxFor(model => model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                    @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath, "", new { @class = "text-danger" })

                                    @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath))
                                    {
                                        var layoutindex = Model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath.LastIndexOf("/");
                                        var layoutfileName = Model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath.Substring(layoutindex + 1);
                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
     new { Area = "", path = Model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath, downloadName = layoutfileName }, null);
                                    }
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.AdditionalDocumentsModel.PollutionAuthorityValidupto, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                @if (string.IsNullOrEmpty(Model.AdditionalDocumentsModel.PollutionAuthorityLetterByPCBFilePath))
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.AdditionalDocumentsModel.PollutionAuthorityValidupto, new { htmlAttributes = new { @class = "form-control datepicker", @Value = "" } })
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.AdditionalDocumentsModel.PollutionAuthorityValidupto, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.AdditionalDocumentsModel.PollutionAuthorityValidupto.ToString("dd/MM/yyyy") } })
                                    </div>
                                }
                            </div>

                            <div class="row" id="divUploaFireNOCCopy">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.AdditionalDocumentsModel.FEReportFilePath, "FE Report(FireNOC-Above 15 Meters needs to upload)", new { @class = "control-label", @id = "lblFEReportFilePath" })
                                </div>
                                <div class="col-md-3" style="margin-left:80px;">
                                    @Html.TextBoxFor(model => model.AdditionalDocumentsModel.FEReportFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                    @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.FEReportFilePath, "", new { @class = "text-danger" })

                                    @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.FEReportFilePath))
                                    {
                                        var layoutindex = Model.AdditionalDocumentsModel.FEReportFilePath.LastIndexOf("/");
                                        var layoutfileName = Model.AdditionalDocumentsModel.FEReportFilePath.Substring(layoutindex + 1);
                                        @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
new { Area = "", path = Model.AdditionalDocumentsModel.FEReportFilePath, downloadName = layoutfileName }, null);
                                    }
                                </div>
                                <div class="col-md-2 text-right">
                                    @Html.LabelFor(model => model.AdditionalDocumentsModel.FireNOCValidupto, new { @class = "control-label" })
                                    <span style="color:red">*</span>
                                </div>
                                @if (string.IsNullOrEmpty(Model.AdditionalDocumentsModel.FEReportFilePath))
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.AdditionalDocumentsModel.FireNOCValidupto, new { htmlAttributes = new { @class = "form-control datepicker", @Value = "" } })
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-2">
                                        @Html.EditorFor(model => model.AdditionalDocumentsModel.FireNOCValidupto, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.AdditionalDocumentsModel.FireNOCValidupto.ToString("dd/MM/yyyy") } })
                                    </div>
                                }
                            </div>

                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border"><b>For above 25 beds,Upload CFO,STP Documents</b> </legend>
                                <div class="row" id="divUploadCFO">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.CFOFilePath, "CFO(Consent for operation)", new { @class = "control-label", @id = "lblCFO" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.CFOFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.CFOFilePath, "", new { @class = "text-danger" })

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.CFOFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.CFOFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.CFOFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                            new { Area = "", path = Model.AdditionalDocumentsModel.CFOFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                                <div class="row" id="divUploadSTP">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.STPFilePath, "STP Document", new { @class = "control-label", @id = "lblSTP" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.STPFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.STPFilePath, "", new { @class = "text-danger" })

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.STPFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.STPFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.STPFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                            new { Area = "", path = Model.AdditionalDocumentsModel.STPFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border"><b>Tariff List & Establishment Details </b></legend>
                                <div class="row" id="divUploadTarifList">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.TarifListFilePath, new { @class = "control-label", @id = "lblTarifList" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.TarifListFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @*@Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.TarifListFilePath, "", new { @class = "text-danger" })*@

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.TarifListFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.TarifListFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.TarifListFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                            new { Area = "", path = Model.AdditionalDocumentsModel.TarifListFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                                <div class="row" id="divUploadEstablishment">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath, "Height of the Building & Building plan", new { @class = "control-label", @id = "lblBuildingPlan" })
                                        <span style="color:red">*</span>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @*@Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath, "", new { @class = "text-danger" })*@

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                                            new { Area = "", path = Model.AdditionalDocumentsModel.Establishment_BuildingPlanFilepath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="scheduler-border">
                                <legend class="scheduler-border"><b>Hospital Photographs Details </b></legend>
                                <div class="row" id="divUploadOutSideNamePlateBuilding">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath, "OutSide : Name Plate Building", new { @class = "control-label", @id = "lblHospitalOutSideNamePlateBuilding" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath, "", new { @class = "text-danger" })

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
                    new { Area = "", path = Model.AdditionalDocumentsModel.HospitalOutSideNamePlateBuildingFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                                <div class="row" id="divUploadTariffBoard">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.TariffBoardFilePath, "Tariff Board", new { @class = "control-label", @id = "lblTariffBoard" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.TariffBoardFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.TariffBoardFilePath, "", new { @class = "text-danger" })

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.TariffBoardFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.TariffBoardFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.TariffBoardFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
     new { Area = "", path = Model.AdditionalDocumentsModel.TariffBoardFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                                <div class="row" id="divUploadFireExhaustive">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.FireExhaustiveFilePath, "Fire Exhaustive", new { @class = "control-label", @id = "lblFireExhaustive" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.FireExhaustiveFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.FireExhaustiveFilePath, "", new { @class = "text-danger" })

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.FireExhaustiveFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.FireExhaustiveFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.FireExhaustiveFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
     new { Area = "", path = Model.AdditionalDocumentsModel.FireExhaustiveFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                                <div class="row" id="divUploadHospitalLabOperationTheater">
                                    <div class="col-md-6 text-center">
                                        @Html.LabelFor(model => model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath, new { @class = "control-label", @id = "lblHospitalLabOperationTheater" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(model => model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath, new { @class = "", type = "file", @style = "margin-left:-26%;" })
                                        @Html.ValidationMessageFor(model => model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath, "", new { @class = "text-danger" })

                                        @if (!string.IsNullOrEmpty(Model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath))
                                        {
                                            var layoutindex = Model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath.LastIndexOf("/");
                                            var layoutfileName = Model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath.Substring(layoutindex + 1);
                                            @Html.ActionLink(layoutfileName, "DownloadFile", "Generic",
     new { Area = "", path = Model.AdditionalDocumentsModel.HospitalLabOperationTheaterFilePath, downloadName = layoutfileName }, null);
                                        }
                                    </div>
                                </div>
                            </fieldset>

                            <div class="row">
                                <div class="col-md-12 text-right">
                                    <input type="button" id="btnAdditionalDocsUploadSave" value="Save" class="btn btn-primary" />
                                </div>
                            </div>
                        </fieldset>
                    </form>
                </div>

                <div id="tabCertificateFiles" class="tab-pane">
                    <form id="formFacilitiesAvailable2">
                        <fieldset class="scheduler-border">
                            <legend class="scheduler-border">Certificates </legend>
                            <div class="row">
                                <input type="button" value="View Form_1 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',1)" />  @*onclick="ViewForm1License('1139','Test')" />*@
                                @*@Html.ActionLink("Click here for Inspection", "AddInspectionDetails", new { Area = "Inspection", TransactionId = 1139, ServiceId = 1, AId = 0, TSId = 1 })*@

                                <input type="button" value="View Form_2 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',2)" />

                                <input type="button" value="View Form_3 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',3)" />
                                <input type="button" value="View Form_4 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',4)" />
                                <input type="button" value="View Form_5 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',5)" />
                                <input type="button" value="View Form_6 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',6)" />
                                <input type="button" value="View Form_7 Certificate" onclick="ViewForm1License(@Model.RegistrationModel.Id,'Transaction',7)" />
                            </div>
                        </fieldset>

                    </form>
                </div>
            </div>
                <!-- /.tab-content -->
            </div>
            <!-- nav-tabs-custom -->
        </div>
        <!-- /.col -->

    </div>

    <script>

        $(function () {
            $('.nonsupportingstaff').hide();
            $('.supportingstaff').hide();
            $('.specialists').hide();
            GetOfferedServices('@Model.RegistrationModel.HospitalTypeId');
            BindRegistrationData();
            BindCorrespondingAddressData();
            BindTrustData();
            BindAccomdationData();
            BindEstablishmentData();
            setTimeout(function () {
                BindServicesofferedData();
            }, 2000);
            BindStaffDetailsData();
            BindfacilitiesavailbleData();
            BindEquipmentFurnitureData();
            //CheckforEnableSubmit();
           BindEnclosuresCnt();

            BindAdditionalDocumentsData();
        });

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            var target = $(e.target).attr("href") // activated tab
            if (target == '#tabServices') {
                if (isRegistrationFormInEditMode) {
                    $('#OfferedServices_OfferedServices').prop('disabled', true);
                    $('#btnOfferedServicesSave').prop('disabled', true);
                    $('#lblRegistrationTabEditMode').text('Registration tab is in edit mode. Please save Registration tab first');

                    $('#InfraStructure_EquipmentId').prop('disabled', true);
                    $('#btnAddInfraStructure').prop('disabled', true);
                    $('#lblServicesOfferedTabEditMode').text('Registration & Services Offered tabs are in edit mode. Please save them first');
                }
                else {
                    $('#OfferedServices_OfferedServices').prop('disabled', false);
                    $('#btnOfferedServicesSave').prop('disabled', false);
                    $('#lblRegistrationTabEditMode').text('');

                    $('#InfraStructure_EquipmentId').prop('disabled', false);
                    $('#btnAddInfraStructure').prop('disabled', false);
                    $('#lblServicesOfferedTabEditMode').text('');
                }
            }
            else if (target == '#tabInfraStructure') {
                if (isRegistrationFormInEditMode || isOfferedServicesInEditMode) {
                    $('#InfraStructure_EquipmentId').prop('disabled', true);
                    $('#btnAddInfraStructure').prop('disabled', true);
                    $('#lblServicesOfferedTabEditMode').text('Services Offered tab is in edit mode. Please save Services Offered tab first');
                }
                else {
                    $('#InfraStructure_EquipmentId').prop('disabled', false);
                    $('#btnAddInfraStructure').prop('disabled', false);
                    $('#lblServicesOfferedTabEditMode').text('');
                }
            }
        });

        function BindRegistrationData(){
            var registrationModel = @Html.Raw(Json.Encode(Model.RegistrationModel));
            if(registrationModel.FormStatus != 0){
                if(registrationModel.FormStatus ==2)
                {
                    $('#btnRegistrationSave').val('Update');
                    $('#btnRegistrationSave').removeClass('btn-primary');
                    $('#btnRegistrationSave').addClass('btn-success');
                }
                else if(registrationModel.FormStatus ==1)
                {
                    $('#btnRegistrationSave').val('Update');
                    $('#btnRegistrationSave').removeClass('btn-success');
                    $('#btnRegistrationSave').addClass('btn-primary');
                }

                if(registrationModel.HospitalTypeId > 0)
                {
                    if(registrationModel.HospitalTypeId == 1)
                    {
                        $('#divClinicType').show();
                        $('#divDentalLabType').hide();
                        $('#divDiagnosticCenterType').hide();
                        $('#divBedStrengthSpeciality').hide();

                        $('#RegistrationModel.ClinicType').val('@Model.RegistrationModel.ClinicType').trigger('change');
                    }
                    else if(registrationModel.HospitalTypeId == 2)
                    {
                        $('#divClinicType').hide();
                        $('#divDentalLabType').hide();
                        $('#divDiagnosticCenterType').hide();
                        $('#divBedStrengthSpeciality').show();
                    }
                    else if (registrationModel.HospitalTypeId == 3) {
                        $('#divClinicType').hide();
                        $('#divDentalLabType').hide();
                        $('#divDiagnosticCenterType').show();
                        $('#divBedStrengthSpeciality').hide();

                        $('#ddlDiagnosticCenterType').val('@Model.RegistrationModel.ClinicType').trigger('change');
                    }
                    else if (registrationModel.HospitalTypeId == 6) {
                        $('#divClinicType').hide();
                        $('#divDentalLabType').show();
                        $('#divDiagnosticCenterType').hide();
                        $('#divBedStrengthSpeciality').hide();

                        $('#ddlDentalLabType').val('@Model.RegistrationModel.ClinicType').trigger('change');
                    }
                    else
                    {
                        $('#divClinicType').hide();
                        $('#divDentalLabType').hide();
                        $('#divDiagnosticCenterType').hide();
                        $('#divBedStrengthSpeciality').hide();
                    }
                }
                if(registrationModel.DistrictId > 0)
                {
                    BindMandals('RegistrationModel_', registrationModel.DistrictId);
                    setTimeout(
                       function(){
                           if(registrationModel.MandalId > 0){
                               $('#RegistrationModel_MandalId').val(registrationModel.MandalId).trigger('change');
                               BindVillages('RegistrationModel_', registrationModel.MandalId);
                               setTimeout(function(){
                                   if(registrationModel.VillageId > 0){
                                       $('#RegistrationModel_VillageId').val(registrationModel.VillageId).trigger('change');
                                   }
                               }, 500);
                           }
                       }
                        , 500);
                }
            }

            var hospitalTypeId = $('#RegistrationModel_HospitalTypeId').val();
            GetEquipmentsList(hospitalTypeId);
            //GetEquipmentsList(registrationModel.HospitalTypeId);
        }

        function BindCorrespondingAddressData(){
            var correspondingaddressModel = @Html.Raw(Json.Encode(Model.CorrespondingAddress));
            if(correspondingaddressModel.FormStatus != 0){
                if(correspondingaddressModel.FormStatus ==2)
                {
                    $('#btnCorrespondingSave').val('Update');
                    $('#btnCorrespondingSave').removeClass('btn-primary');
                    $('#btnCorrespondingSave').addClass('btn-success');
                }
                else if(correspondingaddressModel.FormStatus ==1)
                {
                    $('#btnCorrespondingSave').val('Update');
                    $('#btnCorrespondingSave').removeClass('btn-success');
                    $('#btnCorrespondingSave').addClass('btn-primary');
                }


                if(correspondingaddressModel.DistrictId > 0)
                {
                    BindMandals('CorrespondingAddress_', correspondingaddressModel.DistrictId);
                    setTimeout(
                       function(){
                           if(correspondingaddressModel.MandalId > 0){
                               $('#CorrespondingAddress_MandalId').val(correspondingaddressModel.MandalId).trigger('change');
                               BindVillages('CorrespondingAddress_', correspondingaddressModel.MandalId);
                               setTimeout(function(){
                                   if(correspondingaddressModel.VillageId > 0){
                                       $('#CorrespondingAddress_VillageId').val(correspondingaddressModel.VillageId).trigger('change');
                                   }
                               }, 2000);
                           }
                       }
                        , 2000);
                }
            }
        }

        function BindTrustData(){
            var trustdetailsModel = @Html.Raw(Json.Encode(Model.TrustModel));
            if(trustdetailsModel.FormStatus != 0){
                if(trustdetailsModel.FormStatus ==2)
                {
                    $('#btnTrustSave').val('Update');
                    $('#btnTrustSave').removeClass('btn-primary');
                    $('#btnTrustSave').addClass('btn-success');
                }
                else if(trustdetailsModel.FormStatus ==1)
                {
                    $('#btnTrustSave').val('Update');
                    $('#btnTrustSave').removeClass('btn-success');
                    $('#btnTrustSave').addClass('btn-primary');
                }


                if(trustdetailsModel.DistrictId > 0)
                {
                    BindMandals('TrustModel_', trustdetailsModel.DistrictId);
                    setTimeout(
                       function(){
                           if(trustdetailsModel.MandalId > 0){
                               $('#TrustModel_MandalId').val(trustdetailsModel.MandalId).trigger('change');
                               BindVillages('TrustModel_', trustdetailsModel.MandalId);
                               setTimeout(function(){
                                   if(trustdetailsModel.VillageId > 0){
                                       $('#TrustModel_VillageId').val(trustdetailsModel.VillageId).trigger('change');
                                   }
                               }, 2000);
                           }
                       }
                        , 2000);
                }
            }
        }

        function BindAccomdationData()
        {
            var accommadationModel = @Html.Raw(Json.Encode(Model.Accommadation));
            if(accommadationModel.FormStatus != 0)
            {
                if(accommadationModel.FormStatus ==2)
                {
                    $('#btnAccommodationSave').val('Update');
                    $('#btnAccommodationSave').removeClass('btn-primary');
                    $('#btnAccommodationSave').addClass('btn-success');
                }
                else if(accommadationModel.FormStatus ==1)
                {
                    $('#btnAccommodationSave').val('Update');
                    $('#btnAccommodationSave').removeClass('btn-success');
                    $('#btnAccommodationSave').addClass('btn-primary');
                }

                $('#Accommadation_EstablishementType').val(accommadationModel.EstablishmentTypeName).trigger("change");
            }
        }

        function BindEstablishmentData()
        {
            var establishmentModel = @Html.Raw(Json.Encode(Model.EstablishmentModel));
            if(establishmentModel.FormStatus != 0)
            {
                if(establishmentModel.FormStatus ==2)
                {
                    $('#btnEstablishmentSave').val('Update');
                    $('#btnEstablishmentSave').removeClass('btn-primary');
                    $('#btnEstablishmentSave').addClass('btn-success');
                }
                else if(establishmentModel.FormStatus ==1)
                {
                    $('#btnEstablishmentSave').val('Update');
                    $('#btnEstablishmentSave').removeClass('btn-success');
                    $('#btnEstablishmentSave').addClass('btn-primary');
                }

            }
        }

        function BindServicesofferedData()
        {
            var offeredservicesModel = @Html.Raw(Json.Encode(Model.OfferedServices));
            if(offeredservicesModel.FormStatus != 0)
            {
                if(offeredservicesModel.FormStatus ==2)
                {
                    $('#btnOfferedServicesSave').val('Update');
                    $('#btnOfferedServicesSave').removeClass('btn-primary');
                    $('#btnOfferedServicesSave').addClass('btn-success');
                }
                else if(offeredservicesModel.FormStatus ==1)
                {
                    $('#btnOfferedServicesSave').val('Update');
                    $('#btnOfferedServicesSave').removeClass('btn-success');
                    $('#btnOfferedServicesSave').addClass('btn-primary');
                }

                // $('#Accommadation_EstablishementType').val(accommadationModel.EstablishmentTypeName).trigger("change");
                //  $("#OfferedServices_OfferedServices").val(1).trigger("change");
        debugger;
                var arr = offeredservicesModel.OfferedServiceIDs.split(',');
                savedOfferedServiceValue = arr;
                $("#OfferedServices_OfferedServices").val(arr).trigger("change");
            }
        }

        function BindStaffDetailsData()
        {
            var staffdetailsModel = @Html.Raw(Json.Encode(Model.StaffDetailsList));
            if(staffdetailsModel != null && staffdetailsModel.length>0 )
            {

                $('#btnStaffDetailsSave').val('Update');
                $('#btnStaffDetailsSave').removeClass('btn-primary');
                $('#btnStaffDetailsSave').addClass('btn-success');


            }
        }

        function BindEquipmentFurnitureData()
        {
            var InfraStructureListModel = @Html.Raw(Json.Encode(Model.InfraStructureList));
            if (InfraStructureListModel != null && InfraStructureListModel.length>0)
            {
                $('#btnInfraStructureSave').val('Update');
                $('#btnInfraStructureSave').removeClass('btn-primary');
                $('#btnInfraStructureSave').addClass('btn-success');
            }
        }

        function BindfacilitiesavailbleData()
        {
            var facilitiesvailableModel=@Html.Raw(Json.Encode(Model.FacilitiesAvailableModel));

            if(facilitiesvailableModel.FormStatus != 0)
            {
                if(facilitiesvailableModel.FormStatus ==2)
                {
                    $('#btnFacilitiesAvailableSave').val('Update');
                    $('#btnFacilitiesAvailableSave').removeClass('btn-primary');
                    $('#btnFacilitiesAvailableSave').addClass('btn-success');
                }
                else if(facilitiesvailableModel.FormStatus ==1)
                {
                    $('#btnFacilitiesAvailableSave').val('Update');
                    $('#btnFacilitiesAvailableSave').removeClass('btn-success');
                    $('#btnFacilitiesAvailableSave').addClass('btn-primary');
                }

                // Radio Buttons Binding with previous data
                var HasDeclarationStamp = $('#FacilitiesAvailableModel_HasDeclarationStamp').val();
                console.log('HasDeclarationStamp : '+ facilitiesvailableModel.HasDeclarationStamp);
                console.log('HasOperationTheater : '+ facilitiesvailableModel.HasOperationTheater);

                if(facilitiesvailableModel.HasDeclarationStamp == true)
                {
                    $('input[name="FacilitiesAvailableModel.HasDeclarationStamp"][value="' + true + '"]').iCheck('check');
                    $('#divDeclarationStampDetails').show();
                }
                else{
                    $('input[name="FacilitiesAvailableModel.HasDeclarationStamp"][value="' + false + '"]').iCheck('check');
                    $('#divDeclarationStampDetails').hide();
                }
                if(facilitiesvailableModel.HasLaborRoom == true)
                {
                    $('input[name="FacilitiesAvailableModel.HasLaborRoom"][value="' + true + '"]').iCheck('check');
                }
                else{
                    $('input[name="FacilitiesAvailableModel.HasLaborRoom"][value="' + false + '"]').iCheck('check');
                }
                if(facilitiesvailableModel.HasOperationTheater == true)
                {
                    $('input[name="FacilitiesAvailableModel.HasOperationTheater"][value="' + true + '"]').iCheck('check');
                }
                else{
                    $('input[name="FacilitiesAvailableModel.HasOperationTheater"][value="' + false + '"]').iCheck('check');
                }
                if(facilitiesvailableModel.HasDiagnosticFacility == true)
                {
                    $('input[name="FacilitiesAvailableModel.HasDiagnosticFacility"][value="' + true + '"]').iCheck('check');
                }
                else{
                    $('input[name="FacilitiesAvailableModel.HasDiagnosticFacility"][value="' + false + '"]').iCheck('check');
                }
                //end radio buttons
            }
        }

        function BindAdditionalDocumentsData()
        {
            var additionalDocumentsModel = @Html.Raw(Json.Encode(Model.AdditionalDocumentsModel));
            if(additionalDocumentsModel.FormStatus != 0)
            {
                if(additionalDocumentsModel.FormStatus ==2)
                {
                    $('#btnAdditionalDocsUploadSave').val('Update');
                    $('#btnAdditionalDocsUploadSave').removeClass('btn-primary');
                    $('#btnAdditionalDocsUploadSave').addClass('btn-success');
                }
                else if(additionalDocumentsModel.FormStatus ==1)
                {
                    $('#btnAdditionalDocsUploadSave').val('Update');
                    $('#btnAdditionalDocsUploadSave').removeClass('btn-success');
                    $('#btnAdditionalDocsUploadSave').addClass('btn-primary');
                }

            }
        }


        $('input[type="radio"][name="RegistrationModel.FacilityType"]').on('ifChecked', function (e) {
            if (this.value == 'Branch') {
                $('.branchfields').show();
            }
            else {
                $('.branchfields').hide();
            }
        });

        $('#Accommadation_EstablishementType').on('change', function (e) {
            if (this.value != '') {
                $('#divAccommodationUpload').show();
                switch (this.value) {
                    case 'Own': {
                        $('#lblAccommodationLabel').text('Own Premises - Tax Receipt/Telephone Bill');
                    }
                        break;
                    case 'Rent': {
                        $('#lblAccommodationLabel').text('Rent - Lease Agreement Document');
                    }
                        break;
                    case 'Lease': {
                        $('#lblAccommodationLabel').text('Lease - Lease Agreement Document');
                    }
                        break;
                    default:

                }

            }
            else {
                $('#divAccommodationUpload').hide();
            }
        });

        $('#FacilitiesAvailableModel_HasDeclarationStamp').on('ifToggled', function (e) {

            if (this.checked) {
                $('#divDeclarationStampDetails').show();
            }
            else {
                $('#divDeclarationStampDetails').hide();
            }
        });
        //$('#Accommadation_EstablishementType').on('change', function () {

        //    if (this.value == 1) {
        //        $('#hdAccommodationOwn').hide();
        //    }
        //    else{
        //        $('#hdAccommodationOwn').show();
        //    }
        //});
        $('#StaffDetails_StaffDesignation').on('change', function () {
            if (this.value != '') {
                $('#divStaffDetails').show();
                switch (this.value) {
                    case 'Doctors': {
                        $('.supportingstaff').hide();
                        $('.specialists').hide();
                        $('.nonsupportingstaff').show();
                        $('#lblStaffRegiNumber').text('Registration Number Allotted by MCI/APMC');
                    }
                        break;
                    case 'Nursing Staff': {
                        $('.supportingstaff').hide();
                        $('.specialists').hide();
                        $('.nonsupportingstaff').show();
                        $('#lblStaffRegiNumber').text('Registration Number Allotted by NCI/Any Other Board');
                    }
                        break;
                    case 'Admin Staff': {
                        $('.supportingstaff').hide();
                        $('.specialists').hide();
                        $('.Adminstaff').show();
                        $('#lblStaffRegiNumber').text('Registration Number');
                    }
                        break;
                    case 'Para Capstone Staff': {
                        $('.supportingstaff').hide();
                        $('.specialists').hide();
                        $('.nonsupportingstaff').show();
                        $('#lblStaffRegiNumber').text('Registration Number');
                    }
                        break;
                    case 'Supporting Staff': {
                        $('.nonsupportingstaff').hide();
                        $('.specialists').hide();
                        $('.supportingstaff').show();
                    }
                        break;
                    case 'Specialists': {
                        $('.nonsupportingstaff').hide();
                        $('.supportingstaff').hide();
                        $('.specialists').show();
                        $('#lblStaffRegiNumber').text('Registration Number');
                    }
                        break;                   
                    default:
                }
            }
            else {
                $('.nonsupportingstaff').hide();
                $('.supportingstaff').hide();
                $('.specialists').hide();
                $('.Adminstaff').hide();
            }
        });

        $('#RegistrationModel_DistrictId').on('change', function () {
            BindMandals('RegistrationModel_', this.value);
        });


        $('#RegistrationModel_MandalId').on('change', function () {
            BindVillages('RegistrationModel_', this.value);
        });


        $('#TrustModel_DistrictId').on('change', function () {
            BindMandals('TrustModel_', this.value);
        });

        $('#TrustModel_MandalId').on('change', function () {
            BindVillages('TrustModel_', this.value);
        });

        $('#CorrespondingAddress_DistrictId').on('change', function () {
            BindMandals('CorrespondingAddress_', this.value);
        });

        $('#CorrespondingAddress_MandalId').on('change', function () {
            BindVillages('CorrespondingAddress_', this.value);
        });

        $('input[type="radio"][name="FacilitiesAvailableModel.HasOperationTheater"]').on('ifChecked', function (e) {
            if (this.value == 'true') {
                $('#divOpearationTheatre').show();
            }
            else {
                $('#divOpearationTheatre').hide();
            }
        });

        var savedHospitalTypeId = '@Model.RegistrationModel.HospitalTypeId', isRegistrationFormInEditMode = false;
        $('#btnRegistrationSave').on('click', function (e) {
            var clinicType="",bedStrength="",speciality="";
            e.preventDefault();
            if($('#RegistrationModel_HospitalTypeId').val() == "")
            {
                alert('Please Select Hospital Type!');
                return;
            }
            else
            {
                if ($('#RegistrationModel_HospitalTypeId').val() == "1") {
                    if ($('#RegistrationModel_ClinicType').val() == "") {
                        alert('Please Select Clinic Type!');
                        return;
                    }
                    else {
                        clinicType = $('#RegistrationModel_ClinicType').val()
                    }
                }
                else if ($('#RegistrationModel_HospitalTypeId').val() == "2") {
                    if ($('#RegistrationModel_BedStrength').val() == "" || $('#RegistrationModel_Speciality').val() == "") {
                        alert('Please Select BedStrength/ Speciality!');
                        return;
                    }
                    else {
                        bedStrength = $('#RegistrationModel_BedStrength').val();
                        speciality = $('#RegistrationModel_Speciality').val();
                    }
                }
                else if ($('#RegistrationModel_HospitalTypeId').val() == "3") {
                    if ($('#ddlDiagnosticCenterType').val() == "") {
                        alert('Please select Diagnostic Center Type');
                        return;
                    }
                    else {
                        clinicType = $('#ddlDiagnosticCenterType').val();
                    }
                }
                else if ($('#RegistrationModel_HospitalTypeId').val() == "6") {
                    if ($('#ddlDentalLabType').val() == "") {
                        alert('Please select Lab Type');
                        return;
                    }
                    else {
                        clinicType = $('#ddlDentalLabType').val();
                    }
                }
            }

            var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
            var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
            if ($('#formRegistration').valid()) {
                var url = '@Url.Action("SaveRegistrationDetails", "License", new { Area = "User" })';
                var facilityType = $("input:radio[name='RegistrationModel.FacilityType']:checked").val();
                var licenseNumber = facilityType == 'Branch' ? $('#RegistrationModel_LicenseNumber').val() : null;

                var data = {
                    model: {
                        Id: $('#RegistrationModel_Id').val() == '' ? 0 : $('#RegistrationModel_Id').val(),
                        FacilityType: facilityType,
                        HospitalTypeId : $('#RegistrationModel_HospitalTypeId').val(),
                        ClinicType : clinicType, //$('#RegistrationModel_ClinicType').val(),
                        BedStrength : bedStrength, //$('#RegistrationModel_BedStrength').val(),
                        Speciality : speciality, //$('#RegistrationModel_Speciality').val(),
                        Name: $('#RegistrationModel_Name').val(),
                        LicenseNumber: licenseNumber,
                        DistrictId: $('#RegistrationModel_DistrictId').val(),
                        MandalId: $('#RegistrationModel_MandalId').val(),
                        VillageId: $('#RegistrationModel_VillageId').val(),
                        HouseNumber: $('#RegistrationModel_HouseNumber').val(),
                        StreetName: $('#RegistrationModel_StreetName').val(),
                        PINCode: $('#RegistrationModel_PINCode').val(),
                        BuildingHeight: $('#RegistrationModel_BuildingHeight').val(),
                        ApplicationType: applicationtype,
                        ExistingApplicationId: existingApplicationId == 'undefined' ? 0 : existingApplicationId
                    }
                };



                var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var json;
                if (response instanceof Object)
                    json = response;
                else
                    json = $.parseJSON(response);

                savedHospitalTypeId = data.model.HospitalTypeId;
                isRegistrationFormInEditMode = false;

                savedOfferedServiceValue = $("#OfferedServices_OfferedServices").val();
                isOfferedServicesInEditMode = false;

                $('#RegistrationModel_Id').val(response.ReturnData.split(',')[0]);
                ShowModal(response);

                if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                    $('#btnRegistrationSave').val('Update');
                    $('#btnRegistrationSave').removeClass('btn-success');
                    $('#btnRegistrationSave').addClass('btn-primary');
                }
                else if (response.ReturnData.split(',')[1] == 'Completed') {
                    $('#btnRegistrationSave').val('Update');
                    $('#btnRegistrationSave').removeClass('btn-primary');
                    $('#btnRegistrationSave').addClass('btn-success');
                }
                else if (response.ReturnData.split(',')[1] == 'Empty') {
                    $('#btnRegistrationSave').val('Save');
                    $('#btnRegistrationSave').removeClass('btn-success');
                    $('#btnRegistrationSave').addClass('btn-primary');
                }

                //GetEquipmentsList($('#RegistrationModel_HospitalTypeId').val());
                // CheckforEnableSubmit();
            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("Save Registration Details Request Failed: " + err);
        });
            }
        });

        $('#btnTrustSave').on('click', function (e) {
            e.preventDefault();
            // if ($('#formTrust').valid()) {
            var validate= $('#formTrust').validate();
            if($('#formTrust').valid()){
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                if(true){
                    var url = '@Url.Action("SaveTrustDetails","License", new { Area = "User" })';
                    var data = {
                        model: {
                            Id: $('#TrustModel_Id').val() == '' ? 0 : $('#TrustModel_Id').val(),
                            Name: $('#TrustModel_Name').val(),
                            DistrictId: $('#TrustModel_DistrictId').val(),
                            MandalId: $('#TrustModel_MandalId').val(),
                            VillageId: $('#TrustModel_VillageId').val(),
                            HouseNumber: $('#TrustModel_HouseNumber').val(),
                            StreetName: $('#TrustModel_StreetName').val(),
                            PINCode: $('#TrustModel_PINCode').val(),
                            EstablishedDate: $('#TrustModel_EstablishedDate').val(),
                            ApplicationType: applicationtype,
                            ExistingApplicationId: existingApplicationId == 'undefined' ? 0 : existingApplicationId
                        }
                    };
                    var jqxhr = $.post(url, data, function () { })
                .done(function (response) {
                    var json;
                    if (response instanceof Object)
                        json = response;
                    else
                        json = $.parseJSON(response);

                    $('#TrustModel_Id').val(response.ReturnData.split(',')[0]);
                    ShowModal(response);

                    if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                        $('#btnTrustSave').val('Update');
                        $('#btnTrustSave').removeClass('btn-success');
                        $('#btnTrustSave').addClass('btn-primary');
                    }
                    else if (response.ReturnData.split(',')[1] == 'Completed') {
                        $('#btnTrustSave').val('Update');
                        $('#btnTrustSave').removeClass('btn-primary');
                        $('#btnTrustSave').addClass('btn-success');
                    }
                    else if (response.ReturnData.split(',')[1] == 'Empty') {
                        $('#btnTrustSave').val('Save');
                        $('#btnTrustSave').removeClass('btn-success');
                        $('#btnTrustSave').addClass('btn-primary');
                    }
                })
            .fail(function (jqxhr, status, error) {
                var err = status + ", " + error;
                console.log("Save Trust Request Failed: " + err);
            });
                }
            }
        });

        $('#btnAccommodationSave').on('click', function (e) {
            e.preventDefault();
            var flag=true;
            var fromdate= $('#Accommadation_FromDate').val();
            var todate=  $('#Accommadation_ToDate').val();
            var returnvalue= ValidateFromDateToDate(fromdate,todate);
            var validate=$('#formAccommodation').validate();
            if(returnvalue==false)
                alert('From date should be less than to date');
            else
            {
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                var isvalid = $('#formAccommodation').valid();
                if ($('#formAccommodation').valid()) {
                    var url = '@Url.Action("SaveAccommodationDetails", "License", new { Area = "User" })';

                    if (window.FormData !== undefined) {
                        var uploadedFile = $("#Accommadation_UploadedFilePath").get(0).files[0];
                        //File Upload size upto 4 MB
                        if(uploadedFile != undefined)
                        {
                            if((uploadedFile.size/1000) > 4096)
                            {
                                $('#errMsgAccommadationUpload').text('Please check File size, limit to below 3.8 MB');
                                flag=false;
                            }
                            else
                            {
                                $('#errMsgAccommadationUpload').text('');
                            }
                        }
                        if(flag==false)
                        {
                            return;
                        }
                        else{
                            // Create FormData object
                            var fileData = new FormData();

                            fileData.append('Id', $('#Accommadation_Id').val() == '' ? 0 : $('#Accommadation_Id').val());
                            fileData.append('EstablishementType', $('#Accommadation_EstablishementType').val());
                            fileData.append('FromDate', $('#Accommadation_FromDate').val());
                            fileData.append('ToDate', $('#Accommadation_ToDate').val());
                            fileData.append('uploadedFile', uploadedFile);
                            fileData.append('ApplicationType',  applicationtype);
                            fileData.append('ExistingApplicationId',  existingApplicationId);
                            $.ajax({
                                type: "POST",
                                url: url,
                                data: fileData,
                                contentType: false,
                                processData: false,
                                async: true,
                                success: function (response) {
                                    var json;
                                    if (response instanceof Object)
                                        json = response;
                                    else
                                        json = $.parseJSON(response);

                                    $('#Accommadation_Id').val(response.ReturnData.split(',')[0]);
                                    ShowModal(response);

                                    if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                                        $('#btnAccommodationSave').val('Update');
                                        $('#btnAccommodationSave').removeClass('btn-success');
                                        $('#btnAccommodationSave').addClass('btn-primary');
                                    }
                                    else if (response.ReturnData.split(',')[1] == 'Completed') {
                                        $('#btnAccommodationSave').val('Update');
                                        $('#btnAccommodationSave').removeClass('btn-primary');
                                        $('#btnAccommodationSave').addClass('btn-success');
                                    }
                                    else if (response.ReturnData.split(',')[1] == 'Empty') {
                                        $('#btnAccommodationSave').val('Save');
                                        $('#btnAccommodationSave').removeClass('btn-success');
                                        $('#btnAccommodationSave').addClass('btn-primary');
                                    }

                                    // CheckforEnableSubmit();
                                    BindEnclosuresCnt();
                                    // ClearControls();
                                    //$('#Accommadation_EstablishementType').val('').trigger('change');
                                },
                                failure: function (response) {
                                    // alert('failure: ' + response.d);
                                },
                                error: function (response) {
                                    // alert('error: ' + response.d);
                                }
                            });
                        }
                    }
                    else {
                        alert('Invalid FormData');
                    }
                }
            }

        });

        $('#btnCorrespondingSave').on('click', function (e) {
            e.preventDefault();
            var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
            var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
            if ($('#formCorrespondingAddress').valid()) {
                var url = '@Url.Action("SaveCorrespondingAddressDetails", "License", new { Area = "User" })';
                var data = {
                    model: {
                        Id: $('#CorrespondingAddress_Id').val() == '' ? 0 : $('#CorrespondingAddress_Id').val(),
                        Name: $('#CorrespondingAddress_Name').val(),
                        DistrictId: $('#CorrespondingAddress_DistrictId').val(),
                        MandalId: $('#CorrespondingAddress_MandalId').val(),
                        VillageId: $('#CorrespondingAddress_VillageId').val(),
                        HouseNumber: $('#CorrespondingAddress_HouseNumber').val(),
                        StreetName: $('#CorrespondingAddress_StreetName').val(),
                        PINCode: $('#CorrespondingAddress_PINCode').val(),
                        ApplicationType: applicationtype,
                        ExistingApplicationId: existingApplicationId == 'undefined' ? 0 : existingApplicationId
                    }
                };
                var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var json;
                if (response instanceof Object)
                    json = response;
                else
                    json = $.parseJSON(response);

                $('#CorrespondingAddress_Id').val(response.ReturnData.split(',')[0]);
                ShowModal(response);

                if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                    $('#btnCorrespondingSave').val('Update');
                    $('#btnCorrespondingSave').removeClass('btn-success');
                    $('#btnCorrespondingSave').addClass('btn-primary');
                }
                else if (response.ReturnData.split(',')[1] == 'Completed') {
                    $('#btnCorrespondingSave').val('Update');
                    $('#btnCorrespondingSave').removeClass('btn-primary');
                    $('#btnCorrespondingSave').addClass('btn-success');
                }
                else if (response.ReturnData.split(',')[1] == 'Empty') {
                    $('#btnCorrespondingSave').val('Save');
                    $('#btnCorrespondingSave').removeClass('btn-success');
                    $('#btnCorrespondingSave').addClass('btn-primary');
                }
            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("Save Trust Request Failed: " + err);
        });
            }
        });



        $('#btnAddInfraStructure').on('click', function (e) {

            e.preventDefault();
            if($('#InfraStructure_EquipmentId option:selected').val() == "" || $('#InfraStructure_EquipmentId option:selected').val() == "0")
            {
                alert('Please Select Equipment!');
                return;
            }
            else if($("#InfraStructure_UploadedFilePath").val() == "")
            {
               alert('Please Upload InfraStructure File!');
               return;
            }
            else if($("#InfraStructure_UploadedFilePath").get(0).files[0] != undefined)
            {
                if(($("#InfraStructure_UploadedFilePath").get(0).files[0].size/1000) > 3072)
                {
                   alert('Please check InfraStructure File size, limit to below 3 MB');
                   return;
               }
            } 
            var flag=true;
            if ($('#formInfraStructure').valid()) {
                var url = '@Url.Action("AddInfraStructure","License", new { Area = "User" })';
                var uploadedFile="";
                if (window.FormData != undefined) {  
                    if ($("#InfraStructure_UploadedFilePath").val() != "") 
                        uploadedFile = $("#InfraStructure_UploadedFilePath").get(0).files[0];
                    if(uploadedFile != undefined)
                    {
                        if((uploadedFile.size/1000) > 3072)
                        {
                            $('#errMsgInfraStructure').text('Please check File size, limit to below 3 MB');
                            flag=false;
                        }
                        else
                        {
                            $('#errMsgInfraStructure').text('');
                        }
                    }
                    if(flag==false)
                    {
                        return;
                    }
                    else
                    {
                        // Create FormData object
                        var fileData = new FormData();

                        fileData.append('Id', $('#InfraStructure_Id').val() == '' ? 0 : $('#InfraStructure_Id').val());
                        fileData.append('EquipmentId', $('#InfraStructure_EquipmentId option:selected').val());
                        fileData.append('Name', $('#InfraStructure_EquipmentId option:selected').text());
                        fileData.append('Quantity', $('#InfraStructure_Quantity').val());
                        fileData.append('ItemModel', $('#InfraStructure_ItemModel').val());
                        fileData.append('Remarks', $('#InfraStructure_Remarks').val());
                        fileData.append('UploadedFilePath', uploadedFile.name);
                        fileData.append('UploadedFile', uploadedFile);

                        $.ajax({
                            type: "POST",
                            url: url,
                            data: fileData,
                            contentType: false,
                            processData: false,
                            async: true,
                            success: function (response) {
                                // Clear controls
                                $('#InfraStructure_EquipmentId').val('')
                                $('#InfraStructure_Name').val('');
                                $('#InfraStructure_Quantity').val('');
                                $('#InfraStructure_ItemModel').val('');
                                $('#InfraStructure_Remarks').val('');
                                $('#InfraStructure_UploadedFilePath').val('');
                                
                                if(response != null)
                                {
                                    $('#tblInfraStructure tr').not(function () { return !!$(this).has('th').length; }).remove();

                                    var json = response;

                                    var tr;
                                    //Append each row to html table 
                                    for (var i = 0; i < json.length; i++) {
                                        tr = $('<tr/>');
                                        tr.append("<td>" + (i + 1) + "</td>");
                                        tr.append("<td style='display:none;'>" + json[i].EquipmentId + "</td>");
                                        tr.append("<td>" + json[i].Name + "</td>");
                                        tr.append("<td>" + json[i].Quantity + "</td>");
                                        tr.append("<td>" + json[i].ItemModel + "</td>");
                                        tr.append("<td>" + json[i].Remarks + "</td>");

                                        var path = json[i].UploadedFilePath;
                                        var index = path.indexOf("/");
                                        var displayFileName = path.substring(index + 1, path.length);
                                        var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                        fileLink = fileLink.replace("displaytext", displayFileName);
                                        fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                                        fileLink = fileLink.replace("downloadfilename", displayFileName);
                                        tr.append("<td>" + fileLink + "</td>");
                                        tr.append("<td><input type='button' value='Delete' onclick='DeleteInfraStructure(" + i + ");'/></td>");

                                        $('#tblInfraStructure').append(tr);
                                    }
                                }
                            },
                            failure: function (response) {
                               // alert('failure: ' + response.d);
                                console.log('equipment failure :'+ response.d);
                            },
                            error: function (response) {
                                //alert('error: ' + response.d);
                                alert('Error/Equipment Record Already Exists!');
                                return;
                            }
                        });

                    }    
                }
                else {
                    alert("FormData is not supported.");
                }
            }
        });

        function DeleteInfraStructure(index) {
            if (confirm('Do you really want to delete?')) {
                var url = '@Url.Action("DeleteInfraStructure", "License", new { Area = "User" })';
                var data = { index: index };
                var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#tblInfraStructure tr').not(function () { return !!$(this).has('th').length; }).remove();
            if (json != undefined) {
                var tr;
                //Append each row to html table
                for (var i = 0; i < json.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + (i + 1) + "</td>");
                    tr.append("<td style='display:none;'>" + json[i].EquipmentId + "</td>");
                    tr.append("<td>" + json[i].Name + "</td>");
                    tr.append("<td>" + json[i].Quantity + "</td>");
                    tr.append("<td>" + json[i].ItemModel + "</td>");
                    tr.append("<td>" + json[i].Remarks + "</td>");

                    var path = json[i].UploadedFilePath;
                    var index = path.indexOf("/");
                    var displayFileName = path.substring(index + 1, path.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteInfraStructure(" + i + ");'/></td>");

                    $('#tblInfraStructure').append(tr);
                }
            }
            else if(json == undefined || json.length == 0){
                $('#btnInfraStructureSave').val('Save');
                $('#btnInfraStructureSave').removeClass('btn-success');
                $('#btnInfraStructureSave').addClass('btn-primary');
            }
            // CheckforEnableSubmit();
        }
        )
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Delete Equipment Request Failed: " + err);
    });
            }
        }

        $('#btnInfraStructureSave').on('click', function (e) {
            e.preventDefault();
            var rowCount = $('#tblInfraStructure tr').length;
            if(rowCount==1)
                alert('Please add atleasat 1 InfraStructure to the list');
            else{
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                var url = '@Url.Action("SaveInfraStructures", "License", new { Area = "User" })';
                var data = {
                    applicationType : applicationtype,
                    ExistingApplicationId: existingApplicationId == 'undefined' ? 0 : existingApplicationId
                };
                var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var json;
                if (response instanceof Object)
                    json = response;
                else
                    json = $.parseJSON(response);

                ShowModal(response);
                var transactionId = response.ReturnData.split(',')[0];
                BindInfraStructureOnSave(transactionId);

                // CheckforEnableSubmit();
                BindEnclosuresCnt();
            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("SaveInfraStructure Request Failed: " + err);
        });
            }
        });

        function BindInfraStructureOnSave(transactionId) {
            var url = '@Url.Action("GetInfraStructures", "License", new { Area = "User" })';
            var data = { transactionId: transactionId };
            var jqxhr = $.post(url, data, function () { }, "json")
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#tblInfraStructure tr').not(function () { return !!$(this).has('th').length; }).remove();
            if (json != undefined && json.length != 0) {
                var tr;
                //Append each row to html table
                for (var i = 0; i < json.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + (i + 1) + "</td>");
                    tr.append("<td style='display:none;'>" + json[i].EquipmentId + "</td>");
                    tr.append("<td>" + json[i].Name + "</td>");
                    tr.append("<td>" + json[i].Quantity + "</td>");
                    tr.append("<td>" + json[i].ItemModel + "</td>");
                    tr.append("<td>" + json[i].Remarks + "</td>");

                    var path = json[i].UploadedFilePath;
                    var index = path.indexOf("/");
                    var displayFileName = path.substring(index + 1, path.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteInfraStructure(" + i + ");'/></td>");

                    $('#tblInfraStructure').append(tr);
                }

                $('#btnInfraStructureSave').val('Update');
                $('#btnInfraStructureSave').removeClass('btn-primary');
                $('#btnInfraStructureSave').addClass('btn-success');
            }
            else if (json == undefined || json.length == 0) {
                $('#btnInfraStructureSave').val('Save');
                $('#btnInfraStructureSave').removeClass('btn-success');
                $('#btnInfraStructureSave').addClass('btn-primary');
            }
        })
            .fail(function (jqxhr, status, error) {
                var err = status + ", " + error;
                console.log("GetInfraStructure Request Failed: " + err);
            });

        }


        //Ading Staff details in Table

        $('#btnAddStaffDetails').on('click', function (e) {
            e.preventDefault();
            var flag=true;

            if($("#StaffDetails_UploadedFilePath").val() == "")
            {
               alert('Please Upload Staff related File!');
               return;
            }
            else if($("#StaffDetails_UploadedFilePath").get(0).files[0] != undefined)
            {
                if(($("#StaffDetails_UploadedFilePath").get(0).files[0].size/1000) > 3072)
                {
                   alert('Please check Staff File size, limit to below 3 MB');
                   return;
               }
            } 
            if ($('#formStaffDetails').valid()) {
                var url = '@Url.Action("AddStaffDetails","License", new { Area = "User" })';
                if (window.FormData != undefined) {
                    var uploadedFile = $("#StaffDetails_UploadedFilePath").get(0).files[0];
                    if(uploadedFile != undefined)
                    {
                        if((uploadedFile.size/1000) > 3072)
                        {
                            $('#errMsgStaffUpload').text('Please check File size, limit to below 3MB');
                            flag=false;
                        }
                        else
                        {
                            $('#errMsgStaffUpload').text('');
                        }
                    }
                    if(flag==false)
                    {
                        return;
                    }
                    else
                    {
                        // Create FormData object
                        var fileData = new FormData();

                        fileData.append('Id', $('#StaffDetails_Id').val() == '' ? 0 : $('#StaffDetails_Id').val());
                        fileData.append('StaffDesignation', $("#StaffDetails_StaffDesignation").val()==''?'-':$("#StaffDetails_StaffDesignation").val());
                        fileData.append('Name', $('#StaffDetails_Name').val()==''?'-': $('#StaffDetails_Name').val());
                        fileData.append('RegistrationNumber', $('#StaffDetails_RegistrationNumber').val()==''?'-':$('#StaffDetails_RegistrationNumber').val());
                        fileData.append('PhoneNumber', $("#StaffDetails_PhoneNumber").val()==''?'-':$("#StaffDetails_PhoneNumber").val());
                        fileData.append('Email', $("#StaffDetails_Email").val()==''?'-':$("#StaffDetails_Email").val());
                        //  fileData.append('SpecialtyId', 0); //$("#StaffDetails_SpecialtyId").val());
                        fileData.append('Speciality',$("#StaffDetails_Speciality").val()==''?'-':$("#StaffDetails_Speciality").val());
                        if(uploadedFile !=undefined)
                        {
                            fileData.append('UploadedFilePath', uploadedFile.name);
                            fileData.append('UploadedFile', uploadedFile);
                        }
                        else{
                            fileData.append('UploadedFilePath', null);
                            //fileData.append('UploadedFile', uploadedFile);
                        }


                        $.ajax({
                            type: "POST",
                            url: url,
                            data: fileData,
                            contentType: false,
                            processData: false,
                            async: true,
                            success: function (response) {
                                // Clear controls
                                $("#StaffDetails_StaffDesignation").val('');
                                $('#StaffDetails_Name').val('');
                                $('#StaffDetails_RegistrationNumber').val('');
                                $("#StaffDetails_PhoneNumber").val('');
                                $("#StaffDetails_Email").val('');
                                $("#StaffDetails_Speciality").val('');
                                $('#StaffDetails_UploadedFilePath').val('');

                                $('#tblStaffdetails tr').not(function () { return !!$(this).has('th').length; }).remove();

                                var json = response;

                                var tr;
                                //Append each row to html table
                                for (var i = 0; i < json.length; i++) {
                                    tr = $('<tr/>');
                                    tr.append("<td>" + (i + 1) + "</td>");
                                    tr.append("<td>" + json[i].StaffDesignation + "</td>");
                                    tr.append("<td>" + json[i].Name + "</td>");
                                    tr.append("<td>" + json[i].RegistrationNumber + "</td>");


                                    var path = json[i].UploadedFilePath;
                                    var index = path.indexOf("/");
                                    var displayFileName = path.substring(index + 1, path.length);
                                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                                    fileLink = fileLink.replace("displaytext", displayFileName);
                                    fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                                    tr.append("<td>" + fileLink + "</td>");
                                    tr.append("<td>" + json[i].Email + "</td>");
                                    tr.append("<td>" + json[i].PhoneNumber + "</td>");
                                    //tr.append("<td>" + json[i].SpecialtyId + "</td>");
                                    tr.append("<td>" + json[i].Speciality + "</td>");
                                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStaffDetails(" + i + ");'/></td>");

                                    $('#tblStaffdetails').append(tr);
                                }
                                // ClearControls();
                                $('#StaffDetails_StaffDesignation').val('').trigger('change');
                                $('#StaffDetails_Speciality').val('').trigger('change');

                            },
                            failure: function (response) {
                                // alert('failure: ' + response.d);
                                console.log('staff failure :'+ response.d);
                            },
                            error: function (response) {
                                //alert('error: ' + response.d);
                                console.log('staff error :'+ response.d);
                            }
                        });


                    }
                }
                else {
                    console.log('FormData is not supported.');
                    //alert("FormData is not supported.");
                }
            }
        });

        function DeleteStaffDetails(index) {
            if (confirm('Do you really want to delete?')) {
                var url = '@Url.Action("DeleteStaffDetails", "License", new { Area = "User" })';
                var data = { index: index };
                var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#tblStaffdetails tr').not(function () { return !!$(this).has('th').length; }).remove();
            if (json != undefined) {
                var tr;
                //Append each row to html table
                for (var i = 0; i < json.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + (i + 1) + "</td>");
                    tr.append("<td>" + json[i].StaffDesignation + "</td>");
                    tr.append("<td>" + json[i].Name + "</td>");
                    tr.append("<td>" + json[i].RegistrationNumber + "</td>");


                    var path = json[i].UploadedFilePath;
                    var index = path.indexOf("/");
                    var displayFileName = path.substring(index + 1, path.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                    tr.append("<td>" + json[i].Email + "</td>");
                    tr.append("<td>" + json[i].PhoneNumber + "</td>");
                    //tr.append("<td>" + json[i].SpecialtyId + "</td>");
                    tr.append("<td>" + json[i].Speciality + "</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStaffDetails(" + i + ");'/></td>");

                    $('#tblStaffdetails').append(tr);
                }
            }
            else if(json == undefined || json.length == 0){
                $('#btnStaffDetailsSave').val('Save');
                $('#btnStaffDetailsSave').removeClass('btn-success');
                $('#btnStaffDetailsSave').addClass('btn-primary');
            }
            // CheckforEnableSubmit();
        }
        )
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("Delete Equipment Request Failed: " + err);
    });
            }
        }

        $('#btnStaffDetailsSave').on('click', function (e) {
            e.preventDefault();
            var rowCount = $('#tblStaffdetails tr').length;
            //var isFormValid = $('#formStaffDetails').valid();
            if(rowCount==1)
                alert('Please add atleast 1 designation to the list');
            else
            {
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                var data = {
                    applicationtype : applicationtype,
                    ExistingApplicationId: existingApplicationId == 'undefined' ? 0 : existingApplicationId
                };
                var url = '@Url.Action("SaveStaffDetails", "License", new { Area = "User" })';
                var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var json;
                if (response instanceof Object)
                    json = response;
                else
                    json = $.parseJSON(response);

                ShowModal(response);
                var transactionId = response.ReturnData.split(',')[0];
                BindStaffDetailsOnSave(transactionId);

                // CheckforEnableSubmit();
                BindEnclosuresCnt();

            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("Save Staff Details Request Failed: " + err);
        });
            }
        });

        function BindStaffDetailsOnSave(transactionId) {
            var url = '@Url.Action("GetStaffDetails", "License", new { Area = "User" })';
            var data = { transactionId: transactionId };
            var jqxhr = $.post(url, data, function () { }, "json")
        .done(function (response) {
            var json;
            if (response instanceof Object)
                json = response;
            else
                json = $.parseJSON(response);

            $('#tblStaffdetails tr').not(function () { return !!$(this).has('th').length; }).remove();
            if (json != undefined && json.length != 0) {
                var tr;
                //Append each row to html table
                for (var i = 0; i < json.length; i++) {
                    tr = $('<tr/>');
                    tr.append("<td>" + (i + 1) + "</td>");
                    tr.append("<td>" + json[i].StaffDesignation + "</td>");
                    tr.append("<td>" + json[i].Name + "</td>");
                    tr.append("<td>" + json[i].RegistrationNumber + "</td>");
                    tr.append("<td>" + json[i].PhoneNumber + "</td>");
                    tr.append("<td>" + json[i].Email + "</td>");

                    var path = json[i].UploadedFilePath;
                    var index = path.indexOf("/");
                    var displayFileName = path.substring(index + 1, path.length);
                    var fileLink = '@Html.Raw(Html.ActionLink("displaytext", "DownloadFile", "Generic", new { Area = "", path = "filepath", downloadName = "downloadfilename" }, null))';
                    fileLink = fileLink.replace("displaytext", displayFileName);
                    fileLink = fileLink.replace("filepath", json[i].UploadedFilePath);
                    fileLink = fileLink.replace("downloadfilename", displayFileName);
                    tr.append("<td>" + fileLink + "</td>");
                    tr.append("<td><input type='button' value='Delete' onclick='DeleteStaffDetails(" + i + ");'/></td>");

                    $('#tblStaffdetails').append(tr);
                }

                $('#btnStaffDetailsSave').val('Update');
                $('#btnStaffDetailsSave').removeClass('btn-primary');
                $('#btnStaffDetailsSave').addClass('btn-success');
            }
            else if (json == undefined || json.length == 0) {
                $('#btnStaffDetailsSave').val('Save');
                $('#btnStaffDetailsSave').removeClass('btn-success');
                $('#btnStaffDetailsSave').addClass('btn-primary');
            }
        })
            .fail(function (jqxhr, status, error) {
                var err = status + ", " + error;
                console.log("GetStaffDetails Request Failed: " + err);
            });

        }

        //Saving Establishments Details

        $('#btnEstablishmentSave').on('click', function (e) {
            e.preventDefault();
            var validate=$('#formEstablishment').validate();

            if($("#EstablishmentModel_OpenAreaFilePath").val() == "" || $("#EstablishmentModel_ConstructionAreaFilePath").val() =="")
            {
                alert('Please Upload OpenArea/ConstructionArea Files!');
                return;
            }
            else if($("#EstablishmentModel_EstablishmentDate").val() == "" || $("#EstablishmentModel_EstablishmentDate").val() =="01/01/0001" || $("#EstablishmentModel_EstablishmentDate").val() =="01-01-0001")
            {
                alert('Please Select Valid Date!');
                return;
            }
            else if($("#EstablishmentModel_OpenAreaFilePath").get(0).files[0] != undefined)
            {
              if(($("#EstablishmentModel_OpenAreaFilePath").get(0).files[0].size/1000) > 3072)
              {
                  alert('Please check Open Area File size, limit to below 3 MB');
                  return;
              }
            }
            else if($("#EstablishmentModel_ConstructionAreaFilePath").get(0).files[0] != undefined)
            {
              if(($("#EstablishmentModel_ConstructionAreaFilePath").get(0).files[0].size/1000) > 3072)
              {
                  alert('Please check Construction Area File size, limit to below 3 MB');
                  return;
              }
            } 
            if ($('#formEstablishment').valid()) {
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                var url = '@Url.Action("SaveEstablishmentDetails", "License", new { Area = "User" })';

                if (window.FormData !== undefined) {
                    var uploadedFile = $("#EstablishmentModel_OpenAreaFilePath").get(0).files[0];
                    var uploadedFile1 = $("#EstablishmentModel_ConstructionAreaFilePath").get(0).files[0];

                    // Create FormData object
                    var fileData = new FormData();

                    fileData.append('Id', $('#EstablishmentModel_Id').val() == '' ? 0 : $('#EstablishmentModel_Id').val());
                    fileData.append('EstablishmentDate', $("#EstablishmentModel_EstablishmentDate").val());
                    fileData.append('OpenArea', $('#EstablishmentModel_OpenArea').val());
                    fileData.append('ConstructionArea', $('#EstablishmentModel_ConstructionArea').val());
                    if(uploadedFile !=undefined)
                    {
                        fileData.append('OpenAreaFilePath', uploadedFile.name);
                        fileData.append('OpenAreaFile', uploadedFile);
                    }
                    
                    if(uploadedFile1 !=undefined)
                    {
                        fileData.append('ConstructionAreaFilePath', uploadedFile1.name);
                        fileData.append('ConstructionAreaFile', uploadedFile1);
                    }
                    
                    fileData.append('ApplicationType',  applicationtype);
                    fileData.append('ExistingApplicationId',  existingApplicationId == 'undefined' ? 0 : existingApplicationId);

                    $.ajax({
                        type: "POST",
                        url: url,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {

                            var json;
                            if (response instanceof Object)
                                json = response;
                            else
                                json = $.parseJSON(response);

                            ShowModal(response);

                            $('#EstablishmentModel_Id').val(response.ReturnData.split(',')[0]);

                            if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                                $('#btnEstablishmentSave').val('Update');
                                $('#btnEstablishmentSave').removeClass('btn-success');
                                $('#btnEstablishmentSave').addClass('btn-primary');
                            }
                            else if (response.ReturnData.split(',')[1] == 'Completed') {
                                $('#btnEstablishmentSave').val('Update');
                                $('#btnEstablishmentSave').removeClass('btn-primary');
                                $('#btnEstablishmentSave').addClass('btn-success');
                            }
                            else if (response.ReturnData.split(',')[1] == 'Empty') {
                                $('#btnEstablishmentSave').val('Save');
                                $('#btnEstablishmentSave').removeClass('btn-success');
                                $('#btnEstablishmentSave').addClass('btn-primary');
                            }

                            // CheckforEnableSubmit();
                            BindEnclosuresCnt();
                        },
                        failure: function (response) {
                            //alert('failure: ' + response.d);
                            console.log('establishment failure :'+ response.d);
                        },
                        error: function (response) {
                           // alert('error: ' + response.d);
                            console.log('establishment error :'+ response.d);
                        }
                    });

                } else {
                     console.log('FormData is not supported.');
                    //alert("FormData is not supported.");
                }
            }

        });

        // end Saving Establishments Details

        // Saving ServicesOffered TAB Starts

        var offeredServicesTabSaved = false; var savedOfferedServiceValue = []; var unsavedOfferedServiceValue = [];
        $('#btnOfferedServicesSave').on('click', function (e) {
            e.preventDefault();

            if ($('#formServices').valid()) {
                var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
                var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
                var url = '@Url.Action("SaveServicesOfferedDetails", "License", new { Area = "User" })';

                var data = {
                    model: {
                        Id: $('#OfferedServices_Id').val() == '' ? 0 : $('#OfferedServices_Id').val(),
                        BedStrength: $('#OfferedServices_BedStrength').val(),
                        OfferedServices: $("#OfferedServices_OfferedServices").val().join(','),
                        ApplicationType : applicationtype,
                        ExistingApplicationId: existingApplicationId == 'undefined' ? 0 : existingApplicationId
                    }
                };
                var jqxhr = $.post(url, data, function () { })
            .done(function (response) {
                var json;
                if (response instanceof Object)
                    json = response;
                else
                    json = $.parseJSON(response);

                ShowModal(response);
                savedOfferedServiceValue = $("#OfferedServices_OfferedServices").val();
                isOfferedServicesInEditMode = false;

                $('#OfferedServices_Id').val(response.ReturnData.split(',')[0]);

                if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                    $('#btnOfferedServicesSave').val('Update');
                    $('#btnOfferedServicesSave').removeClass('btn-success');
                    $('#btnOfferedServicesSave').addClass('btn-primary');
                }
                else if (response.ReturnData.split(',')[1] == 'Completed') {
                    $('#btnOfferedServicesSave').val('Update');
                    $('#btnOfferedServicesSave').removeClass('btn-primary');
                    $('#btnOfferedServicesSave').addClass('btn-success');
                }
                else if (response.ReturnData.split(',')[1] == 'Empty') {
                    $('#btnOfferedServicesSave').val('Save');
                    $('#btnOfferedServicesSave').removeClass('btn-success');
                    $('#btnOfferedServicesSave').addClass('btn-primary');
                }

                offeredServicesTabSaved = true;

                // CheckforEnableSubmit();
            })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("Save Offered Services Failed: " + err);
        });

            }
        });

        // END Saving ServicesOffered TAB

        // Staff Details TAB Saving

        $('#btnStaffDetailsSave1').on('click', function (e) {
            e.preventDefault();
            if ($('#formServices').valid()) {
                var url = '@Url.Action("SaveStaffDetails", "License", new { Area = "User" })';

                if (window.FormData !== undefined) {
                    var uploadedFile = $("#StaffDetails_UploadedFilePath").get(0).files[0];
                    // Create FormData object
                    var fileData = new FormData();

                    fileData.append('Id', $('#StaffDetails_Id').val() == '' ? 0 : $('#StaffDetails_Id').val());
                    fileData.append('StaffDesignation', $("#StaffDetails_StaffDesignation").val());
                    fileData.append('Name', $('#StaffDetails_Name').val());
                    fileData.append('RegistrationNumber', $('#StaffDetails_RegistrationNumber').val());
                    fileData.append('PhoneNumber', $("#StaffDetails_PhoneNumber").val());
                    fileData.append('Email',$('#StaffDetails_Email').val() == '' ? 0 : $('#StaffDetails_Email').val());
                    // $("#StaffDetails_Email").val());
                    fileData.append('Speciality', $("#StaffDetails_Speciality").val());
                    if (uploadedFile != null) {
                        fileData.append('UploadedFilePath', uploadedFile.name);
                        fileData.append('uploadedFile', uploadedFile);
                    }

                    $.ajax({
                        type: "POST",
                        url: url,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {
                            // Clear controls

                            var json;
                            if (response instanceof Object)
                                json = response;
                            else
                                json = $.parseJSON(response);

                            ShowModal(response);

                            $('#StaffDetails_Id').val(response.ReturnData.split(',')[0]);

                            if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                                $('#btnStaffDetailsSave').val('Update');
                                $('#btnStaffDetailsSave').removeClass('btn-success');
                                $('#btnStaffDetailsSave').addClass('btn-primary');
                            }
                            else if (response.ReturnData.split(',')[1] == 'Completed') {
                                $('#btnStaffDetailsSave').val('Update');
                                $('#btnStaffDetailsSave').removeClass('btn-primary');
                                $('#btnStaffDetailsSave').addClass('btn-success');
                            }
                            else if (response.ReturnData.split(',')[1] == 'Empty') {
                                $('#btnStaffDetailsSave').val('Save');
                                $('#btnStaffDetailsSave').removeClass('btn-success');
                                $('#btnStaffDetailsSave').addClass('btn-primary');
                            }

                            // CheckforEnableSubmit();
                            BindEnclosuresCnt();
                        },
                        failure: function (response) {
                            //alert('failure: ' + response.d);
                            console.log('Staff failure :'+ response.d);
                        },
                        error: function (response) {
                           // alert('error: ' + response.d);
                            console.log('Staff error :'+ response.d);
                        }
                    });

                } else {
                     console.log('FormData is not supported.');
                    //alert("FormData is not supported.");
                }

            }
        });

        // END Staff Details Saving

        // Saving Facilities Available


        $('#btnFacilitiesAvailableSave').on('click', function (e) {
            e.preventDefault();

            var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
            var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();

            if($("#FacilitiesAvailableModel_DeclarationStampFilePath").val() == "")
            {
               alert('Please Upload DeclarationStamp File!');
               return;
            }
            else if($("#FacilitiesAvailableModel_DeclarationStampFilePath").get(0).files[0] != undefined)
            {
                if(($("#FacilitiesAvailableModel_DeclarationStampFilePath").get(0).files[0].size/1000) > 3072)
                {
                   alert('Please check DeclarationStamp File size, limit to below 3 MB');
                   return;
               }
            } 
            else if($("#FacilitiesAvailableModel_OtherInformationDocumentPath").get(0).files[0] != undefined)
            {
                if(($("#FacilitiesAvailableModel_OtherInformationDocumentPath").get(0).files[0].size/1000) > 3072)
                {
                   alert('Please check Other Info File size, limit to below 3 MB');
                   return;
               }
            } 
            var isFormValid = $('#formFacilitiesAvailable').valid();
            if(isFormValid) {
                var url = '@Url.Action("SaveFacilitiesAvailable", "License", new { Area = "User" })';

                if (window.FormData !== undefined) {
                    var uploadedFile = $("#FacilitiesAvailableModel_DeclarationStampFilePath").get(0).files[0];
                    var uploadedFile1 = $("#FacilitiesAvailableModel_OtherInformationDocumentPath").get(0).files[0];


                        // Create FormData object
                        var fileData = new FormData();

                        fileData.append('Id', $('#FacilitiesAvailableModel_Id').val() == '' ? 0 : $('#FacilitiesAvailableModel_Id').val());
                        fileData.append('HasLaborRoom', $("#FacilitiesAvailableModel_HasLaborRoom:checked").val());
                        fileData.append('HasOperationTheater', $("#FacilitiesAvailableModel_HasOperationTheater:checked").val());
                        fileData.append('OperationTheatreCount', $("#FacilitiesAvailableModel_OperationTheatreCount").val());
                        fileData.append('HasDiagnosticFacility', $("#FacilitiesAvailableModel_HasDiagnosticFacility:checked").val());
                        // fileData.append('HasDeclarationStamp', $("#FacilitiesAvailableModel_HasDeclarationStamp:checked").val());
                        fileData.append('HasDeclarationStamp', $('#FacilitiesAvailableModel_HasDeclarationStamp:checked').val() == '' ? 0 : $('#FacilitiesAvailableModel_HasDeclarationStamp:checked').val());
                        fileData.append('ExistingApplicationId', existingApplicationId == 'undefined' ? 0 : existingApplicationId);
                        fileData.append('ApplicationType', applicationtype);
                        if (uploadedFile != null ) {
                            fileData.append('DeclarationStampFilePath', uploadedFile.name);
                            fileData.append('DeclarationStampFile', uploadedFile);
                        }

                        if (uploadedFile1 != null) {
                            fileData.append('OtherInformationDescription', $('#FacilitiesAvailableModel_OtherInformationDescription').val());
                            fileData.append('OtherInformationDocumentPath', uploadedFile1.name);
                            fileData.append('OtherInformationDocument', uploadedFile1);
                        }

                        $.ajax({
                            type: "POST",
                            url: url,
                            data: fileData,
                            contentType: false,
                            processData: false,
                            async: true,
                            success: function (response) {
                                var json;
                                if (response instanceof Object)
                                    json = response;
                                else
                                    json = $.parseJSON(response);

                                ShowModal(response);

                                $('#FacilitiesAvailableModel_Id').val(response.ReturnData.split(',')[0]);

                                if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                                    $('#btnFacilitiesAvailableSave').val('Update');
                                    $('#btnFacilitiesAvailableSave').removeClass('btn-success');
                                    $('#btnFacilitiesAvailableSave').addClass('btn-primary');
                                }
                                else if (response.ReturnData.split(',')[1] == 'Completed') {
                                    $('#btnFacilitiesAvailableSave').val('Update');
                                    $('#btnFacilitiesAvailableSave').removeClass('btn-primary');
                                    $('#btnFacilitiesAvailableSave').addClass('btn-success');
                                }
                                else if (response.ReturnData.split(',')[1] == 'Empty') {
                                    $('#btnFacilitiesAvailableSave').val('Save');
                                    $('#btnFacilitiesAvailableSave').removeClass('btn-success');
                                    $('#btnFacilitiesAvailableSave').addClass('btn-primary');
                                }
                                // CheckforEnableSubmit();
                                BindEnclosuresCnt();
                            },
                            failure: function (response) {
                                //alert('failure: ' + response.d);
                                console.log('facilities failure :'+ response.d);
                            },
                            error: function (response) {
                                 //alert('error: ' + response.d);
                                 console.log('facilities error :'+ response.d);
                            }
                        });

                }
                else {
                     console.log('FormData is not supported.');
                    //alert("FormData is not supported.");
                }
            }
        });

        // END Saving Facilities Avaialble

        
        //  Saving Additional Documents 
        $('#btnAdditionalDocsUploadSave').on('click', function (e) {
            e.preventDefault();
        debugger;
            var existingApplicationId = $('#ApplicationModel_ExistingApplicationId').val() == undefined ? 0 : $('#ApplicationModel_ExistingApplicationId').val();
            var applicationtype = $('#ApplicationModel_ApplicationType').val() == undefined ? 'Grant' : $('#ApplicationModel_ApplicationType').val();
            if($('#btnAdditionalDocsUploadSave').val() =="Save")
            {
                      if($("#AdditionalDocumentsModel_TarifListFilePath").val() == "" || $('#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath').val() == "" || $('#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath').val() == "")
            {
               alert('Please Upload BioCapstone/PollutionAuthority/TarifList Files!');
               return;
            }
            else if($("#AdditionalDocumentsModel_BioCapstoneValidupto").val() == "" ||$("#AdditionalDocumentsModel_PollutionAuthorityValidupto").val() == "")
             {
                alert('Please Enter BioCapstone Clearance/PollutionAuthority Form Validupto Date');
                 return;
             }
            else if($("#RegistrationModel_BuildingHeight").val() > 15 )
             {
                if($("#AdditionalDocumentsModel_FEReportFilePath").val() =="" )
                {
                   alert('Please Upload FireNocReport  File!');
                   return;
                }
                else if($("#AdditionalDocumentsModel_FireNOCValidupto").val() == "")
                {
                  alert('Please Enter Fire_NOC Report Validupto Date');
                   return;
                }    
               else if($("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").val() =="" )
               {
                 alert('Please Upload Building Plan File!');
                 return;
               }
               else
               {
                      if($("#AdditionalDocumentsModel_FEReportFilePath").get(0).files[0] != undefined)
                      {
                          if(($("#AdditionalDocumentsModel_FEReportFilePath").get(0).files[0].size/1000) > 3072)
                          {
                             alert('Please check FireNOC Report File size, limit to below 3 MB');
                             return;
                           }
                      }                            
                      if($("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").get(0).files[0] != undefined)
                       {
                         if(($("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").get(0).files[0].size/1000) > 3072)
                          {
                             alert('Please check Building Plan File size, limit to below 3 MB');
                             return;
                          }
                       }
                } // end else
            } // end reg condition
        else
        {
                      if($("#AdditionalDocumentsModel_TarifListFilePath").get(0).files[0] != undefined)
                            {
                                if(($("#AdditionalDocumentsModel_TarifListFilePath").get(0).files[0].size/1000) > 3072)
                                {
                                    alert('Please check Tariff List File size, limit to below 3 MB');
                                    return;
                                }
                            }
                     if($("#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath").get(0).files[0] != undefined)
                            {
                                if(($("#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath").get(0).files[0].size/1000) > 3072)
                                {
                                    alert('Please check Bio Capstone Wastage File size, limit to below 3 MB');
                                    return;
                                }
                                
                            }
                        if($("#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath").get(0).files[0] != undefined)
                                            {
                                                if(($("#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath").get(0).files[0].size/1000) > 3072)
                                                {
                                                    alert('Please check Pollution Authority File size, limit to below 3 MB');
                                                    return;
                                                }
                        }
                    }
                }
            var isFormValid = $('#formUploadAdditionalDocuments').valid();
            if(isFormValid) {
                var url = '@Url.Action("SaveAdditionalDocuments", "License", new { Area = "User" })';
       
                if (window.FormData !== undefined) {

                    var bioCapstoneWastageClearanceFile = $("#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath").get(0).files[0];
                    var pollutionAuthorityFile = $("#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath").get(0).files[0];
                    var cfoFile = $("#AdditionalDocumentsModel_CFOFilePath").get(0).files[0];
                    var stpFile = $("#AdditionalDocumentsModel_STPFilePath").get(0).files[0];
                    var feReportFile = $("#AdditionalDocumentsModel_FEReportFilePath").get(0).files[0];
                    var tariffListFile = $("#AdditionalDocumentsModel_TarifListFilePath").get(0).files[0];
                    var estabishBuildingPlanFile = $("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").get(0).files[0];
                    var hospitalNamePlateFile = $("#AdditionalDocumentsModel_HospitalOutSideNamePlateBuildingFilePath").get(0).files[0];
                    var tariffBoardFile = $("#AdditionalDocumentsModel_TariffBoardFilePath").get(0).files[0];
                    var fireExhaustiveFile = $("#AdditionalDocumentsModel_FireExhaustiveFilePath").get(0).files[0];
                    var hospitalLabOperationTheatreFile = $("#AdditionalDocumentsModel_HospitalLabOperationTheaterFilePath").get(0).files[0];

                    // Create FormData object
                    var fileData = new FormData();

                    fileData.append('Id', $('#AdditionalDocumentsModel_Id').val() == '' ? 0 : $('#AdditionalDocumentsModel_Id').val());
                    fileData.append('ExistingApplicationId', existingApplicationId == 'undefined' ? 0 : existingApplicationId);
                    fileData.append('ApplicationType', applicationtype);
                    if (bioCapstoneWastageClearanceFile != null ) {
                        fileData.append('BioCapstoneWastageClearanceFromFilePath', bioCapstoneWastageClearanceFile.name);
                        fileData.append('BioCapstoneWastageClearanceFromFile', bioCapstoneWastageClearanceFile);
                        fileData.append('BioCapstoneValidupto', $("#AdditionalDocumentsModel_BioCapstoneValidupto").val());
                    }
                    if (pollutionAuthorityFile != null ) {
                        fileData.append('PollutionAuthorityLetterByPCBFilePath', pollutionAuthorityFile.name);
                        fileData.append('PollutionAuthorityLetterByPCBFile', pollutionAuthorityFile);
                        fileData.append('PollutionAuthorityValidupto', $("#AdditionalDocumentsModel_PollutionAuthorityValidupto").val());
                    }
                    if (cfoFile != null ) {
                        fileData.append('CFOFilePath', cfoFile.name);
                        fileData.append('CFOFile', cfoFile);
                    }
                    if (stpFile != null ) {
                        fileData.append('STPFilePath', stpFile.name);
                        fileData.append('STPFile', stpFile);
                    }
                    if (feReportFile != null ) {
                        fileData.append('FEReportFilePath', feReportFile.name);
                        fileData.append('FEReportFile', feReportFile);
                        fileData.append('FireNOCValidupto', $("#AdditionalDocumentsModel_FireNOCValidupto").val());
                    }
                    if (tariffListFile != null ) {
                        fileData.append('TarifListFilePath', tariffListFile.name);
                        fileData.append('TarifListFile', tariffListFile);
                    }
                    if (estabishBuildingPlanFile != null ) {
                        fileData.append('Establishment_BuildingPlanFilepath', estabishBuildingPlanFile.name);
                        fileData.append('Establishment_BuildingPlanFile', estabishBuildingPlanFile);
                    }
                    if (hospitalNamePlateFile != null ) {
                        fileData.append('HospitalOutSideNamePlateBuildingFilePath', hospitalNamePlateFile.name);
                        fileData.append('HospitalOutSideNamePlateBuildingFile', hospitalNamePlateFile);
                    }
                    if (tariffBoardFile != null ) {
                        fileData.append('TariffBoardFilePath', tariffBoardFile.name);
                        fileData.append('TariffBoardFile', tariffBoardFile);
                    }
                    if (fireExhaustiveFile != null ) {
                        fileData.append('FireExhaustiveFilePath', fireExhaustiveFile.name);
                        fileData.append('FireExhaustiveFile', fireExhaustiveFile);
                    }                    
                    if (hospitalLabOperationTheatreFile != null ) {
                        fileData.append('HospitalLabOperationTheaterFilePath', hospitalLabOperationTheatreFile.name);
                        fileData.append('HospitalLabOperationTheaterFile', hospitalLabOperationTheatreFile);
                    }

                    $.ajax({
                        type: "POST",
                        url: url,
                        data: fileData,
                        contentType: false,
                        processData: false,
                        async: true,
                        success: function (response) {
                            var json;
                            if (response instanceof Object)
                                json = response;
                            else
                                json = $.parseJSON(response);

                            ShowModal(response);

                            $('#AdditionalDocumentsModel_Id').val(response.ReturnData.split(',')[0]);

                            if (response.ReturnData.split(',')[1] == 'PartiallySaved') {
                                $('#btnAdditionalDocsUploadSave').val('Update');
                                $('#btnAdditionalDocsUploadSave').removeClass('btn-success');
                                $('#btnAdditionalDocsUploadSave').addClass('btn-primary');
                            }
                            else if (response.ReturnData.split(',')[1] == 'Completed') {
                                $('#btnAdditionalDocsUploadSave').val('Update');
                                $('#btnAdditionalDocsUploadSave').removeClass('btn-primary');
                                $('#btnAdditionalDocsUploadSave').addClass('btn-success');
                                $('#btnAdditionalDocsUploadSave').prop('disabled', true);
                            }
                            else if (response.ReturnData.split(',')[1] == 'Empty') {
                                $('#btnAdditionalDocsUploadSave').val('Save');
                                $('#btnAdditionalDocsUploadSave').removeClass('btn-success');
                                $('#btnAdditionalDocsUploadSave').addClass('btn-primary');
                            }
                            // CheckforEnableSubmit();
                            BindEnclosuresCnt();
                        },
                        failure: function (response) {
                            console.log('Adtnl Docs failure :'+ response.d);
                            //alert('failure: ' + response.d);
                        },
                        error: function (response) {
                        console.log('Adtnl Docs error :'+ response.d);
                           // alert('error: ' + response.d);
                        }
                    });
                }
                else {
                    alert("FormData is not supported.");
                }
            }
        });

        function validateAdditionalDocs()
        {
             var validateresult = false;
            if($("#AdditionalDocumentsModel_TarifListFilePath").val() == "" || $('#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath').val() == "" || $('#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath').val() == "")
            {
               alert('Please Upload BioCapstone/PollutionAuthority/TarifList Files!');
               return;
            }
            else if($("#AdditionalDocumentsModel_BioCapstoneValidupto").val() == "" ||$("#AdditionalDocumentsModel_PollutionAuthorityValidupto").val() == "")
             {
                alert('Please Enter BioCapstone Clearance/PollutionAuthority Form Validupto Date');
                 return;
             }
            else if($("#RegistrationModel_BuildingHeight").val() > 15 )
             {
                if($("#AdditionalDocumentsModel_FEReportFilePath").val() =="" )
                {
                   alert('Please Upload FireNocReport  File!');
                   return;
                }
                else if($("#AdditionalDocumentsModel_FireNOCValidupto").val() == "")
                {
                  alert('Please Enter Fire_NOC Report Validupto Date');
                   return;
                }    
               else if($("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").val() =="" )
               {
                 alert('Please Upload Building Plan File!');
                 return;
               }
               else
               {
                      if($("#AdditionalDocumentsModel_FEReportFilePath").get(0).files[0] != undefined)
                      {
                          if(($("#AdditionalDocumentsModel_FEReportFilePath").get(0).files[0].size/1000) > 3072)
                          {
                             alert('Please check FireNOC Report File size, limit to below 3 MB');
                             return;
                           }
                      }                            
                      if($("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").get(0).files[0] != undefined)
                       {
                         if(($("#AdditionalDocumentsModel_Establishment_BuildingPlanFilepath").get(0).files[0].size/1000) > 3072)
                          {
                             alert('Please check Building Plan File size, limit to below 3 MB');
                             return;
                          }
                       }
                } // end else
            } // end reg condition
        else
        {
                      if($("#AdditionalDocumentsModel_TarifListFilePath").get(0).files[0] != undefined)
                            {
                                if(($("#AdditionalDocumentsModel_TarifListFilePath").get(0).files[0].size/1000) > 3072)
                                {
                                    alert('Please check Tariff List File size, limit to below 3 MB');
                                    return;
                                }
                            }
                     if($("#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath").get(0).files[0] != undefined)
                            {
                                if(($("#AdditionalDocumentsModel_BioCapstoneWastageClearanceFromFilePath").get(0).files[0].size/1000) > 3072)
                                {
                                    alert('Please check Bio Capstone Wastage File size, limit to below 3 MB');
                                    return;
                                }
                                
                            }
                        if($("#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath").get(0).files[0] != undefined)
                                            {
                                                if(($("#AdditionalDocumentsModel_PollutionAuthorityLetterByPCBFilePath").get(0).files[0].size/1000) > 3072)
                                                {
                                                    alert('Please check Pollution Authority File size, limit to below 3 MB');
                                                    return;
                                                }
                        }
        }
               
                       
            return validateresult;
        }
        // END Saving Additional Documents Avaialble

        // //&& $('#btnTrustSave').hasClass('btn-success')
        function CheckforAPMCEComplete(){ 
            var result = false;
            if($('#btnRegistrationSave').hasClass('btn-success')
                && $('#btnCorrespondingSave').hasClass('btn-success') 
                && $('#btnAccommodationSave').hasClass('btn-success') && $('#btnEstablishmentSave').hasClass('btn-success')
            && $('#btnOfferedServicesSave').hasClass('btn-success') && $('#btnStaffDetailsSave').hasClass('btn-success')
            && $('#btnInfraStructureSave').hasClass('btn-success') && $('#btnFacilitiesAvailableSave').hasClass('btn-success')
        && $('#btnAdditionalDocsUploadSave').hasClass('btn-success')
                ){
                result = true;
                //$('#btnPreview').removeAttr("disabled");
            }
            else
            {
                result = false;
                //$('#btnPreview').attr('disabled', 'disabled');
            }

            return result;
        }

        function BindEnclosuresCnt(){
            
            var serviceName='APMCE';
            var url = '@Url.Action("EnclosureCount", "License", new { Area = "User" })';
            var data = {
                ServiceName:  serviceName
            };
            var jqxhr = $.post(url, data, function () { })
        .done(function (response) {
            if(response != null || response!="")
            {
                var enclosureJson ;
                if (response instanceof Object)
                    enclosureJson = response;
                else
                    enclosureJson = $.parseJSON(response);
                
                console.log('enclosure Count :'+ enclosureJson);
                $('#FacilitiesAvailableModel_EnclosureCnt').val(enclosureJson); //EnclosureCnt);

            }


        })
    .fail(function (jqxhr, status, error) {
        var err = status + ", " + error;
        console.log("enclosureJson Request Failed: " + err);
    });

        }


        function ValidateAPMCECompleted(){
            var result = false;

            if($('#btnRegistrationSave').hasClass('btn-success'))

            {
                result= true;
            }
            else
            {

                $('#liRegistrationTab ').removeClass('active');
                $('#liAddressTab').removeClass('active');
                $('#liTrustTab ').removeClass('active');
                $('#liAccomudationTab').removeClass('active');
                $('#liEstablishmentTab ').removeClass('active');
                $('#liServicesTab').removeClass('active');
                $('#liStaffTab ').removeClass('active');
                $('#liAPMCEEquipmentTab').removeClass('active');
                $('#liFacilitiesTab').removeClass('active');

                $('#tabRegistration ').removeClass('active');
                $('#tabCorreespondingAddress ').removeClass('active');
                $('#tabTrust  ').removeClass('active');
                $('#tabInfraStructure').removeClass('active');
                $('#tabAccommodation  ').removeClass('active');
                $('#tabEstablishment').removeClass('active');
                $('#tabServices  ').removeClass('active');
                $('#tabStaffDetails').removeClass('active');
                $('#tabFacilitiesAvailable ').removeClass('active');

                $('#liRegistrationTab').addClass('active');
                $('#tabRegistration').addClass('active');

                result= false;


            }
            if(result==true)
            {
                if($('#btnCorrespondingSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust  ').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation  ').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices  ').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable ').removeClass('active');

                    $('#liAddressTab').addClass('active');
                    $('#tabCorreespondingAddress').addClass('active');
                    result= false;
                }
            }
            if(result==true)
            {
                //if($('#btnTrustSave').hasClass('btn-success'))
                //{
                //    result=true;
                //}
                //else
                //{
                //    $('#liRegistrationTab ').removeClass('active');
                //    $('#liAddressTab').removeClass('active');
                //    $('#liTrustTab ').removeClass('active');
                //    $('#liAccomudationTab').removeClass('active');
                //    $('#liEstablishmentTab ').removeClass('active');
                //    $('#liServicesTab').removeClass('active');
                //    $('#liStaffTab ').removeClass('active');
                //    $('#liAPMCEEquipmentTab').removeClass('active');
                //    $('#liFacilitiesTab').removeClass('active');

                //    $('#tabRegistration ').removeClass('active');
                //    $('#tabCorreespondingAddress ').removeClass('active');
                //    $('#tabTrust').removeClass('active');
                //    $('#tabInfraStructure').removeClass('active');
                //    $('#tabAccommodation').removeClass('active');
                //    $('#tabEstablishment').removeClass('active');
                //    $('#tabServices').removeClass('active');
                //    $('#tabStaffDetails').removeClass('active');
                //    $('#tabFacilitiesAvailable').removeClass('active');

                //    $('#liTrustTab').addClass('active');
                //    $('#tabTrust').addClass('active');
                //    result= false;
                //}
            }
            if(result==true)
            {
                if($('#btnAccommodationSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable').removeClass('active');

                    $('#liAccomudationTab').addClass('active');
                    $('#tabAccommodation').addClass('active');
                    result= false;
                }
            }
            if(result==true)
            {
                if($('#btnEstablishmentSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable').removeClass('active');

                    $('#liEstablishmentTab').addClass('active');
                    $('#tabEstablishment').addClass('active');
                    result= false;
                }
            }
            if(result==true)
            {
                if($('#btnOfferedServicesSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable').removeClass('active');

                    $('#liServicesTab').addClass('active');
                    $('#tabServices').addClass('active');
                    result= false;
                }
            }
            if(result==true)
            {
                if($('#btnStaffDetailsSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable').removeClass('active');

                    $('#liStaffTab').addClass('active');
                    $('#tabStaffDetails').addClass('active');
                    result= false;
                }
            }
            if(result==true)
            {
                if($('#btnInfraStructureSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable').removeClass('active');

                    $('#liAPMCEEquipmentTab').addClass('active');
                    $('#tabInfraStructure').addClass('active');
                    result= false;
                }
            }
            if(result==true)
            {
                if($('#btnFacilitiesAvailableSave').hasClass('btn-success'))
                {
                    result=true;
                }
                else
                {
                    $('#liRegistrationTab ').removeClass('active');
                    $('#liAddressTab').removeClass('active');
                    $('#liTrustTab ').removeClass('active');
                    $('#liAccomudationTab').removeClass('active');
                    $('#liEstablishmentTab ').removeClass('active');
                    $('#liServicesTab').removeClass('active');
                    $('#liStaffTab ').removeClass('active');
                    $('#liAPMCEEquipmentTab').removeClass('active');
                    $('#liFacilitiesTab').removeClass('active');

                    $('#tabRegistration ').removeClass('active');
                    $('#tabCorreespondingAddress ').removeClass('active');
                    $('#tabTrust').removeClass('active');
                    $('#tabInfraStructure').removeClass('active');
                    $('#tabAccommodation').removeClass('active');
                    $('#tabEstablishment').removeClass('active');
                    $('#tabServices').removeClass('active');
                    $('#tabStaffDetails').removeClass('active');
                    $('#tabFacilitiesAvailable').removeClass('active');

                    $('#liFacilitiesTab').addClass('active');
                    $('#tabFacilitiesAvailable').addClass('active');
                    result= false;
                }
            }
            return result;
        }

    </script>

<script>
    $('#RegistrationModel_HospitalTypeId').on('change', function (e) {
        if (savedHospitalTypeId != $('#RegistrationModel_HospitalTypeId').val()) {
            isRegistrationFormInEditMode = true;
        }

        GetOfferedServices(this.value);
        if (this.value != '') {
            $('#divClinicType').hide();
            $('#divDentalLabType').hide();
            $('#divDiagnosticCenterType').hide();
            $('#divBedStrengthSpeciality').hide();
            switch (this.value) {
                case '1': {
                    $('#divClinicType').show();
                    $('#RegistrationModel_ClinicType').val('').trigger('change');
                }
                    break;
                case '2': {
                    $('#divBedStrengthSpeciality').show();
                    $('#RegistrationModel_BedStrength').val('').trigger('change');
                    $('#RegistrationModel_Speciality').val('').trigger('change');
                }
                    break;
                case '3': {
                    $('#divDiagnosticCenterType').show();
                    $('#ddlDiagnosticCenterType').val('').trigger('change');
                }
                    break;
                case '6': {
                    $('#divDentalLabType').show();
                    $('#ddlDentalLabType').val('').trigger('change');
                }
                    break;
                default:
            }
        }
        else {
            $('#divClinicType').hide();
            $('#divDentalLabType').hide();
            $('#divBedStrengthSpeciality').hide();
            $('#divDiagnosticCenterType').hide();
        }
    });

    function GetOfferedServices(hospitalTypeId) {
        console.log('master data called');
        $('#btnOfferedServicesSave').removeClass('btn-success');
        $('#btnOfferedServicesSave').addClass('btn-primary');
        $("#OfferedServices_OfferedServices").empty();

        if (hospitalTypeId == '')
            return;

        var data = { hospitalTypeId };
        var url = '@Url.Action("GetOfferedServicesByHospitalTypeId", "License", "User")';
        var jqxhr = $.post(url, data, function () { }, 'json')
            .done(function (json) {
                $.each(json, function () {
                    $('#OfferedServices_OfferedServices').append($('<option></option>').val(this.Id).html(this.Name));
                });
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("Getting Equipment list Request Failed: " + err);
            });
    }

    function GetEquipmentsList(hospitalTypeId) {
        $('#InfraStructure_EquipmentId').html('');
        $('#InfraStructure_EquipmentId').append($('<option></option>').val('').html('Select Equipment'));
        var data = { HospitalTypeId : hospitalTypeId };
            var url = '@Url.Action("GetEquipmentsList", "License","User")';
            var jqxhr = $.post(url, data, function () { }, 'json')
            .done(function (response) {
                if (response instanceof Object)
                    var json = response;
                else
                    var json = $.parseJSON(response);
                $.each(json, function () {
                    $('#InfraStructure_EquipmentId').append($('<option></option>').val(this.Id).html(this.Name));
                });
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("Getting Equipment list Request Failed: " + err);
            });
    }

    $('#OfferedServices_OfferedServices').on('change', function (e) {
        GetEquipmentOnOfferedServicesChange();
    });

    var isOfferedServicesInEditMode = false;
    function GetEquipmentOnOfferedServicesChange() {
   
        $('#InfraStructure_EquipmentId').html('');
        $('#InfraStructure_EquipmentId').append($('<option></option>').val('').html('Select Equipment'));
        var offeredServices = $("#OfferedServices_OfferedServices").val();
        unsavedOfferedServiceValue = offeredServices;
        if(savedOfferedServiceValue != null)
            isOfferedServicesInEditMode = !CompareArrays(savedOfferedServiceValue, unsavedOfferedServiceValue);
    
        if (offeredServices == null)
            return;

        var offeredServiceIds = offeredServices.join(',');
        var data = { offeredServiceIds };
            var url = '@Url.Action("GetEquipmentBasedonOfferedServiceIds", "License","User")';
            var jqxhr = $.post(url, data, function () { }, 'json')
            .done(function (json) {
                
                $.each(json, function () {
                    $('#InfraStructure_EquipmentId').append($('<option></option>').val(this.Id).html(this.Name));
                });
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                console.log("Getting Equipment list Request Failed: " + err);
            });
    }

    function CompareArrays(arr1, arr2) {

        if (arr1.length != arr2.length)
            return false;

        for (var i = 0; i < arr1.length; i++) {
            var index = $.inArray(arr1[i], arr2);
            if (index == -1) {
                return false;
            }
        }
        return true;
    }

</script>

<script>
function ViewForm1License(Id, TableName,formId) {
        debugger;
        var titlename= "TAMCE Form-" + formId + " Certificate";

        var url = '@Url.Action("AllTAMCEformsCertificateDetails", "Application", new { Area = "User" })';
        var data = {
            TransactionId: Id,
            TableName: TableName,
            FormId :formId
        };
        var jqxhr = $.post(url, data, function () { }, "html")
        .done(function (response) {
            var notificationModel = GetModalJSON();
            notificationModel.Title = titlename;
            notificationModel.BodyContent = response;
            notificationModel.IsLargeModal = true;
            ShowModal(notificationModel);
        })
        .fail(function (jqxhr, status, error) {
            var err = status + ", " + error;
            console.log("Get Form 1 Request Failed: " + err);
        });
    }
</script>